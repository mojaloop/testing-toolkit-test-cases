{
  "name": "parties_negative",
  "test_cases": [
    {
      "id": "party-info-miss-hdr",
      "name": "Party info with missing header",
      "meta": {
        "info": "Party info with missing header"
      },
      "requests": [
        {
          "id": "Party-info-missing-fspiop-src-",
          "meta": {
            "info": "Party info with missing fspiop source header"
          },
          "description": "Party info with missing fspiop source header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-fspiop",
                "description": "Response should contain fspiop",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('fspiop-source')"
                ]
              },
              {
                "id": "rsp-3102",
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": "Party-info-missing-date-hdr",
          "meta": {
            "info": "Party info with missing date header"
          },
          "description": "Party info with missing date header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-date",
                "description": "Response should contain date",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date')"
                ]
              },
              {
                "id": "rsp-3102",
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": "Party-info-missing-content-hdr",
          "meta": {
            "info": "Party info with missing content header"
          },
          "description": "Party info with missing content header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-content-type",
                "description": "Response should contain content-type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('content')"
                ]
              },
              {
                "id": "rsp-3102",
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              }
            ]
          }
        },
        {
          "id": "Party-info-missing-accept-hdr",
          "meta": {
            "info": "Party info with missing accept header"
          },
          "description": "Party info with missing accept header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "{$inputs.contentType}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-3102",
                "description": "Response should contain '3102'",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.include('3102')"
                ]
              },
              {
                "id": "rsp-accept",
                "description": "Response should contain accept",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('accept')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "party-info-unprov",
      "name": "Party info of unprovisioned party",
      "meta": {
        "info": "Party info of unprovisioned party"
      },
      "requests": [
        {
          "id": "Party-info-unprovisioned-party",
          "meta": {
            "info": "Party info of unprovisioned party"
          },
          "description": "Party info of unprovisioned party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "123"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "req-content-type-parties",
                "description": "Request content-type to be parties",
                "exec": [
                  "expect('{$request.headers['Content-Type']}').to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')",
                  ""
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-error-description",
                "description": "Response should contain error description",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              },
              {
                "id": "cb-error-3200",
                "description": "Callback error should be 3200",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3200')"
                ]
              }
            ]
          }
        },
        {
          "id": "Party-info-unused-type",
          "meta": {
            "info": "Party info of unused type"
          },
          "description": "Party info of unused type",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "BUSINESS",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "req-content-type-parties",
                "description": "Request content-type to be parties",
                "exec": [
                  "expect('{$request.headers['Content-Type']}').to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')",
                  ""
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-error-description",
                "description": "Response should contain error description",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              },
              {
                "id": "cb-error-3200",
                "description": "Callback error should be 3200",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3200')"
                ]
              }
            ]
          },
          "path": "/parties/BUSINESS/{$inputs.toIdValue}"
        }
      ]
    },
    {
      "id": "party-info-wrong-hdr",
      "name": "Party info with wrong header values",
      "meta": {
        "info": "Party info with wrong header values"
      },
      "requests": [
        {
          "id": "Party-info-wrong-date-hdr-BUG",
          "meta": {
            "info": "Party info with wrong date header (BUG)"
          },
          "description": "Party info with wrong date header (BUG)",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "thursday"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-date",
                "description": "Response should contain date",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('date')"
                ]
              }
            ]
          }
        },
        {
          "id": "Party-info-wrong-content-hdr-B",
          "meta": {
            "info": "Party info with wrong content header(BUG)"
          },
          "description": "Party info with wrong content header(BUG)",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "application/vnd.interoperability.parties+xml;version=15.5"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              },
              {
                "id": "rsp-content-type",
                "description": "Response should contain content-type",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include('content')"
                ]
              }
            ]
          }
        },
        {
          "id": "Party-info-wrong-accept-hdr-BU",
          "meta": {
            "info": "Party info with wrong accept header(BUG)"
          },
          "description": "Party info with wrong accept header(BUG)",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Content-Type": "{$inputs.contentType}",
            "Accept": "application/vnd.interoperability.parties+xml;version=3.0"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-400",
                "description": "Response should be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-statusText-Bad-req",
                "description": "Response statusText be Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "rsp-error-information",
                "description": "Response should contain error information",
                "exec": [
                  "expect(response.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "rsp-error-code",
                "description": "Response should contain error code",
                "exec": [
                  "expect(response.body.errorInformation).to.have.property('errorCode')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "get-party-wrong-opt-hdr",
      "name": "Get Party with wrong optional headers",
      "meta": {
        "info": "Get Party with wrong optional headers"
      },
      "requests": [
        {
          "id": "Get-party-information",
          "meta": {
            "info": "Get party information"
          },
          "description": "Get party information",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-party",
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-content-type-parties",
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                ]
              },
              {
                "id": "cb-partyIdInfo-partyIdType-par",
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              }
            ]
          }
        },
        {
          "id": "Get-party-information-wrong-op",
          "meta": {
            "info": "Get party information with wrong optional HTTP header"
          },
          "description": "Get party information with wrong optional HTTP header",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.accept}",
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-HTTP-Method": "PUT"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-party",
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-content-type-parties",
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version=1.0')"
                ]
              },
              {
                "id": "cb-partyIdInfo-partyIdType-par",
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}