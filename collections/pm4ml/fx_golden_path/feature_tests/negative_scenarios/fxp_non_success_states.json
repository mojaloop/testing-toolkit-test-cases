{
  "options": {},
  "name": "fxp_non_success_states",
  "test_cases": [
    {
      "id": 1,
      "name": "POST /fxTransfers returns ABORTED state",
      "fileInfo": {
        "path": "pm4ml/sdk_fx_transfer.json"
      },
      "meta": {
        "info": "POST /fxTransfers returns ABORTED state"
      },
      "requests": [
        {
          "id": 1,
          "description": "Get Accounts for Payer BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYERDFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYERDFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance before FxTransfer=${environment.payerPositionBalanceBeforeFxTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Get Accounts for Payee BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYEEDFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYEEDFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payeePositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payee Position Balance before FxTransfer=${environment.payeePositionBalanceBeforeFxTransfer}`);",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get Accounts for FXP BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`FXP Source Currency Position Balance before FxTransfer=${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer}`);",
                "",
                "console.log(`FXP Target Currency Position Balance before FxTransfer=${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer}`);"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Initiate a transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "url": null,
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "merchantClassificationCode": "123",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}"
            },
            "amountType": "SEND",
            "transactionType": "TRANSFER",
            "currency": "{$inputs.FX_SOURCE_CURRENCY}",
            "amount": "{$inputs.FX_SOURCE_AMOUNT}",
            "transferRequestExtensions" : [
              {
                "key": "503",
                "value": "Trigger ABORTED state"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 5,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.4.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.4.response.body.transferId}"
          },
          "url": null,
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 500",
                "exec": [
                  "expect(response.status).to.equal(500)"
                ]
              },
              {
                "id": 2,
                "description": "Check for /error response with timeout information",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_CONVERSION_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Accept Conversion",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "url": null,
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 4,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.1.response.body.transferId}"
          },
          "url": null,
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be COMPLETED",
                "exec": [
                  "expect(response.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          }
        },
        {
          "id": 6,
          "description": "Get Accounts for Payer AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYERDFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYERDFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance after Transfer=${environment.payerPositionBalanceAfterTransfer}`);"
              ]
            }
          },
          "tests" :{
            "assertions": [
              {
                "id": 1,
                "description": "Payer position should not be changed",
                "exec": [
                  "expect(environment.payerPositionBalanceAfterTransfer).to.equal(environment.payerPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          }           
        },
        {
          "id": 7,
          "description": "Get Accounts for Payee AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYEEDFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYEEDFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests" :{
            "assertions": [
              {
                "id": 1,
                "description": "FXP position should not be changed",
                "exec": [
                  "expect(environment.fxpPositionBalanceAfterTransfer).to.equal(environment.payerPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payeePositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payee Position Balance after Transfer=${environment.payeePositionBalanceAfterTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 8,
          "description": "Get Accounts for FXP AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "FXP Source currency position should be changed",
                "exec": [
                  "expect(environment.fxpSourceCurrencyPositionBalanceAfterTransfer-environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer).to.equal(-environment.FXP_SOURCE_AMOUNT)"
                ]
              },
              {
                "id": 2,
                "description": "FXP Target currency position should be changed",
                "exec": [
                  "expect(environment.fxpTargetCurrencyPositionBalanceAfterTransfer-environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer).to.equal(+environment.FXP_TARGET_AMOUNT)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "// console.log(`FXP Source Currency Position Balance after Transfer=${environment.fxpSourceCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "// console.log(`FXP Target Currency Position Balance after Transfer=${environment.fxpTargetCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "console.log(`Payer Position ${environment.FXP_SOURCE_CURRENCY} : ${environment.payerPositionBalanceBeforeFxTransfer} -> ${environment.payerPositionBalanceAfterTransfer} (${environment.payerPositionBalanceAfterTransfer - environment.payerPositionBalanceBeforeFxTransfer})`);",
                "console.log(`Payee Position ${environment.FXP_TARGET_CURRENCY} : ${environment.payeePositionBalanceBeforeFxTransfer} -> ${environment.payeePositionBalanceAfterTransfer} (${environment.payeePositionBalanceAfterTransfer - environment.payeePositionBalanceBeforeFxTransfer})`);",
                "console.log(`FXP Source Currency ${environment.FXP_SOURCE_CURRENCY} : ${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer} -> ${environment.fxpSourceCurrencyPositionBalanceAfterTransfer} (${environment.fxpSourceCurrencyPositionBalanceAfterTransfer - environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer})`);",
                "console.log(`FXP Target Currency ${environment.FXP_TARGET_CURRENCY} : ${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer} -> ${environment.fxpTargetCurrencyPositionBalanceAfterTransfer} (${environment.fxpTargetCurrencyPositionBalanceAfterTransfer - environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer})`);"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "FX Transfer - Timeout Scenario",
      "fileInfo": {
        "path": "pm4ml/sdk_fx_transfer.json"
      },
      "meta": {
        "info": "POST /fxTransfers times out"
      },
      "requests": [
        {
          "id": 1,
          "description": "Get Accounts for Payer BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.fromFspId}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance before FxTransfer=${environment.payerPositionBalanceBeforeFxTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 2,
          "description": "Get Accounts for Payee BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FXP_PAYEE_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FXP_PAYEE_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payeePositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payee Position Balance before FxTransfer=${environment.payeePositionBalanceBeforeFxTransfer}`);",
                ""
              ]
            }
          }
        },
        {
          "id": 3,
          "description": "Get Accounts for FXP BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FXP_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FXP_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`FXP Source Currency Position Balance before FxTransfer=${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer}`);",
                "",
                "console.log(`FXP Target Currency Position Balance before FxTransfer=${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer}`);"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Initiate a transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "url": null,
          "body": {
            "homeTransactionId": "{$inputs.HOME_TRANSACTION_ID}",
            "from": {
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_SOURCE_PARTY_ID_1}",
              "displayName": "{$inputs.FROM_DISPLAY_NAME}",
              "firstName": "{$inputs.FROM_FIRST_NAME}",
              "middleName": "{$inputs.FROM_MIDDLE_NAME}",
              "lastName": "{$inputs.FROM_LAST_NAME}",
              "dateOfBirth": "{$inputs.FROM_DOB}",
              "merchantClassificationCode": "123",
              "fspId": "{$inputs.FROM_FSP_ID}"
            },
            "to": {
              "idType": "MSISDN",
              "idValue": "{$inputs.FX_DESTINATION_PARTY_ID_1}"
            },
            "amountType": "SEND",
            "transactionType": "TRANSFER",
            "currency": "{$inputs.FX_SOURCE_CURRENCY}",
            "amount": "{$inputs.FX_SOURCE_AMOUNT}",
            "quoteRequestExtensions" : [
              {
                "key": "501",
                "value": "Trigger Quote Error"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 5,
          "description": "Accept Party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.4.response.body.transferId}"
          },
          "url": null,
          "body": {
            "acceptParty": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Quotes Response contains error",
                "exec": [
                  "expect(response.body.fxQuoteResponse).contains('error code')"
                ]
              }
            ]
          }
        },
        {
          "id": 6,
          "description": "Accept Conversion",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.4.response.body.transferId}"
          },
          "url": null,
          "body": {
            "acceptConversion": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": 7,
          "description": "Accept Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "mojaloop_connector_outbound",
            "asynchronous": false
          },
          "operationPath": "/transfers/{transferId}",
          "path": "/transfers/{$prev.1.response.body.transferId}",
          "method": "put",
          "params": {
            "transferId": "{$prev.4.response.body.transferId}"
          },
          "url": null,
          "body": {
            "acceptQuote": true
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Current state should be COMPLETED",
                "exec": [
                  "expect(response.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          }
        },
        {
          "id": 8,
          "description": "Get Accounts for Payer AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.fromFspId}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance after Transfer=${environment.payerPositionBalanceAfterTransfer}`);"
              ]
            }
          },
          "tests" :{
            "assertions": [
              {
                "id": 1,
                "description": "Payer position should not be changed",
                "exec": [
                  "expect(environment.payerPositionBalanceAfterTransfer).to.equal(environment.payerPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          }           
        },
        {
          "id": 9,
          "description": "Get Accounts for Payee AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FXP_PAYEE_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FXP_PAYEE_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests" :{
            "assertions": [
              {
                "id": 1,
                "description": "FXP position should not be changed",
                "exec": [
                  "expect(environment.fxpPositionBalanceAfterTransfer).to.equal(environment.payerPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payeePositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payee Position Balance after Transfer=${environment.payeePositionBalanceAfterTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": 10,
          "description": "Get Accounts for FXP AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FXP_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FXP_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "FXP Source currency position should be changed",
                "exec": [
                  "expect(environment.fxpSourceCurrencyPositionBalanceAfterTransfer-environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer).to.equal(-environment.FXP_SOURCE_AMOUNT)"
                ]
              },
              {
                "id": 2,
                "description": "FXP Target currency position should be changed",
                "exec": [
                  "expect(environment.fxpTargetCurrencyPositionBalanceAfterTransfer-environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer).to.equal(+environment.FXP_TARGET_AMOUNT)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FXP_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FXP_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "// console.log(`FXP Source Currency Position Balance after Transfer=${environment.fxpSourceCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "// console.log(`FXP Target Currency Position Balance after Transfer=${environment.fxpTargetCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "console.log(`Payer Position ${environment.FXP_SOURCE_CURRENCY} : ${environment.payerPositionBalanceBeforeFxTransfer} -> ${environment.payerPositionBalanceAfterTransfer} (${environment.payerPositionBalanceAfterTransfer - environment.payerPositionBalanceBeforeFxTransfer})`);",
                "console.log(`Payee Position ${environment.FXP_TARGET_CURRENCY} : ${environment.payeePositionBalanceBeforeFxTransfer} -> ${environment.payeePositionBalanceAfterTransfer} (${environment.payeePositionBalanceAfterTransfer - environment.payeePositionBalanceBeforeFxTransfer})`);",
                "console.log(`FXP Source Currency ${environment.FXP_SOURCE_CURRENCY} : ${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer} -> ${environment.fxpSourceCurrencyPositionBalanceAfterTransfer} (${environment.fxpSourceCurrencyPositionBalanceAfterTransfer - environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer})`);",
                "console.log(`FXP Target Currency ${environment.FXP_TARGET_CURRENCY} : ${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer} -> ${environment.fxpTargetCurrencyPositionBalanceAfterTransfer} (${environment.fxpTargetCurrencyPositionBalanceAfterTransfer - environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer})`);"
              ]
            }
          }
        }
      ]
    }
  ]
}