{
    "name": "multi",
    "test_cases": [
      {
        "id": 1,
        "name": "COMESA Scheme Rule: Test for Max outgoing ZMW:20",
        "meta": {
          "info": "COMESA Scheme Rule: Test for Max outgoing ZMW:20"
        },
        "fileInfo": {
          "path": "hub/comesa/scheme_rules/scheme_rules.json",
          "labels": [
            "prod-tests",
            "p2p"
          ]
        },
        "requests": [
          {
            "id": 1,
            "meta": {
              "info": "This request allows us to add a new participant to Account Lookup Service."
            },
            "description": "Add Participant to ALS",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/participants/{Type}/{ID}",
            "path": "/participants/{$inputs.toIdType}/{$inputs.toIdValue}",
            "method": "post",
            "params": {
              "Type": "{$inputs.toIdType}",
              "ID": "{$inputs.toIdValue}"
            },
            "headers": {
              "FSPIOP-Source": "{$inputs.toFspId}",
              "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}",
              "Accept": "{$inputs.acceptParticipants}",
              "Content-Type": "{$inputs.contentTypeParticipants}",
              "Date": "{$function.generic.curDate}"
            },
            "body": {
              "fspId": "{$inputs.toFspId}",
              "currency": "{$inputs.currency}"
            },
            "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
            "ignoreCallbacks": true,
            "scriptingEngine": "javascript",
            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.toIdValue}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          },
          {
            "id": 2,
            "meta": {
              "info": "This request allows us to add a new party to Simulator."
            },
            "description": "Add Party to Simulator",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 0,
              "type": "mojaloop_simulator",
              "asynchronous": false,
              "additionalApi": true
            },
            "operationPath": "/repository/parties",
            "path": "/repository/parties",
            "method": "post",
            "url": "{$inputs.PAYEEFSP_BACKEND_TESTAPI_URL}",
            "headers": {
              "FSPIOP-Source": "{$inputs.toFspId}",
              "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
            },
            "body": {
              "displayName": "Test PayeeFSP",
              "firstName": "Test",
              "middleName": "Test",
              "lastName": "Test",
              "dateOfBirth": "1984-01-01",
              "idType": "{$inputs.toIdType}",
              "idValue": "{$inputs.toIdValue}"
            }
          },
          {
            "id": 3,
            "meta": {
              "info": "This request allows us to get the personal information associated with a MSISDN and the FSP associated to it."
            },
            "description": "Get party information",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "headers": {
              "Accept": "{$inputs.acceptParties}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.fromFspId}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "Content-Type": "{$inputs.contentTypeParties}"
            },
            "params": {
              "Type": "{$inputs.toIdType}",
              "ID": "{$inputs.toIdValue}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback body should contain party",
                  "exec": [
                    "expect(callback.body).to.have.property('party')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Request FSPIOP-Source same as inputs fromFspId",
                  "exec": [
                    "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be parties",
                  "exec": [
                    "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')"
                  ]
                },
                {
                  "id": 8,
                  "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                  "exec": [
                    "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                    "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Payee FSPIOP-Source",
                  "exec": [
                    "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                    "  expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                    "}"
                  ]
                },
                {
                  "id": 10,
                  "description": "Payee Content-Type",
                  "exec": [
                    "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                    "  expect(environment.payeeRequest.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')",
                    "}"
                  ]
                }
              ]
            },
            "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
            "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
            "scriptingEngine": "javascript",
            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.toIdValue}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          },
          {
            "id": 4,
            "meta": {
              "info": "This request allows us to send a request for Quote (payerfsp to payeefsp), for the calculation of possible fees and FSP commission involved in performing an interoperable financial transaction."
            },
            "description": "Send quote",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes",
            "method": "post",
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Content-Type": "{$inputs.contentTypeQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.fromFspId}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "FSPIOP-Destination": "{$inputs.toFspId}"
            },
            "body": {
              "quoteId": "{$function.generic.generateID}",
              "transactionId": "{$function.generic.generateID}",
              "transactionRequestId": "{$function.generic.generateID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.fromIdType}",
                  "partyIdentifier": "{$inputs.fromIdValue}",
                  "fspId": "{$inputs.fromFspId}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.fromFirstName}",
                    "lastName": "{$inputs.fromLastName}"
                  },
                  "dateOfBirth": "{$inputs.fromDOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$prev.3.callback.body.party.partyIdInfo.partyIdType}",
                  "partyIdentifier": "{$prev.3.callback.body.party.partyIdInfo.partyIdentifier}",
                  "fspId": "{$prev.3.callback.body.party.partyIdInfo.fspId}"
                }
              },
              "amountType": "RECEIVE",
              "amount": {
                "amount": "{$inputs.PAYER_SCHEME_RULE_EXCEEDED_AMOUMT}",
                "currency": "{$inputs.currency}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              },
              "note": "{$inputs.note}"
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain transferAmount",
                  "exec": [
                    "expect(callback.body).to.have.property('transferAmount')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback error code",
                  "exec": [
                    "expect(callback.response.body.errorInformation.errorCode).to.equal('200')"
                  ]
                },
                {
                    "id": 7,
                    "description": "Callback error description",
                    "exec": [
                      "expect(callback.response.body.errorInformation.errorDescription).to.equal('Payer Limit Exceeded')"
                    ]
                  }
              ]
            },
            "params": {
              "Type": "MSISDN",
              "ID": "{$inputs.toIdValue}"
            },
            "path": "/quotes",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          }
        ]
      }
    ]
  }