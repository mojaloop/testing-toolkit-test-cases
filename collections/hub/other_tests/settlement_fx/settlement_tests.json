{
  "options": {},
  "name": "collections_tests_fx_fx_tests",
  "test_cases": [
    {
      "id": "settle-fx-tests",
      "name": "Settlement FX Transfer tests",
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/settlement/settlement_tests.json",
        "labels": [
          "fx"
        ]
      },
      "meta": {
        "info": "FX Transfer"
      },
      "requests": [
        {
          "id": "Add-part-ALS",
          "description": "Add Participant to ALS",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_1.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_1.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_1.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_1.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_1.1/trigger_templates"
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/{$inputs.toIdType}/{$inputs.toIdValue}",
          "method": "post",
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "body": {
            "fspId": "{$inputs.payeefsp}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "FSPIOP-Source": "{$inputs.toFspId}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}",
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          }
        },
        {
          "id": "Get-party-info-Copy",
          "description": "Get party info Copy",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/MSISDN/{$inputs.toIdValue}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentType}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "Accept": "{$inputs.accept}"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-party",
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-partyIdInfo-partyIdType-par",
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              }
            ]
          }
        },
        {
          "id": "GET-services-FXP",
          "description": "GET /services/FXP",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "prefix": "/v2",
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/services/FXP",
          "path": "/services/FXP",
          "method": "get",
          "url": "{$inputs.HOST_FXP_SERVICES}",
          "disabled": false,
          "headers": {
            "Content-Type": "{$inputs.contentTypeServicesFxp}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "Accept": "{$inputs.acceptServicesFxp}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-providers",
                "description": "Callback body should contain providers",
                "exec": [
                  "expect(callback.body).to.have.property('providers')",
                  "expect(callback.body.providers.length).to.be.at.least(1)"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              }
            ]
          }
        },
        {
          "id": "POST-fxQuotes",
          "description": "POST /fxQuotes",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxQuotes",
          "path": "/fxQuotes",
          "method": "post",
          "body": {
            "conversionRequestId": "{$function.generic.generateID}",
            "conversionTerms": {
              "conversionId": "{$function.generic.generateID}",
              "initiatingFsp": "{$inputs.FX_PAYER_DFSP_ID}",
              "counterPartyFsp": "{$inputs.FX_TESTFXP1_ID}",
              "amountType": "SEND",
              "sourceAmount": {
                "currency": "{$inputs.FX_SOURCE_CURRENCY}",
                "amount": "{$inputs.FX_SOURCE_AMOUNT}"
              },
              "targetAmount": {
                "currency": "{$inputs.FX_TARGET_CURRENCY}"
              },
              "expiration": "{$inputs.FX_EXPIRATION}"
            }
          },
          "headers": {
            "Accept": "{$inputs.acceptFxQuotes}",
            "Content-Type": "{$inputs.contentTypeFxQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "FSPIOP-Destination": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-conversionTerms",
                "description": "Callback body should contain conversionTerms",
                "exec": [
                  "expect(callback.body).to.have.property('conversionTerms')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.conversionTerms.sourceAmount.currency).to.equal('{$request.body.conversionTerms.sourceAmount.currency}')",
                  "expect(callback.body.conversionTerms.targetAmount.currency).to.equal('{$request.body.conversionTerms.targetAmount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-fxQuotes",
                "description": "Callback content-type to be fxQuotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxQuotes+json')"
                ]
              },
              {
                "id": "cb-condition",
                "description": "Callback body should contain condition",
                "exec": [
                  "expect(callback.body).to.have.property('condition')"
                ]
              },
              {
                "id": "cb-target-amt",
                "description": "Callback body should contain target amount",
                "exec": [
                  "expect(callback.body.conversionTerms.targetAmount).to.have.property('amount')"
                ]
              }
            ]
          }
        },
        {
          "id": "POST-quotes",
          "description": "POST /quotes",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "FSPIOP-Destination": "{$inputs.FXP_PAYEE_DFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.Get-party-info-Copy.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.Get-party-info-Copy.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.Get-party-info-Copy.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.FX_TARGET_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "cb-content-type-quotes",
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          }
        },
        {
          "id": "Get-Accounts-FXP-BEFORE-fxTran",
          "description": "Get Accounts for FXP BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`FXP Source Currency Position Balance before FxTransfer=${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer}`);",
                "",
                "console.log(`FXP Target Currency Position Balance before FxTransfer=${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer}`);"
              ]
            }
          }
        },
        {
          "id": "POST-fxTransfers",
          "description": "POST /fxTransfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxTransfers",
          "path": "/fxTransfers",
          "method": "post",
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptFxTransfers}",
            "Content-Type": "{$inputs.contentTypeFxTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "body": {
            "commitRequestId": "{$prev.POST-fxQuotes.callback.body.conversionTerms.conversionId}",
            "determiningTransferId": "{$function.generic.generateID}",
            "initiatingFsp": "{$inputs.FX_PAYER_DFSP_ID}",
            "counterPartyFsp": "{$inputs.FX_TESTFXP1_ID}",
            "amountType": "SEND",
            "sourceAmount": {
              "currency": "{$inputs.FX_SOURCE_CURRENCY}",
              "amount": "{$inputs.FX_SOURCE_AMOUNT}"
            },
            "targetAmount": {
              "currency": "{$inputs.FX_TARGET_CURRENCY}",
              "amount": "{$inputs.FX_TARGET_AMOUNT}"
            },
            "condition": "{$prev.POST-fxQuotes.callback.body.condition}",
            "expiration": "{$requestVariables.expiration}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-conversionState-RESERVED",
                "description": "Callback conversionState to be RESERVED",
                "exec": [
                  "expect(callback.body.conversionState).to.equal('RESERVED')"
                ]
              },
              {
                "id": "cb-content-type-fxTransfers",
                "description": "Callback content-type to be fxTransfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxTransfers+json')"
                ]
              },
              {
                "id": "cb-fulfilment",
                "description": "Callback body should contain fulfilment",
                "exec": [
                  "expect(callback.body).to.have.property('fulfilment')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.POST-fxQuotes.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
              ]
            }
          }
        },
        {
          "id": "POST-trans",
          "description": "POST /transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "body": {
            "transferId": "{$prev.Get-Accounts-FXP-BEFORE-fxTran.request.body.determiningTransferId}",
            "payeeFsp": "{$inputs.FXP_PAYEE_DFSP_ID}",
            "payerFsp": "{$inputs.FX_PAYER_DFSP_ID}",
            "amount": {
              "currency": "{$inputs.FX_TARGET_CURRENCY}",
              "amount": "{$inputs.amount}"
            },
            "ilpPacket": "{$prev.POST-quotes.callback.body.ilpPacket}",
            "condition": "{$prev.POST-quotes.callback.body.condition}",
            "expiration": "{$requestVariables.expiration}"
          },
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-transfers",
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.POST-fxQuotes.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-FXP-AFTER-trans",
          "description": "Get Accounts for FXP AFTER Transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`FXP Source Currency Position Balance after Transfer=${environment.fxpSourceCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "console.log(`FXP Target Currency Position Balance after Transfer=${environment.fxpTargetCurrencyPositionBalanceAfterTransfer}`);"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "create-settle",
      "name": "Create Settlement on the current open window",
      "meta": {
        "info": "Get current open window and close it"
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-existent-window",
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200-400",
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": "New-window-State-OPEN",
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}"
              ]
            }
          }
        },
        {
          "id": "Create-settle-Closed-Window",
          "meta": {
            "info": "Create Settlement for Closed Window"
          },
          "description": "Create Settlement for Closed Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              },
              {
                "id": "Number-associated-windows-1",
                "description": "Number of associated windows should be 1",
                "exec": [
                  "expect(response.body.settlementWindows.length).to.equal(1)"
                ]
              },
              {
                "id": "Associated-settle-Window-ID-co",
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)"
                ]
              },
              {
                "id": "Associated-settle-Window-state",
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "DEFERREDNET{$inputs.currency}",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closedWindowID}"
              }
            ]
          },
          "delay": "3000",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementId = jsonData.id;",
                "environment.winstate = jsonData.state;",
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                "//environment.closedWindowID = 6;",
                "environment.closedWindowID = Number(environment.closedWindowID);",
                "",
                "/*requestVariables.closedWindowID = Number(environment.closedWindowID);",
                "*/"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/settlement/settlement_tests.json",
        "labels": [
          "fx"
        ]
      }
    },
    {
      "id": "prepare-settle",
      "name": "Prepare-settlement",
      "meta": {
        "info": "Prepare-settlement"
      },
      "requests": [
        {
          "id": "Prepare-settle",
          "meta": {
            "info": "Prepare Settlement"
          },
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/settlement/settlement_tests.json",
        "labels": [
          "fx"
        ]
      }
    },
    {
      "id": "reserve-settlement",
      "name": "reserve-settlement",
      "meta": {
        "info": "reserve-settlement"
      },
      "requests": [
        {
          "id": "reserve-settle",
          "meta": {
            "info": "reserve Settlement"
          },
          "description": "reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "check-state-participants-after",
          "meta": {
            "info": "check state for participants after prepare"
          },
          "description": "check state for participants after prepare",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-status-PS_TRANSFERS_RESE",
                "description": "Check status PS_TRANSFERS_RESERVED",
                "exec": [
                  "expect(response.body.state).to.eql(\"PS_TRANSFERS_RESERVED\");"
                ]
              },
              {
                "id": "Check-status-window-PENDING-se",
                "description": "Check status for window is PENDING SETTLEMENT",
                "exec": [
                  " expect(response.body.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");"
                ]
              },
              {
                "id": "acc-state-PS_TRANSFERS_RESERVE",
                "description": "Account state is PS_TRANSFERS_RESERVEDfor all accounts",
                "exec": [
                  "expect(environment.controlvar).to.equal(true)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "//Boolean isok = false;\r",
                "var res = response.body;\r",
                "var isok = true;\r",
                "\r",
                "try{\r",
                "res.participants.map(function (participant) {\r",
                "    participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).every(curAccount => {\r",
                "             if(isok === true){      \r",
                "         if(curAccount.state === \"PS_TRANSFERS_RESERVED\"){\r",
                "                          isok= true;\r",
                "                        \r",
                "                        \r",
                "                           \r",
                "                        }else{\r",
                "                           isok= false;\r",
                "                          // console.log(isok);\r",
                "                         \r",
                "                        }\r",
                "             } \r",
                "                    })\r",
                "})\r",
                "\r",
                "}catch(exception){\r",
                "  console.log(exception);\r",
                "}\r",
                "\r",
                "environment.controlvar = isok;"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/settlement/settlement_tests.json",
        "labels": [
          "fx"
        ]
      }
    },
    {
      "id": "commit-settlement",
      "name": "commit-settlement",
      "meta": {
        "info": "commit-settlement"
      },
      "requests": [
        {
          "id": "commit-settle",
          "meta": {
            "info": "commit Settlement"
          },
          "description": "commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/settlement/settlement_tests.json",
        "labels": [
          "fx"
        ]
      }
    },
    {
      "id": "settle-settlement",
      "name": "settle-settlement",
      "meta": {
        "info": "settle-settlement"
      },
      "requests": [
        {
          "id": "settle-settle",
          "meta": {
            "info": "settle Settlement"
          },
          "description": "settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "get",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-status-200",
                "description": "Response code status is 200",
                "exec": [
                  "//if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "//}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-FXP-AFTER-settle",
          "description": "Get Accounts for FXP AFTER Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceAfterSettlement= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceAfterSettlement= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`FXP Source Currency Position Balance after Settlement=${environment.fxpSourceCurrencyPositionBalanceAfterSettlement}`);",
                "",
                "console.log(`FXP Target Currency Position Balance after Settlement=${environment.fxpTargetCurrencyPositionBalanceAfterSettlement}`);"
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/settlement/settlement_tests.json",
        "labels": [
          "fx"
        ]
      }
    }
  ]
}