{
  "name": "multi",
  "test_cases": [
    {
      "id": "neg-scenario-abort",
      "name": "negative scenario - payee_abort",
      "meta": {
        "info": "negative scenario - payee_abort"
      },
      "fileInfo": {
        "path": "hub/other_tests/bulk_transfers/negative_scenarios.json"
      },
      "requests": [
        {
          "id": "Store-Payerfsp-pos-before-prep",
          "meta": {
            "info": "Store Payerfsp position before prepare"
          },
          "description": "Store Payerfsp position before prepare",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/testingtoolkitdfsp/positions",
          "method": "get",
          "params": {
            "name": "testingtoolkitdfsp"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "environment[\"payerfspPositionBeforePrepare\"] = response.body[0].value"
              ]
            }
          }
        },
        {
          "id": "Store-Payeefsp-pos-before-prep",
          "meta": {
            "info": "Store Payeefsp position before prepare"
          },
          "description": "Store Payeefsp position before prepare",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.NORESPONSE_NAME}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.NORESPONSE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "environment[\"payeefspPositionBeforePrepare\"] = response.body[0].value"
              ]
            }
          }
        },
        {
          "id": "Send-Prepare",
          "meta": {
            "info": "Send Prepare"
          },
          "description": "Send Prepare",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/bulkTransfers",
          "method": "post",
          "url": "{$inputs.HOST_BULK_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptBulkTransfers}",
            "Content-Type": "{$inputs.contentBulkTransfers}",
            "Date": "{$environment.headerDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-Destination": "{$inputs.NORESPONSE_NAME}"
          },
          "body": {
            "bulkTransferId": "{$environment.bulkTransferId}",
            "bulkQuoteId": "{$environment.bulkQuoteId}",
            "payeeFsp": "{$environment.NORESPONSE_NAME}",
            "payerFsp": "{$environment.fromFspId}",
            "individualTransfers": [
              {
                "transferId": "{$environment.transferId}",
                "transferAmount": {
                  "currency": "{$inputs.currency}",
                  "amount": "1"
                },
                "ilpPacket": "{$environment.validIlpPacket2}",
                "condition": "{$environment.validCondition2}",
                "extensionList": {
                  "extension": [
                    {
                      "key": "extKey1",
                      "value": "extValue1"
                    },
                    {
                      "key": "extKey2",
                      "value": "extValue2"
                    }
                  ]
                }
              },
              {
                "transferId": "{$environment.transferId2}",
                "transferAmount": {
                  "currency": "{$inputs.currency2}",
                  "amount": "2"
                },
                "ilpPacket": "{$environment.validIlpPacket2}",
                "condition": "{$environment.validCondition2}"
              }
            ],
            "expiration": "{$environment.expirationDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "var uuid = require('uuid');",
                "",
                "const delay = environment.EXPIRATION_DELAY_MS || 1000 * 3600 * 24",
                "const bulkTransferId = uuid.v4();",
                "const bulkQuoteId = uuid.v4();",
                "const transferId = uuid.v4();",
                "const transferId2 = uuid.v4();",
                "const now = new Date();",
                "const headerDate = now.toUTCString();",
                "const expirationDate = new Date(now.getTime() + delay).toISOString();",
                "const completedTimestamp = now.toISOString();",
                "pm.environment.set('bulkTransferId', bulkTransferId);",
                "pm.environment.set('bulkQuoteId', bulkQuoteId);",
                "pm.environment.set('transferId', transferId);",
                "pm.environment.set('transferId2', transferId2);",
                "pm.environment.set('headerDate', headerDate);",
                "pm.environment.set('expirationDate', expirationDate);",
                "pm.environment.set('completedTimestamp', completedTimestamp);",
                ""
              ]
            }
          }
        },
        {
          "id": "Store-Payerfsp-pos-after-Prepa",
          "meta": {
            "info": "Store Payerfsp position after Prepare"
          },
          "description": "Store Payerfsp position after Prepare",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "ignoreCallbacks": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = pm.response.body;",
                "pm.environment.set(\"payerfspPositionAfterPrepare\", jsonData[0].value)"
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Put-bulk-trans-error",
          "meta": {
            "info": "Put bulk transfer error"
          },
          "description": "Put bulk transfer error",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/bulkTransfers/{ID}/error",
          "path": "/bulkTransfers/{$environment.bulkTransferId}/error",
          "method": "put",
          "params": {
            "ID": "{$environment.bulkTransferId}"
          },
          "url": "{$inputs.HOST_BULK_ADAPTER}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/vnd.interoperability.bulkTransfers+json;version=1.0",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.NORESPONSE_NAME}",
            "FSPIOP-Destination": "{$inputs.fromFspId}"
          },
          "body": {
            "errorInformation": {
              "errorCode": "5100",
              "errorDescription": "An error occured"
            }
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "payerfsp-cb-payer-informed-pay",
                "description": "payerfsp callback - payer should be informed of payee abort",
                "exec": [
                  "expect(environment.payerCallbackNotification.body).to.have.property(\"errorInformation\")",
                  "expect(JSON.stringify(environment.payerCallbackNotification.body.errorInformation)).to.equal(JSON.stringify(request.body.errorInformation))"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "// Retrieve the payer fsp callback that is expected to be recieved after the payee fsp ",
                "// sends a fulfil request",
                "await inboundEvent.addListener('payer-callback', 'put', '/bulkTransfers/{$environment.bulkTransferId}/error')"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.payerCallbackNotification = await inboundEvent.getMessage('payer-callback')",
                "console.log(environment.payerCallbackNotification)",
                "console.log(request.body.errorInformation)",
                ""
              ]
            }
          }
        },
        {
          "id": "GET-Bulk-trans-PayerFSP",
          "meta": {
            "info": "GET Bulk Transfer - PayerFSP"
          },
          "description": "GET Bulk Transfer - PayerFSP",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/bulkTransfers/{ID}",
          "path": "/bulkTransfers/{$environment.bulkTransferId}",
          "method": "get",
          "params": {
            "ID": "{$environment.bulkTransferId}",
            "name": ""
          },
          "url": "{$inputs.HOST_BULK_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptBulkTransfers}",
            "Content-Type": "{$inputs.contentBulkTransfers}",
            "Date": "{$environment.headerDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-Destination": "{$inputs.HUB_NAME}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-202",
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "payerfsp-cb-date-hdr-set",
                "description": "payerfsp callback - date header should be set",
                "exec": [
                  "expect(callback.headers).to.have.property('date')"
                ]
              },
              {
                "id": "payerfsp-cb-src-inputs-HUB_NAM",
                "description": "payerfsp callback - fspiop-source should be {$inputs.HUB_NAME}",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')"
                ]
              },
              {
                "id": "payerfsp-cb-dest-testingtoolki",
                "description": "payerfsp callback - fspiop-destination should be testingtoolkitdfsp",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(environment.fromFspId)"
                ]
              },
              {
                "id": "payerfsp-cb-uri-expected",
                "description": "payerfsp callback - fspiop-uri should be as expected",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal(`/testingtoolkitdfsp/bulkTransfers/${environment.bulkTransferId}`)"
                ]
              },
              {
                "id": "payerfsp-cb-method-PUT",
                "description": "payerfsp callback - fspiop-http-method should be PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')"
                ]
              },
              {
                "id": "payerfsp-cb-bulkTransfer-REJEC",
                "description": "payerfsp callback - bulkTransfer should be REJECTED",
                "exec": [
                  "expect(callback.body).to.have.property(\"bulkTransferState\")",
                  "expect(callback.body.bulkTransferState).to.equal(\"REJECTED\")"
                ]
              }
            ]
          },
          "ignoreCallbacks": false,
          "scriptingEngine": "javascript",
          "delay": "1000",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Check-Payerfsp-pos-after-Abort",
          "meta": {
            "info": "Check Payerfsp position after Abort"
          },
          "description": "Check Payerfsp position after Abort",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}",
            "ID": ""
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Payerfsp-pos-after-Payer-ABORT",
                "description": "Payerfsp position after Payer ABORT should be same as position before prepare.",
                "exec": [
                  "expect(response.body[0].value).to.equal(+environment.payerfspPositionBeforePrepare)"
                ]
              }
            ]
          }
        },
        {
          "id": "Check-Payeefsp-pos-after-Abort",
          "meta": {
            "info": "Check Payeefsp position after Abort"
          },
          "description": "Check Payeefsp position after Abort",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.NORESPONSE_NAME}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.NORESPONSE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Payeefsp-pos-after-Payee-ABORT",
                "description": "Payeefsp position after Payee ABORT should be same as position before prepare.",
                "exec": [
                  "expect(response.body[0].value).to.equal(+environment.payeefspPositionBeforePrepare)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "neg-scenario-part",
      "name": "negative scenario - partial fulfil",
      "meta": {
        "info": "negative scenario - partial fulfil"
      },
      "fileInfo": {
        "path": "hub/other_tests/bulk_transfers/negative_scenarios.json"
      },
      "requests": [
        {
          "id": "Send-Prepare",
          "meta": {
            "info": "Send Prepare"
          },
          "description": "Send Prepare",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/bulkTransfers",
          "method": "post",
          "url": "{$inputs.HOST_BULK_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptBulkTransfers}",
            "Content-Type": "{$inputs.contentBulkTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "bulkTransferId": "{$function.generic.generateID}",
            "bulkQuoteId": "{$function.generic.generateID}",
            "payeeFsp": "{$environment.toFspId}",
            "payerFsp": "{$environment.fromFspId}",
            "individualTransfers": [
              {
                "transferId": "{$function.generic.generateID}",
                "transferAmount": {
                  "currency": "{$inputs.currency}",
                  "amount": "1"
                },
                "ilpPacket": "{$environment.validIlpPacket2}",
                "condition": "{$environment.validCondition2}",
                "extensionList": {
                  "extension": [
                    {
                      "key": "extKey1",
                      "value": "extValue1"
                    },
                    {
                      "key": "extKey2",
                      "value": "extValue2"
                    }
                  ]
                }
              },
              {
                "transferId": "{$function.generic.generateID}",
                "transferAmount": {
                  "currency": "AED",
                  "amount": "2"
                },
                "ilpPacket": "{$environment.validIlpPacket2}",
                "condition": "{$environment.validCondition2}"
              }
            ],
            "expiration": "{$environment.expirationDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-202",
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "payer-cb-date-hdr-set",
                "description": "payer callback date header should be set",
                "exec": [
                  "expect(callback.headers).to.have.property('date')"
                ]
              },
              {
                "id": "payer-cb-src-inputs-HUB_NAME",
                "description": "payer callback fspiop-source should be {$inputs.HUB_NAME}",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')"
                ]
              },
              {
                "id": "payer-cb-dest-testingtoolkitdf",
                "description": "payer callback fspiop-destination should be testingtoolkitdfsp",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(environment.fromFspId)"
                ]
              },
              {
                "id": "payer-cb-method-PUT",
                "description": "payer callback fspiop-http-method should be PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')"
                ]
              },
              {
                "id": "payer-cb-uri-expected",
                "description": "payer callback fspiop-uri should be as expected",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal(`/${environment.fromFspId}/bulkTransfers/${environment.bulkTransferId}`)"
                ]
              },
              {
                "id": "payer-cb-Bulk-trans-state-COMP",
                "description": "payer callback Bulk Transfer state should be COMPLETED on Payer side",
                "exec": [
                  "expect(callback.body.bulkTransferState).to.equal('COMPLETED')"
                ]
              },
              {
                "id": "payer-cb-Completed-timestamp-s",
                "description": "payer callback Completed timestamp should be set",
                "exec": [
                  "expect(callback.body).to.have.property('completedTimestamp')"
                ]
              },
              {
                "id": "payer-cb-All-individual-trans-",
                "description": "payer callback All individual transfer results (failed & successful) should be returned",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "payer-cb-One-individual-trans-",
                "description": "payer callback One individual transfer result should contain successful transfer fulfilment",
                "exec": [
                  "const successTransfer = callback.body.individualTransferResults.find(t => t.transferId === environment.transferId)",
                  "expect(successTransfer).to.have.property('transferId')",
                  "expect(successTransfer).to.have.property('fulfilment')"
                ]
              },
              {
                "id": "payer-cb-One-individual-trans-",
                "description": "payer callback One individual transfer result should contain errorInformation",
                "exec": [
                  "const failedTransfer = callback.body.individualTransferResults.find(t => t.transferId === environment.transferId2)",
                  "expect(failedTransfer.errorInformation.errorCode).to.equal('3100')",
                  "expect(failedTransfer.errorInformation.errorDescription).to.equal('Generic validation error - Participant testingtoolkitdfsp AED account not found')"
                ]
              },
              {
                "id": "payee-cb-date-hdr-set",
                "description": "payee callback - date header should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers).to.have.property('date')"
                ]
              },
              {
                "id": "payee-cb-src-switch-s-name",
                "description": "payee callback - fspiop-source should be switch's name",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')"
                ]
              },
              {
                "id": "payee-cb-dest-payeefsp",
                "description": "payee callback - fspiop-destination should be payeefsp",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-destination']).to.equal(environment.toFspId)"
                ]
              },
              {
                "id": "payee-cb-uri-expected",
                "description": "payee callback - fspiop-uri should be as expected",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-uri']).to.equal(`/${environment.toFspId}/bulkTransfers/${environment.bulkTransferId}`)"
                ]
              },
              {
                "id": "payee-cb-method-PUT",
                "description": "payee callback - fspiop-http-method should be PUT",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-http-method']).to.equal('PUT')"
                ]
              },
              {
                "id": "payee-cb-Bulk-trans-state-COMP",
                "description": "payee callback - Bulk Transfer state should be COMPLETED on Payee side",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.bulkTransferState).to.equal('COMPLETED')"
                ]
              },
              {
                "id": "payee-cb-Completed-timestamp-s",
                "description": "payee callback - Completed timestamp should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data).to.have.property('completedTimestamp')"
                ]
              },
              {
                "id": "payee-cb-Only-one-1-individual",
                "description": "payee callback - Only one (1) individual transfer result (fulfilments) should be returned",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.individualTransferResults.length).to.equal(1)"
                ]
              },
              {
                "id": "payee-cb-Individual-trans-resu",
                "description": "payee callback - Individual transfer result should have transferId",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.individualTransferResults[0]).to.have.property('transferId')"
                ]
              },
              {
                "id": "payee-cb-Individual-trans-resu",
                "description": "payee callback Individual transfer result should have fulfilment",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.individualTransferResults[0]).to.have.property('fulfilment')"
                ]
              },
              {
                "id": "req-payee-date-hdr-set",
                "description": "request to payee - date header should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.headers).to.have.property('date')"
                ]
              },
              {
                "id": "req-payee-src-switch-s-name",
                "description": "request to payee - fspiop-source should be switch's name",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')"
                ]
              },
              {
                "id": "req-payee-dest-payeefsp",
                "description": "request to payee - fspiop-destination should be payeefsp",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.headers['fspiop-destination']).to.equal(environment.toFspId)"
                ]
              },
              {
                "id": "req-payee-uri-expected",
                "description": "request to payee - fspiop-uri should be as expected",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.headers['fspiop-uri']).to.equal('/bulkTransfers')"
                ]
              },
              {
                "id": "req-payee-method-POST",
                "description": "request to payee - fspiop-http-method should be POST",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.headers['fspiop-http-method']).to.equal('POST')"
                ]
              },
              {
                "id": "req-payee-Bulk-trans-Id-set",
                "description": "request to payee - Bulk transfer Id should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.bulkTransferId).to.equal(environment.bulkTransferId)"
                ]
              },
              {
                "id": "req-payee-Bulk-quote-Id-set",
                "description": "request to payee - Bulk quote Id should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.bulkQuoteId).to.equal(environment.bulkQuoteId)"
                ]
              },
              {
                "id": "req-payee-PayerFsp-testingtool",
                "description": "request to payee - PayerFsp should be testingtoolkitdfsp",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.payerFsp).to.equal(environment.fromFspId)"
                ]
              },
              {
                "id": "req-payee-PayeeFsp-payeefsp",
                "description": "request to payee - PayeeFsp should be payeefsp",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.payeeFsp).to.equal(environment.toFspId)"
                ]
              },
              {
                "id": "req-payee-expiration-set",
                "description": "request to payee - expiration should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data).to.have.property('expiration')"
                ]
              },
              {
                "id": "req-payee-Individual-transfers",
                "description": "request to payee - Individual transfers (prepare) should be one (1)",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.individualTransfers.length).to.equal(1)"
                ]
              },
              {
                "id": "req-payee-Individual-trans-hav",
                "description": "request to payee - Individual transfer should have transferId",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.individualTransfers[0]).to.have.property('transferId')"
                ]
              },
              {
                "id": "req-payee-Individual-trans-hav",
                "description": "request to payee - Individual transfer should have ilpPacket",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.individualTransfers[0]).to.have.property('ilpPacket')"
                ]
              },
              {
                "id": "req-payee-Individual-trans-hav",
                "description": "request to payee - Individual transfer should have condition",
                "exec": [
                  "expect(environment.bulkTransfersNegativeRequest.data.individualTransfers[0]).to.have.property('condition')"
                ]
              }
            ]
          },
          "ignoreCallbacks": false,
          "params": {
            "name": "testingtoolkitdfsp"
          },
          "path": "/bulkTransfers",
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "const delay = environment.EXPIRATION_DELAY_MS || 1000 * 3600 * 24",
                "const now = new Date()",
                "const expirationDate = new Date(now.getTime() + delay).toISOString();",
                "const completedTimestamp = now.toISOString();",
                "",
                "environment[\"bulkTransferId\"] = request.body.bulkTransferId",
                "environment[\"bulkQuoteId\"] = request.body.bulkQuoteId",
                "environment[\"transferId\"] = request.body.individualTransfers[0].transferId",
                "environment[\"transferId2\"] = request.body.individualTransfers[1].transferId",
                "environment[\"expirationDate\"] = expirationDate",
                "environment[\"completedTimestamp\"] = completedTimestamp",
                "",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.bulkTransferId}', 'payeeRequest')",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$request.body.bulkTransferId}', 'payeeCallback')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.bulkTransfersNegativeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "  environment.bulkTransfersNegativeCallback = await websocket.getMessage('payeeCallback', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": "GET-Bulk-trans-PayeeFSP",
          "meta": {
            "info": "GET Bulk Transfer - PayeeFSP"
          },
          "description": "GET Bulk Transfer - PayeeFSP",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/bulkTransfers/{ID}",
          "path": "/bulkTransfers/{$environment.bulkTransferId}",
          "method": "get",
          "params": {
            "ID": "{$environment.bulkTransferId}",
            "name": ""
          },
          "url": "{$inputs.HOST_BULK_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptBulkTransfers}",
            "Content-Type": "{$inputs.contentBulkTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.toFspId}",
            "FSPIOP-Destination": "{$inputs.HUB_NAME}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-202",
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-date-hdr-set",
                "description": "Callback - date header should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers).to.have.property('date')"
                ]
              },
              {
                "id": "cb-src-switch-s-name",
                "description": "Callback - fspiop-source should be switch's name",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')"
                ]
              },
              {
                "id": "cb-dest-payeefsp",
                "description": "Callback - fspiop-destination should be payeefsp",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-destination']).to.equal(environment.toFspId)"
                ]
              },
              {
                "id": "cb-uri-expected",
                "description": "Callback - fspiop-uri should be as expected",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-uri']).to.equal(`/${environment.toFspId}/bulkTransfers/${environment.bulkTransferId}`)"
                ]
              },
              {
                "id": "cb-method-PUT",
                "description": "Callback - fspiop-http-method should be PUT",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.headers['fspiop-http-method']).to.equal('PUT')"
                ]
              },
              {
                "id": "cb-Bulk-trans-state-COMPLETED-",
                "description": "Callback - Bulk Transfer state should be COMPLETED on Payee side",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.bulkTransferState).to.equal('COMPLETED')"
                ]
              },
              {
                "id": "cb-Completed-timestamp-set",
                "description": "Callback - Completed timestamp should be set",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data).to.have.property('completedTimestamp')"
                ]
              },
              {
                "id": "cb-Only-one-1-individual-trans",
                "description": "Callback - Only one (1) individual transfer result (fulfilments) should be returned",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.individualTransferResults.length).to.equal(1)"
                ]
              },
              {
                "id": "cb-Individual-trans-result-hav",
                "description": "Callback - Individual transfer result should have transferId",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.individualTransferResults[0]).to.have.property('transferId')"
                ]
              },
              {
                "id": "cb-Individual-trans-result-hav",
                "description": "Callback - Individual transfer result should have fulfilment",
                "exec": [
                  "expect(environment.bulkTransfersNegativeCallback.data.individualTransferResults[0]).to.have.property('fulfilment')"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.bulkTransfersNegativeCallback = await websocket.getMessage('payeeCallback', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            },
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/callbacks/' + environment.bulkTransferId, 'payeeCallback')",
                "}"
              ]
            }
          }
        },
        {
          "id": "GET-Bulk-trans-PayerFSP",
          "meta": {
            "info": "GET Bulk Transfer - PayerFSP"
          },
          "description": "GET Bulk Transfer - PayerFSP",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/bulkTransfers/{ID}",
          "path": "/bulkTransfers/{$environment.bulkTransferId}",
          "method": "get",
          "params": {
            "ID": "{$environment.bulkTransferId}",
            "name": ""
          },
          "url": "{$inputs.HOST_BULK_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptBulkTransfers}",
            "Content-Type": "{$inputs.contentBulkTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "FSPIOP-Destination": "{$inputs.HUB_NAME}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-202",
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-date-hdr-set",
                "description": "Callback - date header should be set",
                "exec": [
                  "expect(callback.headers).to.have.property('date')"
                ]
              },
              {
                "id": "cb-src-switch-s-name",
                "description": "Callback - fspiop-source should be switch's name",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.HUB_NAME}')"
                ]
              },
              {
                "id": "cb-dest-testingtoolkitdfsp",
                "description": "Callback - fspiop-destination should be testingtoolkitdfsp",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(environment.fromFspId)"
                ]
              },
              {
                "id": "cb-uri-expected",
                "description": "Callback - fspiop-uri should be as expected",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal(`/${environment.fromFspId}/bulkTransfers/${environment.bulkTransferId}`)"
                ]
              },
              {
                "id": "cb-method-PUT",
                "description": "Callback - fspiop-http-method should be PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT')"
                ]
              },
              {
                "id": "cb-Bulk-trans-state-COMPLETED-",
                "description": "Callback - Bulk Transfer state should be COMPLETED on Payer side",
                "exec": [
                  "expect(callback.body.bulkTransferState).to.equal('COMPLETED')"
                ]
              },
              {
                "id": "cb-Completed-timestamp-set",
                "description": "Callback - Completed timestamp should be set",
                "exec": [
                  "expect(callback.body).to.have.property('completedTimestamp')"
                ]
              },
              {
                "id": "cb-All-individual-trans-result",
                "description": "Callback - All individual transfer results (fulfilments) should be returned",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "cb-1st-individual-trans-have-f",
                "description": "Callback - 1st individual transfer should have fulfilment",
                "exec": [
                  "const transfer1 = callback.body.individualTransferResults.find(t => t.transferId === environment.transferId);",
                  "expect(transfer1).to.have.property('fulfilment')"
                ]
              },
              {
                "id": "cb-2nd-individual-trans-not-ha",
                "description": "Callback - 2nd individual transfer should not have fulfilment",
                "exec": [
                  "const transfer2 = callback.body.individualTransferResults.find(t => t.transferId === environment.transferId2);",
                  "expect(transfer2).to.not.have.property('fulfilment')"
                ]
              },
              {
                "id": "cb-2nd-individual-trans-valid-",
                "description": "Callback - 2nd individual transfer should contain valid error information",
                "exec": [
                  "const transfer2 = callback.body.individualTransferResults.find(t => t.transferId === environment.transferId2);",
                  "expect(transfer2.errorInformation.errorCode).to.eql(\"3100\");",
                  "expect(transfer2.errorInformation.errorDescription).to.eql(\"Generic validation error - Participant testingtoolkitdfsp AED account not found\");"
                ]
              }
            ]
          },
          "ignoreCallbacks": false,
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ]
    }
  ]
}