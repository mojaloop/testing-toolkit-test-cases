{
  "name": "multi",
  "test_cases": [
    {
      "id": "store-settle-bef",
      "name": "Store settlement and position balances before-transfers",
      "meta": {
        "info": "Store settlement and position balances before-transfers"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "get-balances-testfsp1",
          "meta": {
            "info": "get balances for testfsp1"
          },
          "description": "get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp1SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp1PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "get-balances-testfsp2",
          "meta": {
            "info": "get balances for testfsp2"
          },
          "description": "get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp2SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp2PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "get-balances-testfsp3",
          "meta": {
            "info": "get balances for testfsp3"
          },
          "description": "get balances for testfsp3",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp3SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp3PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "get-balances-testfsp4",
          "meta": {
            "info": "get balances for testfsp4"
          },
          "description": "get balances for testfsp4",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp4PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp4SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp4PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "get-balances-payerfsp",
          "meta": {
            "info": "get balances for payerfsp"
          },
          "description": "get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.payerfspSettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.payerfspPositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.payerfspSettleAccountBalanceBeforeTransfer);",
                "console.log(environment.payerfspPositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "get-balances-payeefsp",
          "meta": {
            "info": "get balances for payeefsp"
          },
          "description": "get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.payeefsp}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.payeefsp}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.payeefspSettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.payeefspPositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.payeefspSettleAccountBalanceBeforeTransfer);",
                "console.log(environment.payeefspPositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "Get-Hub-balances",
          "meta": {
            "info": "Get Hub balances"
          },
          "description": "Get Hub balances",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.HUB_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.HUB_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;\r",
                "jsonData\r",
                "    .filter(account => account.currency === environment.cgscurrency)\r",
                "    .forEach(curAccount => {\r",
                "        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {\r",
                "            environment.hubReconciliationAccountBalanceBeforeTransfer=curAccount.value;\r",
                "        }\r",
                "        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {\r",
                "            environment.hubMultilateralAccountBalanceBeforeTransfer=curAccount.value;\r",
                "        }\r",
                "    })\r",
                "\r",
                "\r",
                "console.log(environment.hubReconciliationAccountBalanceBeforeTransfer);\r",
                "console.log(environment.hubMultilateralAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "close-window-bef",
      "name": "Close window before tranfers",
      "meta": {
        "info": "Close window before tranfers"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-existent-window",
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200-400",
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": "New-window-State-OPEN",
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "deposit-funds-in",
      "name": "Deposit Funds into Settlement Account (Funds-In)",
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "testfsp1-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": ""
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp1SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceBefore= curAccount.value",
                "  environment.testfsp1PositionAccountId = curAccount.id",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp1InterchFeeAccountId = curAccount.id",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp1SettlementBalanceBefore);",
                "console.log(environment.testfsp1PositionBalanceBefore);",
                "console.log(environment.testfsp1InterchFeeBalanceBefore);",
                "console.log(environment.testfsp1SettlementAccountId);",
                "console.log(environment.testfsp1PositionAccountId);",
                "console.log(environment.testfsp1InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": "testfsp2-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp2/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp2/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp2SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBalanceBefore= curAccount.value",
                "  environment.testfsp2PositionAccountId = curAccount.id",
                "        }",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp2InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp2InterchFeeAccountId = curAccount.id",
                "        }",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp2SettlementBalanceBefore);",
                "console.log(environment.testfsp2PositionBalanceBefore);",
                "console.log(environment.testfsp2InterchFeeBalanceBefore);",
                "console.log(environment.testfsp2SettlementAccountId);",
                "console.log(environment.testfsp2PositionAccountId);",
                "console.log(environment.testfsp2InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": "testfsp3-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp3/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp3SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionBalanceBefore= curAccount.value",
                "  environment.testfsp3PositionAccountId = curAccount.id",
                "        }",
                "",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp3InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp3InterchFeeAccountId = curAccount.id",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp3SettlementBalanceBefore);",
                "console.log(environment.testfsp3PositionBalanceBefore);",
                "console.log(environment.testfsp3InterchFeeBalanceBefore);",
                "console.log(environment.testfsp3SettlementAccountId);",
                "console.log(environment.testfsp3PositionAccountId);",
                "console.log(environment.testfsp3InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": "testfsp4-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp4/accounts (settlement, position, interchange) BEFORE Funds-In transfer"
          },
          "description": "testfsp4/accounts (settlement, position, interchange) BEFORE Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettlementBalanceBefore= curAccount.value",
                "  environment.testfsp4SettlementAccountId = curAccount.id",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp4PositionBalanceBefore= curAccount.value",
                "  environment.testfsp4PositionAccountId = curAccount.id",
                "        }     ",
                " if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp4InterchFeeBalanceBefore= curAccount.value",
                "  environment.testfsp4InterchFeeAccountId = curAccount.id",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp4SettlementBalanceBefore);",
                "console.log(environment.testfsp4PositionBalanceBefore);",
                "console.log(environment.testfsp4InterchFeeBalanceBefore);",
                "console.log(environment.testfsp4SettlementAccountId);",
                "console.log(environment.testfsp4PositionAccountId);",
                "console.log(environment.testfsp4InterchFeeAccountId);"
              ]
            }
          }
        },
        {
          "id": "Deposit-Funds-settle-acc-testf",
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts/{$environment.testfsp1SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": "{$environment.testfsp1SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "status-202",
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1);",
                ""
              ]
            }
          }
        },
        {
          "id": "Deposit-Funds-settle-acc-testf-1",
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts/{$environment.testfsp2SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM2_NAME}",
            "id": "{$environment.testfsp2SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "status-202",
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2);",
                ""
              ]
            }
          }
        },
        {
          "id": "Deposit-Funds-settle-acc-testf-2",
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp3",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts/{$environment.testfsp3SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM3_NAME}",
            "id": "{$environment.testfsp3SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "status-202",
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3);",
                ""
              ]
            }
          }
        },
        {
          "id": "Deposit-Funds-settle-acc-testf-3",
          "meta": {
            "info": "Deposit Funds in Settlement Account - payerfsp"
          },
          "description": "Deposit Funds in Settlement Account - testfsp4",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts/{id}",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts/{$environment.testfsp4SettlementAccountId}",
          "method": "post",
          "params": {
            "name": "{$inputs.SIM4_NAME}",
            "id": "{$environment.testfsp4SettlementAccountId}"
          },
          "body": {
            "transferId": "{$function.generic.generateID}",
            "externalReference": "string",
            "action": "recordFundsIn",
            "reason": "string",
            "amount": {
              "amount": "{$requestVariables.payerfspfundsInPrepareAmount}",
              "currency": "{$inputs.cgscurrency}"
            }
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "status-202",
                "description": "status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4 = environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4 || 2000;",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4);"
              ]
            }
          }
        },
        {
          "id": "testfsp1-accounts-settle-pos-i-1",
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp1SettlementBalanceAfterExpected).to.eql(environment.testfsp1SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp1PositionBalanceBefore).to.eql(environment.testfsp1PositionBalanceAfter);"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp1InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp1InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP1);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp1SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp1PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp1InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp1SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp1PositionBalanceAfter);",
                "  console.log(environment.testfsp1InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "  ",
                "  environment.testfsp1SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp1SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp1SettlementBalanceAfterExpected=${environment.testfsp1SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp1SettlementBalanceAfterActual=${environment.testfsp1SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp1SettlementBalanceAfterActual === environment.testfsp1SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp1 settlement balance before transfers',environment.testfsp1SettlementBalanceBefore);",
                "  console.log('extracted testfsp1 settlement balance after first transfer ACTUAL',environment.testfsp1SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp1 settlement balance before transfers '+environment.testfsp1SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp1SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp1PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp1PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp1InterchFeeBalanceAfter=${environment.testfsp1InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp1PositionBalanceBefore (${environment.testfsp1PositionBalanceBefore}) == environment.testfsp1PositionBalanceAfter (${environment.testfsp1PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp1SettlementBalanceAfterExpected (${environment.testfsp1SettlementBalanceAfterExpected}) == environment.testfsp1SettlementBalanceAfterActual (${environment.testfsp1SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp1InterchFeeBalanceBefore (${environment.testfsp1InterchFeeBalanceBefore}) == environment.testfsp1InterchFeeBalanceAfter (${environment.testfsp1InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp1PositionBalanceBefore == environment.testfsp1PositionBalanceAfter) &&",
                "  (environment.testfsp1SettlementBalanceAfterExpected == environment.testfsp1SettlementBalanceAfterActual) &&",
                "  (environment.testfsp1InterchFeeBalanceBefore == environment.testfsp1InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM1_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceBefore",
                "requestVariables.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceAfter",
                "environment.testfsp1SettlementBalanceBefore = environment.testfsp1SettlementBalanceAfter",
                "environment.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp1PositionBalanceBefore=${environment.testfsp1PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1SettlementBalanceBefore=${environment.testfsp1SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp2-accounts-settle-pos-i-1",
          "description": "testfsp2/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "meta": {
            "info": "testfsp2/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp2SettlementBalanceAfterExpected).to.eql(environment.testfsp2SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp2PositionBalanceBefore).to.eql(environment.testfsp2PositionBalanceAfter);"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp2InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp2InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP2);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp2SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp2PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp2InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp2SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp2PositionBalanceAfter);",
                "  console.log(environment.testfsp2InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`testfsp2SettlementBalanceBefore=${environment.testfsp2SettlementBalanceBefore}`)",
                "  ",
                "  environment.testfsp2SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp2SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp2SettlementBalanceAfterExpected=${environment.testfsp2SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp2SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp2SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp2SettlementBalanceAfterActual=${environment.testfsp2SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp2SettlementBalanceAfterActual === environment.testfsp2SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp2 settlement balance before transfers',environment.testfsp2SettlementBalanceBefore);",
                "  console.log('extracted testfsp2 settlement balance after first transfer ACTUAL',environment.testfsp2SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp2 settlement balance before transfers '+environment.testfsp2SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp2SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp2PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp2PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp2InterchFeeBalanceAfter=${environment.testfsp2InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp2InterchFeeBalanceBefore=${environment.testfsp2InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp2PositionBalanceBefore (${environment.testfsp2PositionBalanceBefore}) == environment.testfsp2PositionBalanceAfter (${environment.testfsp2PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp2SettlementBalanceAfterExpected (${environment.testfsp2SettlementBalanceAfterExpected}) == environment.testfsp2SettlementBalanceAfterActual (${environment.testfsp2SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp2InterchFeeBalanceBefore (${environment.testfsp2InterchFeeBalanceBefore}) == environment.testfsp2InterchFeeBalanceAfter (${environment.testfsp2InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp2PositionBalanceBefore == environment.testfsp2PositionBalanceAfter) &&",
                "  (environment.testfsp2SettlementBalanceAfterExpected == environment.testfsp2SettlementBalanceAfterActual) &&",
                "  (environment.testfsp2InterchFeeBalanceBefore == environment.testfsp2InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM2_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp2PositionBalanceBefore = environment.testfsp2PositionBalanceBefore",
                "requestVariables.testfsp2InterchFeeBalanceBefore = environment.testfsp2InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp2PositionBalanceBefore = environment.testfsp2PositionBalanceAfter",
                "environment.testfsp2SettlementBalanceBefore = environment.testfsp2SettlementBalanceAfter",
                "environment.testfsp2InterchFeeBalanceBefore = environment.testfsp2InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp2PositionBalanceBefore=${environment.testfsp2PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp2SettlementBalanceBefore=${environment.testfsp2SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp2InterchFeeBalanceBefore=${environment.testfsp2InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp3-accounts-settle-pos-i-1",
          "description": "testfsp3/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp3SettlementBalanceAfterExpected).to.eql(environment.testfsp3SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp3PositionBalanceBefore).to.eql(environment.testfsp3PositionBalanceAfter);"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp3InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp3InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP3);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp3SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp3PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp3InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp3SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp3PositionBalanceAfter);",
                "  console.log(environment.testfsp3InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`testfsp3SettlementBalanceBefore=${environment.testfsp3SettlementBalanceBefore}`)",
                "  ",
                "  environment.testfsp3SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp3SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp3SettlementBalanceAfterExpected=${environment.testfsp3SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp3SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp3SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp3SettlementBalanceAfterActual=${environment.testfsp3SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp3SettlementBalanceAfterActual === environment.testfsp3SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp3 settlement balance before transfers',environment.testfsp3SettlementBalanceBefore);",
                "  console.log('extracted testfsp3 settlement balance after first transfer ACTUAL',environment.testfsp3SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp3 settlement balance before transfers '+environment.testfsp3SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp3SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp3PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp3PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp3InterchFeeBalanceAfter=${environment.testfsp3InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp3InterchFeeBalanceBefore=${environment.testfsp3InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp3PositionBalanceBefore (${environment.testfsp3PositionBalanceBefore}) == environment.testfsp3PositionBalanceAfter (${environment.testfsp3PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp3SettlementBalanceAfterExpected (${environment.testfsp3SettlementBalanceAfterExpected}) == environment.testfsp3SettlementBalanceAfterActual (${environment.testfsp3SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp3InterchFeeBalanceBefore (${environment.testfsp3InterchFeeBalanceBefore}) == environment.testfsp3InterchFeeBalanceAfter (${environment.testfsp3InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp3PositionBalanceBefore == environment.testfsp3PositionBalanceAfter) &&",
                "  (environment.testfsp3SettlementBalanceAfterExpected == environment.testfsp3SettlementBalanceAfterActual) &&",
                "  (environment.testfsp3InterchFeeBalanceBefore == environment.testfsp3InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM3_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp3PositionBalanceBefore = environment.testfsp3PositionBalanceBefore",
                "requestVariables.testfsp3InterchFeeBalanceBefore = environment.testfsp3InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp3PositionBalanceBefore = environment.testfsp3PositionBalanceAfter",
                "environment.testfsp3SettlementBalanceBefore = environment.testfsp3SettlementBalanceAfter",
                "environment.testfsp3InterchFeeBalanceBefore = environment.testfsp3InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp3PositionBalanceBefore=${environment.testfsp3PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp3SettlementBalanceBefore=${environment.testfsp3SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp3InterchFeeBalanceBefore=${environment.testfsp3InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp4-accounts-settle-pos-i-1",
          "description": "testfsp4/accounts (settlement, position, interchange) AFTER Funds-In transfer",
          "meta": {
            "info": "testfsp4/accounts (settlement, position, interchange) AFTER Funds-In transfer"
          },
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp4SettlementBalanceAfterExpected).to.eql(environment.testfsp4SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp4PositionBalanceBefore).to.eql(environment.testfsp4PositionBalanceAfter);"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(requestVariables.testfsp4InterchFeeBalanceBefore)).to.eql(Number(environment.testfsp4InterchFeeBalanceAfter));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "requestVariables.payerfspfundsInPrepareAmount = Number(environment.SETTLEMENT_CGS_FUNDSIN_TESTFSP4);",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp4SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp4PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp4InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp4SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp4PositionBalanceAfter);",
                "  console.log(environment.testfsp4InterchFeeBalanceAfter);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.54.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = requestVariables.payerfspfundsInPrepareAmount;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`testfsp4SettlementBalanceBefore=${environment.testfsp4SettlementBalanceBefore}`)",
                "  ",
                "  environment.testfsp4SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp4SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp4SettlementBalanceAfterExpected=${environment.testfsp4SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp4SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp4SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp4SettlementBalanceAfterActual=${environment.testfsp4SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp4SettlementBalanceAfterActual === environment.testfsp4SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp4 settlement balance before transfers',environment.testfsp4SettlementBalanceBefore);",
                "  console.log('extracted testfsp4 settlement balance after first transfer ACTUAL',environment.testfsp4SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp4 settlement balance before transfers '+environment.testfsp4SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp4SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp4PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp4PositionBalanceAfter);",
                "",
                "  console.log(`environment.testfsp4InterchFeeBalanceAfter=${environment.testfsp4InterchFeeBalanceAfter}`)",
                "  console.log(`environment.testfsp4InterchFeeBalanceBefore=${environment.testfsp4InterchFeeBalanceBefore}`)",
                "",
                "  console.log(`environment.testfsp4PositionBalanceBefore (${environment.testfsp4PositionBalanceBefore}) == environment.testfsp4PositionBalanceAfter (${environment.testfsp4PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp4SettlementBalanceAfterExpected (${environment.testfsp4SettlementBalanceAfterExpected}) == environment.testfsp4SettlementBalanceAfterActual (${environment.testfsp4SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp4InterchFeeBalanceBefore (${environment.testfsp4InterchFeeBalanceBefore}) == environment.testfsp4InterchFeeBalanceAfter (${environment.testfsp4InterchFeeBalanceAfter})`)",
                "",
                "  if ((environment.testfsp4PositionBalanceBefore == environment.testfsp4PositionBalanceAfter) &&",
                "  (environment.testfsp4SettlementBalanceAfterExpected == environment.testfsp4SettlementBalanceAfterActual) &&",
                "  (environment.testfsp4InterchFeeBalanceBefore == environment.testfsp4InterchFeeBalanceAfter)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM4_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp4PositionBalanceBefore = environment.testfsp4PositionBalanceBefore",
                "requestVariables.testfsp4InterchFeeBalanceBefore = environment.testfsp4InterchFeeBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp4PositionBalanceBefore = environment.testfsp4PositionBalanceAfter",
                "environment.testfsp4SettlementBalanceBefore = environment.testfsp4SettlementBalanceAfter",
                "environment.testfsp4InterchFeeBalanceBefore = environment.testfsp4InterchFeeBalanceAfter",
                "",
                "console.log(`RESET - environment.testfsp4PositionBalanceBefore=${environment.testfsp4PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp4SettlementBalanceBefore=${environment.testfsp4SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp4InterchFeeBalanceBefore=${environment.testfsp4InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "-new-sims---transfer",
      "name": "[new sims]  transfers, positions CGS Window1 tests (OTC-649, OTC-645)",
      "meta": {
        "info": "[new sims]  transfers, positions CGS Window1 tests (OTC-649, OTC-645)"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "testfsp1-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) BEFORE transfers. (DISABLED BY DEFAULT. This is useful for debugging issues)"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) BEFORE transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}",
            "id": ""
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceBefore= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceBefore= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp1SettlementBalanceBefore);",
                "console.log(environment.testfsp1PositionBalanceBefore);",
                "console.log(environment.testfsp1InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": "testfsp2-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp2/accounts (settlement, position, interchange) BEFORE transfers. (DISABLED BY DEFAULT. This is useful for debugging issues)"
          },
          "description": "testfsp2/accounts (settlement, position, interchange) BEFORE transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBalanceBefore= curAccount.value",
                "        }    ",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp2InterchFeeBalanceBefore= curAccount.value",
                "        }     ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp2SettlementBalanceBefore);",
                "console.log(environment.testfsp2PositionBalanceBefore);",
                "console.log(environment.testfsp2InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": "testfsp3-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) BEFORE transfers. (DISABLED BY DEFAULT. This is useful for debugging issues)"
          },
          "description": "testfsp3/accounts (settlement, position, interchange) BEFORE transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionBalanceBefore= curAccount.value",
                "        }",
                "",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp3InterchFeeBalanceBefore= curAccount.value",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp3SettlementBalanceBefore);",
                "console.log(environment.testfsp3PositionBalanceBefore);",
                "console.log(environment.testfsp3InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": "testfsp4-accounts-settle-pos-i",
          "meta": {
            "info": "testfsp4/accounts (settlement, position, interchange) BEFORE transfers. (DISABLED BY DEFAULT. This is useful for debugging issues)"
          },
          "description": "testfsp4/accounts (settlement, position, interchange) BEFORE transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp4PositionBalanceBefore= curAccount.value",
                "        }     ",
                " if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp4InterchFeeBalanceBefore= curAccount.value",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp4SettlementBalanceBefore);",
                "console.log(environment.testfsp4PositionBalanceBefore);",
                "console.log(environment.testfsp4InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp1-Tx1",
          "meta": {
            "info": "POST /scenarios testfsp3 -> testfsp1 - Tx1"
          },
          "description": "POST /scenarios testfsp3 -> testfsp1 - Tx1",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_1}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\"",
                "",
                "environment.SETTLEMENT_CGS_TX_AMOUNT_1 = environment.SETTLEMENT_CGS_TX_AMOUNT_1 || 15",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "/*",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payeeRequest)",
                "  requestVariables.payerCallback = await websocket.getMessage('payerCallback', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payerCallback)",
                "  ",
                "  requestVariables.scenario1TransferId = response.body.scenario1.result.transferId",
                "  ",
                "  let url = `${environment.PAYEEFSP_SDK_TESTAPI_URL}/requests/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payeeSideTransferRequest = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "  ",
                "  url = `${environment.PAYERFSP_SDK_TESTAPI_URL}/callbacks/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payerSideTransferCallback = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "}*/"
              ]
            }
          }
        },
        {
          "id": "negative-POST-scn-testfsp3-tes",
          "meta": {
            "info": "[negative] POST /scenarios testfsp3 -> testfsp1 - Tx1"
          },
          "description": "[negative] POST /scenarios testfsp3 -> testfsp1 - Tx1",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idValue": "{$inputs.SIM3_MSISDN}"
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_1}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "result-statusCode-400",
                "description": "result.statusCode == 400",
                "exec": [
                  "expect(response.body.scenario1.result.statusCode).to.equal(400)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            },
            "postRequest": {
              "exec": [
                "/*",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payeeRequest)",
                "  requestVariables.payerCallback = await websocket.getMessage('payerCallback', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payerCallback)",
                "  ",
                "  requestVariables.scenario1TransferId = response.body.scenario1.result.transferId",
                "  ",
                "  let url = `${environment.PAYEEFSP_SDK_TESTAPI_URL}/requests/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payeeSideTransferRequest = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "  ",
                "  url = `${environment.PAYERFSP_SDK_TESTAPI_URL}/callbacks/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payerSideTransferCallback = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "}*/"
              ]
            }
          }
        },
        {
          "id": "testfsp3-accounts-settle-pos-i-1",
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) AFTER Tx1 transfer"
          },
          "description": "testfsp3/accounts (settlement, position, interchange) AFTER Tx1 transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp3SettlementBalanceAfterExpected).to.eql(environment.testfsp3SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp3PositionBalanceBefore).to.eql(environment.testfsp3PositionBalanceAfterTransfer1);"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(environment.testfsp3_actual_interchange_transfer1)).to.eql(Number(environment.testfsp3_expected_interchange_transfer1));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "queryParams": {
            "": ""
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "const envSettlementCgsTxAmount1 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_1)",
                "",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "  // console.log(res);",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "      ",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp3SettlementBalanceAfterTransfer1= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp3PositionBalanceAfterTransfer1= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1= curAccount.value",
                "    }",
                "  })",
                "",
                "  /*",
                "  console.log(environment.testfsp3SettlementBalanceAfterTransfer1);",
                "  console.log(environment.testfsp3PositionBalanceAfterTransfer1);",
                "  console.log(environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.POST-scn-testfsp3-testfsp1-Tx1.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = envSettlementCgsTxAmount1;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "  ",
                "  environment.testfsp3SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp3SettlementBalanceBefore) + Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "",
                "  console.log(`testfsp3SettlementBalanceAfterExpected=${environment.testfsp3SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp3SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp3SettlementBalanceAfterTransfer1).toFixed(2);",
                "",
                "  console.log(`testfsp3SettlementBalanceAfterActual=${environment.testfsp3SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp3SettlementBalanceAfterActual === environment.testfsp3SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp3 settlement balance before transfers',environment.testfsp3SettlementBalanceBefore);",
                "  console.log('extracted testfsp3 settlement balance after first transfer ACTUAL',environment.testfsp3SettlementBalanceAfterActual);",
                "  console.log('calculated testfsp3 settlement balance before transfers '+environment.testfsp3SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp3SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp3 positions account before',environment.testfsp3PositionBalanceBefore);",
                "  console.log('test fsp3 positions account after',environment.testfsp3PositionBalanceAfterTransfer1);",
                "",
                "  console.log(`environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1=${environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1}`)",
                "  console.log(`environment.testfsp3InterchFeeBalanceBefore=${environment.testfsp3InterchFeeBalanceBefore}`)",
                "  environment.testfsp3_actual_interchange_transfer1 =  (Number.parseFloat(environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1) - Number.parseFloat(environment.testfsp3InterchFeeBalanceBefore)).toFixed(2);",
                "",
                "  console.log(\"interchange fee actual \"+environment.testfsp3_actual_interchange_transfer1);",
                "",
                "  environment.testfsp3_expected_interchange_transfer1 = transferAmount * envSettlementRuleInterchangeFee",
                "  console.log(`interchange fee percentage @ ${envSettlementRuleInterchangeFee}`)",
                "  console.log(`interchange fee expected ${environment.testfsp3_expected_interchange_transfer1}`);",
                "",
                "  console.log(`environment.testfsp3PositionBalanceBefore (${environment.testfsp3PositionBalanceBefore}) == environment.testfsp3PositionBalanceAfterTransfer1 (${environment.testfsp3PositionBalanceAfterTransfer1})`)",
                "  console.log(`environment.testfsp3SettlementBalanceAfterExpected (${environment.testfsp3SettlementBalanceAfterExpected}) == environment.testfsp3SettlementBalanceAfterActual (${environment.testfsp3SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp3_actual_interchange_transfer1 (${environment.testfsp3_actual_interchange_transfer1}) == environment.testfsp3_expected_interchange_transfer1 (${environment.testfsp3_expected_interchange_transfer1})`)",
                "",
                "  if ((environment.testfsp3PositionBalanceBefore == environment.testfsp3PositionBalanceAfterTransfer1) &&",
                "  (environment.testfsp3SettlementBalanceAfterExpected == environment.testfsp3SettlementBalanceAfterActual) &&",
                "  (environment.testfsp3_actual_interchange_transfer1 == environment.testfsp3_expected_interchange_transfer1)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM3_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp3PositionBalanceBefore = environment.testfsp3PositionBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp3PositionBalanceBefore = environment.testfsp3PositionBalanceAfterTransfer1",
                "environment.testfsp3SettlementBalanceBefore = environment.testfsp3SettlementBalanceAfterTransfer1",
                "environment.testfsp3InterchFeeBalanceBefore = environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1",
                "",
                "console.log(`RESET - environment.testfsp3PositionBalanceBefore=${environment.testfsp3PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp3SettlementBalanceBefore=${environment.testfsp3SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp3InterchFeeBalanceBefore=${environment.testfsp3InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp1-accounts-settle-pos-i-1",
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) AFTER Tx1 transfer"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) AFTER Tx1 transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount",
                "exec": [
                  "expect(environment.testfsp1SettlementBalanceAfterExpected).to.eql(environment.testfsp1SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(requestVariables.testfsp1PositionBalanceBefore).to.eql(environment.testfsp1PositionBalanceAfter);"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(environment.testfsp1_actual_interchange_transfer1)).to.eql(Number(environment.testfsp1_expected_interchange_transfer1));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "// var maxRetryWait = 1;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "const envSettlementCgsTxAmount1 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_1)",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp1SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp1PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp1InterchFeeBalanceAfterTransfer1= curAccount.value",
                "    }",
                "  })",
                "",
                "",
                "  /*                     ",
                "  console.log(environment.testfsp1SettlementBalanceAfter);",
                "  console.log(environment.testfsp1PositionBalanceAfter);",
                "  console.log(environment.testfsp1InterchFeeBalanceAfterTransfer1);*/",
                "",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.POST-scn-testfsp3-testfsp1-Tx1.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  const transferAmount = envSettlementCgsTxAmount1;",
                "  ",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp1SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "  console.log(`testfsp1SettlementBalanceAfterExpected=${environment.testfsp1SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp1SettlementBalanceAfterExpected).toFixed(2);",
                "  ",
                "  console.log(`testfsp1SettlementBalanceAfterExpected=${environment.testfsp1SettlementBalanceAfterExpected}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`testfsp1SettlementBalanceAfterActual=${environment.testfsp1SettlementBalanceAfterActual}`)",
                "",
                "  console.log(environment.testfsp1SettlementBalanceAfterActual === environment.testfsp1SettlementBalanceAfterExpected)",
                "",
                "  console.log('extracted testfsp1 settlement balance before transfers',environment.testfsp1SettlementBalanceBefore);",
                "  console.log('extracted testfsp1 settlement balance after transfers ACTUAL',environment.testfsp1SettlementBalanceAfter);",
                "  console.log('calculated testfsp1 settlement balance before transfers '+environment.testfsp1SettlementBalanceBefore +' transfer amount +'+transferAmount, environment.testfsp1SettlementBalanceAfterExpected);",
                "",
                "  console.log('test fsp1 positions account before',environment.testfsp1PositionBalanceBefore);",
                "  console.log('test fsp1 positions account after',environment.testfsp1PositionBalanceAfter);",
                "",
                "  environment.testfsp1_actual_interchange_transfer1 = Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer1) - Number.parseFloat(environment.testfsp1InterchFeeBalanceBefore)",
                "  environment.testfsp1_actual_interchange_transfer1 = Number(environment.testfsp1_actual_interchange_transfer1.toFixed(2));",
                "  ",
                "  environment.testfsp1_expected_interchange_transfer1 = -1 * transferAmount * envSettlementRuleInterchangeFee",
                "  console.log(`interchange fee percentage @ ${envSettlementRuleInterchangeFee}`)",
                "  console.log(`interchange fee expected ${environment.testfsp1_expected_interchange_transfer1}`);",
                "",
                "  console.log(`environment.testfsp1SettlementBalanceAfterExpected (${environment.testfsp1SettlementBalanceAfterExpected}) == environment.testfsp1SettlementBalanceAfterActual (${environment.testfsp1SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp1PositionBalanceBefore (${environment.testfsp1PositionBalanceBefore}) == environment.testfsp1PositionBalanceAfter (${environment.testfsp1PositionBalanceAfter})`)",
                "  console.log(`environment.testfsp1_actual_interchange_transfer1 (${environment.testfsp1_actual_interchange_transfer1}) == environment.testfsp1_expected_interchange_transfer1 (${environment.testfsp1_expected_interchange_transfer1})`)",
                "",
                "",
                "  if ((environment.testfsp1SettlementBalanceAfterExpected == environment.testfsp1SettlementBalanceAfterActual) && ",
                "  (environment.testfsp1PositionBalanceBefore == environment.testfsp1PositionBalanceAfter) && ",
                "  (environment.testfsp1_actual_interchange_transfer1 == environment.testfsp1_expected_interchange_transfer1)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM1_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Store *BalanceBefore in a local variable for assertion test",
                "requestVariables.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceBefore",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceAfter",
                "environment.testfsp1SettlementBalanceBefore = environment.testfsp1SettlementBalanceAfter",
                "environment.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceAfterTransfer1",
                "",
                "console.log(`RESET - environment.testfsp1PositionBalanceBefore=${environment.testfsp1PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1SettlementBalanceBefore=${environment.testfsp1SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-Tx2",
          "meta": {
            "info": "POST /scenarios testfsp2 -> testfsp1 - Tx2"
          },
          "description": "POST /scenarios testfsp2 -> testfsp1 - Tx2",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/json"
          },
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2BankFname testfsp2Bankname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp2bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_2}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "trans-COMMITED",
                "description": "Transfer is COMMITED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_TX_AMOUNT_2 = environment.SETTLEMENT_CGS_TX_AMOUNT_2 || 87.88",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp2-accounts-Interchange-",
          "meta": {
            "info": "testfsp2/accounts (Interchange) AFTER Tx2 transfer"
          },
          "description": "testfsp2/accounts (Interchange) AFTER Tx2 transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "ignoreCallbacks": false,
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by+ environment.testfsp2_expected_interchange_b2b",
                "exec": [
                  "expect(Number(environment.testfsp2_actual_interchange_B2B)).to.eql(Number(environment.testfsp2_expected_interchange_b2b));"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp2SettlementBalanceAfterB2B= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp2PositionBalanceAfterB2B= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp2InterchFeeBalanceAfterB2B= curAccount.value",
                "    }",
                "  })",
                "",
                "  environment.testfsp2_actual_interchange_B2B =  Number.parseFloat(environment.testfsp2InterchFeeBalanceAfterB2B) - Number.parseFloat(environment.testfsp2InterchFeeBalanceBefore)",
                "  environment.testfsp2_actual_interchange_B2B = Number(environment.testfsp2_actual_interchange_B2B.toFixed(2));",
                "",
                "  console.log(\"actual value \"+environment.testfsp2_actual_interchange_B2B);",
                "",
                "  environment.testfsp2_expected_interchange_b2b = 0.00;",
                "",
                "  if (environment.testfsp2_actual_interchange_B2B == environment.testfsp2_expected_interchange_b2b) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM2_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp2PositionBalanceBefore = environment.testfsp2PositionBalanceAfterB2B",
                "environment.testfsp2SettlementBalanceBefore = environment.testfsp2SettlementBalanceAfterB2B",
                "environment.testfsp2InterchFeeBalanceBefore = environment.testfsp2InterchFeeBalanceAfterB2B",
                "",
                "console.log(`RESET - environment.testfsp2PositionBalanceBefore=${environment.testfsp2PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp2SettlementBalanceBefore=${environment.testfsp2SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp2InterchFeeBalanceBefore=${environment.testfsp2InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp1-accounts-Interchange-",
          "meta": {
            "info": "testfsp1/accounts (Interchange) AFTER Tx2 transfer"
          },
          "description": "testfsp1/accounts (Interchange) AFTER Tx2 transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by ",
                "exec": [
                  "expect(Number(environment.testfsp1_actual_interchange_b2b_transfer)).to.eql(Number(environment.testfsp1_expected_interchange_b2b));"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "// var maxRetryWait = 1;",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp1SettlementBalanceAfterB2B= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp1PositionBalanceAfterB2B= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp1InterchFeeBalanceAfterB2B= curAccount.value",
                "    }",
                "  })",
                "",
                "  environment.testfsp1_actual_interchange_b2b_transfer =  Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterB2B) - Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer1)",
                "",
                "  environment.testfsp1_actual_interchange_b2b_transfer = Number(environment.testfsp1_actual_interchange_b2b_transfer.toFixed(2));",
                "  console.log(\"actual value \" +environment.testfsp1_actual_interchange_b2b_transfer);",
                "",
                "  environment.testfsp1_expected_interchange_b2b = 0.00;",
                "",
                "  if (environment.testfsp1_actual_interchange_b2b_transfer == environment.testfsp1_expected_interchange_b2b) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM1_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceAfterB2B",
                "environment.testfsp1SettlementBalanceBefore = environment.testfsp1SettlementBalanceAfterB2B",
                "environment.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceAfterB2B",
                "",
                "console.log(`RESET - environment.testfsp1PositionBalanceBefore=${environment.testfsp1PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1SettlementBalanceBefore=${environment.testfsp1SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp4-Tx3",
          "meta": {
            "info": "POST /scenarios testfsp1 -> testfsp4 - Tx3"
          },
          "description": "POST /scenarios testfsp1 -> testfsp4 - Tx3",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/json"
          },
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_3}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-COMMITTED",
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_TX_AMOUNT_3 = environment.SETTLEMENT_CGS_TX_AMOUNT_3 || 158.36",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp1-accounts-settle-pos-i-2",
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) AFTER Tx3 transfer"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) AFTER Tx3 transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changes by transfer amount -",
                "exec": [
                  "expect(Number(environment.testfsp1SettlementBalanceAfterExpected)).to.eql(Number(environment.testfsp1SettlementBalanceAfterActual));"
                ]
              },
              {
                "id": "Check-that-pos-acc-value-remai",
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(Number(environment.testfsp1PositionBalanceAfter)).to.eql(Number(environment.testfsp1PositionBalanceAfterTransfer2));"
                ]
              },
              {
                "id": "check-that-interchange-fee-hav",
                "description": "check that interchange fee have been changed by ",
                "exec": [
                  "expect(Number(environment.testfsp1_actual_interchange_transfer2)).to.eql(Number(environment.testfsp1_expected_interchange_transfer2));"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "const envSettlementCgsTxAmount3 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_3)",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`)",
                "",
                "  // console.log(res)",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp1SettlementBalanceAfterTransfer2= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "      environment.testfsp1PositionBalanceAfterTransfer2= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp1InterchFeeBalanceAfterTransfer2= curAccount.value",
                "    }",
                "  })",
                "  ",
                "  // TODO: Reference previous POST /Scenarios request (e.g. '{$prev.POST-scn-testfsp3-testfsp1-Tx1.request.body.amount}') once https://github.com/mojaloop/project/issues/2890 (issue 6) has been resolved.",
                "  var transferAmount = envSettlementCgsTxAmount3;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp1SettlementBalanceAfterB2B) + Number.parseFloat(transferAmount);",
                "",
                "  environment.testfsp1SettlementBalanceAfterExpected = Number(environment.testfsp1SettlementBalanceAfterExpected.toFixed(2));",
                "",
                "  environment.testfsp1SettlementBalanceAfterActual = Number(Number.parseFloat(environment.testfsp1SettlementBalanceAfterTransfer2).toFixed(2));",
                "",
                "  environment.testfsp1_actual_interchange_transfer2 =  Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer2) - Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer1)",
                "  ",
                "  environment.testfsp1_actual_interchange_transfer2 = Number(environment.testfsp1_actual_interchange_transfer2.toFixed(2));",
                "",
                "  environment.testfsp1_expected_interchange_transfer2 = (transferAmount * envSettlementRuleInterchangeFee).toFixed(2)",
                "  console.log(`interchange fee percentage @ ${envSettlementRuleInterchangeFee}`)",
                "  console.log(`interchange fee expected ${environment.testfsp1_expected_interchange_transfer2}`);",
                "",
                "  console.log(`environment.testfsp1PositionBalanceAfter (${environment.testfsp1PositionBalanceAfter}) == environment.testfsp1PositionBalanceAfterTransfer2 (${environment.testfsp1PositionBalanceAfterTransfer2})`)",
                "  console.log(`environment.testfsp1SettlementBalanceAfterExpected (${environment.testfsp1SettlementBalanceAfterExpected}) == environment.testfsp1SettlementBalanceAfterActual (${environment.testfsp1SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp1_actual_interchange_transfer2 (${environment.testfsp1_actual_interchange_transfer2}) == environment.testfsp1_expected_interchange_transfer2 (${environment.testfsp1_expected_interchange_transfer2})`)",
                "  ",
                "  // console.log(`environment.testfsp1_actual_interchange_transfer2[${environment.testfsp1_actual_interchange_transfer2}] === environment.testfsp1_expected_interchange_transfer2[${environment.testfsp1_expected_interchange_transfer2}]`)",
                "  if ((environment.testfsp1SettlementBalanceAfterExpected == environment.testfsp1SettlementBalanceAfterActual) && ",
                "  (environment.testfsp1PositionBalanceAfter == environment.testfsp1PositionBalanceAfterTransfer2) && ",
                "  (environment.testfsp1_actual_interchange_transfer2 == environment.testfsp1_expected_interchange_transfer2)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM1_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                "",
                "// Reset *Balances for later tests",
                "environment.testfsp1PositionBalanceBefore = environment.testfsp1PositionBalanceAfterTransfer2",
                "environment.testfsp1SettlementBalanceBefore = environment.testfsp1SettlementBalanceAfterTransfer2",
                "environment.testfsp1InterchFeeBalanceBefore = environment.testfsp1InterchFeeBalanceAfterTransfer2",
                "",
                "console.log(`RESET - environment.testfsp1PositionBalanceBefore=${environment.testfsp1PositionBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1SettlementBalanceBefore=${environment.testfsp1SettlementBalanceBefore}`)",
                "console.log(`RESET - environment.testfsp1InterchFeeBalanceAfterTransfer2=${environment.testfsp1InterchFeeBalanceAfterTransfer2}`)",
                "",
                ""
              ]
            },
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-Tx4",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 - Tx4"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 - Tx4",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_4}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet 2020-06-26 11:52AM",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": "trans-COMMITTED",
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_TX_AMOUNT_4 = environment.SETTLEMENT_CGS_TX_AMOUNT_4 || 211.11",
                ""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-Tx5",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 - Tx5"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 - Tx5",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_5}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": "trans-COMMITTED",
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_TX_AMOUNT_5 = environment.SETTLEMENT_CGS_TX_AMOUNT_5 || 14.05",
                "",
                "console.log(`environment.SETTLEMENT_CGS_TX_AMOUNT_5=${environment.SETTLEMENT_CGS_TX_AMOUNT_5}`)",
                ""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp4-testfsp1-Tx6",
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 - Tx6"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 - Tx6",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "{$environment.SETTLEMENT_CGS_TX_AMOUNT_6}",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": "trans-COMMITTED",
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.SETTLEMENT_CGS_TX_AMOUNT_6 = environment.SETTLEMENT_CGS_TX_AMOUNT_6 || 150",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "ignoreCallbacks": true,
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "params": {
            "id": ""
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                " var jsonData = response.body;",
                "              ",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "",
                "console.log(environment.openWindowID);",
                "environment.openWindowstate=jsonData[0].state;"
              ]
            }
          }
        },
        {
          "id": "Close-existent-window",
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "ignoreCallbacks": true,
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": "testfsp1-accounts-settle-pos-i-3",
          "meta": {
            "info": "testfsp1/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers"
          },
          "description": "testfsp1/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changed after transfers",
                "exec": [
                  "expect(Number(environment.testfsp1SettlementBalanceAfterExpected)).to.eql(Number(environment.testfsp1SettlementBalanceAfterActual));"
                ]
              },
              {
                "id": "check-agregates-interchange-fe",
                "description": "check agregates for interchange fees calculated correctly",
                "exec": [
                  "expect(environment.aggregates_fee).to.eql(environment.testfsp1_aggregate_interchange_fee_expected);"
                ]
              },
              {
                "id": "pos-value-after-trans",
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.testfsp1PositionBalanceAfter).to.eql(environment.testfsp1PositionBalanceBefore);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "// var maxRetryWait = 1;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "// fsp2 -> fsp1 [211.15 TZS] - SETTLEMENT_CGS_TX_AMOUNT_4",
                "const envSettlementCgsTxAmount4 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_4)",
                "// fsp2 -> fsp1 [14.21 TZS] - SETTLEMENT_CGS_TX_AMOUNT_5",
                "const envSettlementCgsTxAmount5 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_5)",
                "// fsp4 -> fsp1 [150 TZS] - SETTLEMENT_CGS_TX_AMOUNT_6",
                "const envSettlementCgsTxAmount6 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_6)",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount <= maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp1SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.testfsp1PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp1InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  const transferAmount = envSettlementCgsTxAmount4 + envSettlementCgsTxAmount5 + envSettlementCgsTxAmount6;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`environment.testfsp1SettlementBalanceBefore=${environment.testfsp1SettlementBalanceBefore}`)",
                "",
                "  environment.testfsp1SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp1SettlementBalanceBefore) - Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "  console.log(`environment.testfsp1SettlementBalanceAfterExpected=${environment.testfsp1SettlementBalanceAfterExpected}`)",
                "",
                "  //@TODO adjust rounding balance (2 decimals || 3 decimals after the point).",
                "  environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`environment.testfsp1InterchFeeBalanceBefore=${environment.testfsp1InterchFeeBalanceBefore}`)",
                "  console.log(`environment.testfsp1InterchFeeBalanceAfter=${environment.testfsp1InterchFeeBalanceAfter}`)",
                "",
                "  environment.aggregates_fee = (Number.parseFloat(environment.testfsp1InterchFeeBalanceAfter) - Number.parseFloat(environment.testfsp1InterchFeeBalanceBefore)).toFixed(2); // ORIGINAL",
                "  // environment.aggregates_fee = Number.parseFloat(environment.testfsp1InterchFeeBalanceAfter) - Number.parseFloat(environment.testfsp1InterchFeeBalanceBefore);",
                "  // console.log(`environment.aggregates_fee=${environment.aggregates_fee}`)",
                "",
                "  // environment.aggregates_fee = (Math.trunc(environment.aggregates_fee*100)/100).toFixed(2)",
                "  console.log(`environment.aggregates_fee (fixed)=${environment.aggregates_fee}`)",
                "",
                "  environment.testfsp1_aggregate_interchange_fee_expected = (-1 * transferAmount * envSettlementRuleInterchangeFee).toFixed(2) // ORIGINAL",
                "  // environment.testfsp1_aggregate_interchange_fee_expected = (-1 * transferAmount * envSettlementRuleInterchangeFee)",
                "  // console.log(`interchange fee expected ${environment.testfsp1_aggregate_interchange_fee_expected}`);",
                "",
                "  // environment.testfsp1_aggregate_interchange_fee_expected = (Math.trunc(environment.testfsp1_aggregate_interchange_fee_expected*100)/100).toFixed(2)",
                "  console.log(`interchange fee expected (fixed) ${environment.testfsp1_aggregate_interchange_fee_expected}`);",
                "  ",
                "  console.log(`interchange fee percentage @ ${envSettlementRuleInterchangeFee}`)",
                "",
                "  console.log(`environment.testfsp1SettlementBalanceAfterExpected (${environment.testfsp1SettlementBalanceAfterExpected}) == environment.testfsp1SettlementBalanceAfterActual (${environment.testfsp1SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp1PositionBalanceAfter (${environment.testfsp1PositionBalanceAfter}) == environment.testfsp1PositionBalanceBefore (${environment.testfsp1PositionBalanceBefore})`)",
                "  console.log(`environment.aggregates_fee (${environment.aggregates_fee}) == environment.testfsp1_aggregate_interchange_fee_expected (${environment.testfsp1_aggregate_interchange_fee_expected})`)",
                "",
                "  if ((environment.testfsp1SettlementBalanceAfterExpected == environment.testfsp1SettlementBalanceAfterActual) && ",
                "  (environment.testfsp1PositionBalanceAfter == environment.testfsp1PositionBalanceBefore) &&",
                "  (environment.aggregates_fee == environment.testfsp1_aggregate_interchange_fee_expected)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM1_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp2-accounts-settle-pos-i-1",
          "meta": {
            "info": "testfsp2/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers"
          },
          "description": "testfsp2/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "check-agregates-interchange-fe",
                "description": "check agregates for interchange fees calculated correctly",
                "exec": [
                  "expect(environment.aggregates_fee).to.eql(environment.testfsp2_aggregate_interchange_fee_expected);"
                ]
              },
              {
                "id": "pos-value-after-trans",
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.testfsp2PositionBalanceAfter).to.eql(environment.testfsp2PositionBalanceBefore);"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changed after transfers",
                "exec": [
                  "expect(Number(environment.testfsp2SettlementBalanceAfterExpected)).to.eql(Number(environment.testfsp2SettlementBalanceAfterActual));"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 1000;",
                "// var maxRetryWait = 1;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "// fsp2 -> fsp1 [211.15 TZS] - SETTLEMENT_CGS_TX_AMOUNT_4",
                "const envSettlementCgsTxAmount4 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_4)",
                "// fsp2 -> fsp1 [14.21 TZS] - SETTLEMENT_CGS_TX_AMOUNT_5",
                "const envSettlementCgsTxAmount5 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_5)",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount <= maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp2SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.testfsp2PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp2InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  const transferAmount = envSettlementCgsTxAmount4 + envSettlementCgsTxAmount5;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`environment.testfsp2SettlementBalanceBefore=${environment.testfsp2SettlementBalanceBefore}`)",
                "",
                "  environment.testfsp2SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp2SettlementBalanceBefore) + Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "  console.log(`environment.testfsp2SettlementBalanceAfterExpected=${environment.testfsp2SettlementBalanceAfterExpected}`)",
                "",
                "  //@TODO adjust rounding balance (2 decimals || 3 decimals after the point).",
                "  environment.testfsp2SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp2SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`environment.testfsp2InterchFeeBalanceBefore=${environment.testfsp2InterchFeeBalanceBefore}`)",
                "  console.log(`environment.testfsp2InterchFeeBalanceAfter=${environment.testfsp2InterchFeeBalanceAfter}`)",
                "",
                "  environment.aggregates_fee = (Number.parseFloat(environment.testfsp2InterchFeeBalanceAfter) - Number.parseFloat(environment.testfsp2InterchFeeBalanceBefore)).toFixed(2);  // ORIGINAL",
                "  // environment.aggregates_fee = Number.parseFloat(environment.testfsp2InterchFeeBalanceAfter) - Number.parseFloat(environment.testfsp2InterchFeeBalanceBefore);",
                "  // console.log(`environment.aggregates_fee=${environment.aggregates_fee}`)",
                "",
                "  // environment.aggregates_fee = (Math.trunc(environment.aggregates_fee*100)/100).toFixed(2)",
                "  console.log(`environment.aggregates_fee (fixed)=${environment.aggregates_fee}`)",
                "",
                "  environment.testfsp2_aggregate_interchange_fee_expected = (transferAmount * envSettlementRuleInterchangeFee).toFixed(2) // ORIGINAL",
                "  // environment.testfsp2_aggregate_interchange_fee_expected = (transferAmount * envSettlementRuleInterchangeFee)",
                "  // console.log(`interchange fee expected ${environment.testfsp2_aggregate_interchange_fee_expected}`);",
                "",
                "  // environment.testfsp2_aggregate_interchange_fee_expected = (Math.trunc(environment.testfsp2_aggregate_interchange_fee_expected*100)/100).toFixed(2)",
                "  console.log(`interchange fee expected (fixed) ${environment.testfsp2_aggregate_interchange_fee_expected}`);",
                "  ",
                "  console.log(`interchange fee percentage @ ${envSettlementRuleInterchangeFee}`)",
                "",
                "  console.log(`environment.testfsp2SettlementBalanceAfterExpected (${environment.testfsp2SettlementBalanceAfterExpected}) == environment.testfsp2SettlementBalanceAfterActual (${environment.testfsp2SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp2PositionBalanceAfter (${environment.testfsp2PositionBalanceAfter}) == environment.testfsp2PositionBalanceBefore (${environment.testfsp2PositionBalanceBefore})`)",
                "  console.log(`environment.aggregates_fee (${environment.aggregates_fee}) == environment.testfsp2_aggregate_interchange_fee_expected (${environment.testfsp2_aggregate_interchange_fee_expected})`)",
                "",
                "  if ((environment.testfsp2SettlementBalanceAfterExpected == environment.testfsp2SettlementBalanceAfterActual) && ",
                "  (environment.testfsp2PositionBalanceAfter == environment.testfsp2PositionBalanceBefore) &&",
                "  (environment.aggregates_fee == environment.testfsp2_aggregate_interchange_fee_expected)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM2_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp3-accounts-settle-pos-i-2",
          "meta": {
            "info": "testfsp3/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers"
          },
          "description": "testfsp3/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "pos-value-after-trans",
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.testfsp3PositionBalanceAfter).to.eql(environment.testfsp3PositionBalanceBefore);",
                  ""
                ]
              },
              {
                "id": "Interchange-after-trans",
                "description": "Interchange should be the same after transfer",
                "exec": [
                  "expect(environment.testfsp3InterchFeeBalanceAfter).to.eql(environment.testfsp3InterchFeeBalanceBefore);",
                  ""
                ]
              },
              {
                "id": "settle-after-trans",
                "description": "Settlement should be the same after transfer",
                "exec": [
                  "expect(environment.testfsp3SettlementBalanceAfter).to.eql(environment.testfsp3SettlementBalanceBefore);",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "// var maxRetryWait = 1;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "// fsp3 -> fsp1 [211.15 TZS] - SETTLEMENT_CGS_TX_AMOUNT_4",
                "const envSettlementCgsTxAmount4 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_4)",
                "// fsp3 -> fsp1 [14.21 TZS] - SETTLEMENT_CGS_TX_AMOUNT_5",
                "const envSettlementCgsTxAmount5 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_5)",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount <= maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp3SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.testfsp3PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp3InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  console.log(`environment.testfsp3SettlementBalanceAfter (${environment.testfsp3SettlementBalanceAfter}) == environment.testfsp3SettlementBalanceBefore (${environment.testfsp3SettlementBalanceBefore})`)",
                "  console.log(`environment.testfsp3PositionBalanceAfter (${environment.testfsp3PositionBalanceAfter}) == environment.testfsp3PositionBalanceBefore (${environment.testfsp3PositionBalanceBefore})`)",
                "  console.log(`environment.testfsp3InterchFeeBalanceAfter (${environment.testfsp3InterchFeeBalanceAfter}) == environment.testfsp3InterchFeeBalanceBefore (${environment.testfsp3InterchFeeBalanceBefore})`)",
                "",
                "  if ((environment.testfsp3SettlementBalanceAfter == environment.testfsp3SettlementBalanceBefore) && ",
                "  (environment.testfsp3PositionBalanceAfter == environment.testfsp3PositionBalanceBefore) &&",
                "  (environment.testfsp3InterchFeeBalanceAfter == environment.testfsp3InterchFeeBalanceBefore)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM3_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp4-accounts-settle-pos-i-1",
          "meta": {
            "info": "testfsp4/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers"
          },
          "description": "testfsp4/accounts (settlement, position, interchange) AFTER Tx4,Tx5,Tx6 transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "pos-value-after-trans",
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.testfsp4PositionBalanceAfter).to.eql(environment.testfsp4PositionBalanceBefore);"
                ]
              },
              {
                "id": "check-agregates-interchange-fe",
                "description": "check agregates for interchange fees calculated correctly",
                "exec": [
                  "expect(environment.aggregates_fee).to.eql(environment.testfsp4_aggregate_interchange_fee_expected);"
                ]
              },
              {
                "id": "Check-that-settle-acc-value-ch",
                "description": "Check that settlement account value changed after transfers",
                "exec": [
                  "expect(environment.testfsp4SettlementBalanceAfterExpected).to.eql(environment.testfsp4SettlementBalanceAfterActual);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "// lets get retry configs",
                "var maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "var maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "// var maxRetryWait = 1;",
                "",
                "const envSettlementRuleInterchangeFee = Number.parseFloat(environment.SETTLEMENT_RULE_INTERCHANGE_FEE) || 0.006;",
                "",
                "// fsp1 -> fsp4 [150 TZS] - SETTLEMENT_CGS_TX_AMOUNT_3",
                "const envSettlementCgsTxAmount3 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_3)",
                "",
                "// fsp4 -> fsp1 [150 TZS] - SETTLEMENT_CGS_TX_AMOUNT_6",
                "const envSettlementCgsTxAmount6 = Number.parseFloat(environment.SETTLEMENT_CGS_TX_AMOUNT_6)",
                "",
                "var res = response.body;",
                "",
                "for (let retryCount = 0 ; retryCount <= maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`);",
                "",
                "  res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "      environment.testfsp4SettlementBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.testfsp4PositionBalanceAfter= curAccount.value",
                "    }",
                "",
                "    if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "      environment.testfsp4InterchFeeBalanceAfter= curAccount.value",
                "    }",
                "  })",
                "",
                "  const transferAmount = envSettlementCgsTxAmount6 - envSettlementCgsTxAmount3;",
                "",
                "  console.log(`transferAmount=${transferAmount}`)",
                "",
                "  console.log(`environment.testfsp4SettlementBalanceBefore=${environment.testfsp4SettlementBalanceBefore}`)",
                "",
                "  environment.testfsp4SettlementBalanceAfterExpected = (Number.parseFloat(environment.testfsp4SettlementBalanceBefore) + Number.parseFloat(transferAmount)).toFixed(2);",
                "",
                "  console.log(`environment.testfsp4SettlementBalanceAfterExpected=${environment.testfsp4SettlementBalanceAfterExpected}`)",
                "",
                "  //@TODO adjust rounding balance (2 decimals || 3 decimals after the point).",
                "  environment.testfsp4SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp4SettlementBalanceAfter).toFixed(2);",
                "",
                "  console.log(`environment.testfsp4InterchFeeBalanceBefore=${environment.testfsp4InterchFeeBalanceBefore}`)",
                "  console.log(`environment.testfsp4InterchFeeBalanceAfter=${environment.testfsp4InterchFeeBalanceAfter}`)",
                "",
                "  environment.aggregates_fee = (Number.parseFloat(environment.testfsp4InterchFeeBalanceAfter) - Number.parseFloat(environment.testfsp4InterchFeeBalanceBefore)).toFixed(2);  // ORIGINAL",
                "  // environment.aggregates_fee = Number.parseFloat(environment.testfsp4InterchFeeBalanceAfter) + Number.parseFloat(environment.testfsp4InterchFeeBalanceBefore);",
                "  // console.log(`environment.aggregates_fee=${environment.aggregates_fee}`)",
                "",
                "  // environment.aggregates_fee = (Math.trunc(environment.aggregates_fee*100)/100).toFixed(2)",
                "  console.log(`environment.aggregates_fee (fixed)=${environment.aggregates_fee}`)",
                "",
                "  environment.testfsp4_aggregate_interchange_fee_expected = (transferAmount * envSettlementRuleInterchangeFee).toFixed(2) // ORIGINAL",
                "  // environment.testfsp4_aggregate_interchange_fee_expected = (transferAmount * envSettlementRuleInterchangeFee)",
                "  // console.log(`interchange fee expected ${environment.testfsp4_aggregate_interchange_fee_expected}`);",
                "",
                "  // environment.testfsp4_aggregate_interchange_fee_expected = (Math.trunc(environment.testfsp4_aggregate_interchange_fee_expected*100)/100).toFixed(2)",
                "  console.log(`interchange fee expected (fixed) ${environment.testfsp4_aggregate_interchange_fee_expected}`);",
                "  ",
                "  console.log(`interchange fee percentage @ ${envSettlementRuleInterchangeFee}`)",
                "",
                "  console.log(`environment.testfsp4SettlementBalanceAfterExpected (${environment.testfsp4SettlementBalanceAfterExpected}) == environment.testfsp4SettlementBalanceAfterActual (${environment.testfsp4SettlementBalanceAfterActual})`)",
                "  console.log(`environment.testfsp4PositionBalanceAfter (${environment.testfsp4PositionBalanceAfter}) == environment.testfsp4PositionBalanceBefore (${environment.testfsp4PositionBalanceBefore})`)",
                "  console.log(`environment.aggregates_fee (${environment.aggregates_fee}) == environment.testfsp4_aggregate_interchange_fee_expected (${environment.testfsp4_aggregate_interchange_fee_expected})`)",
                "",
                "  if ((environment.testfsp4SettlementBalanceAfterExpected == environment.testfsp4SettlementBalanceAfterActual) && ",
                "  (environment.testfsp4PositionBalanceAfter == environment.testfsp4PositionBalanceBefore) &&",
                "  (environment.aggregates_fee == environment.testfsp4_aggregate_interchange_fee_expected)) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    const axioResponse = await axios.get(`${environment.HOST_CENTRAL_LEDGER}/participants/${environment.SIM4_NAME}/accounts`)",
                "    res = axioResponse.data;",
                "  }",
                "}",
                ""
              ]
            }
          }
        },
        {
          "id": "Create-Interchange-Fee-settle-",
          "meta": {
            "info": "Create Interchange-Fee Settlement for a single Window"
          },
          "description": "Create Interchange-Fee Settlement for a single Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.openWindowID}"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(requestVariables.responseCode).to.equal(200)"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(requestVariables.response.state).to.eql('PENDING_SETTLEMENT')"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "var responseCode = response.code || response.status",
                "var responseState = null",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`)",
                "  console.log(res)",
                "  responseState = res.state",
                "  if (responseCode === 200) {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    try {",
                "      const axioResponse = await axios.post(",
                "        `${environment.HOST_CENTRAL_SETTLEMENT}/settlements`,",
                "        {",
                "          \"settlementModel\":\"InterchangeFee\",",
                "          \"reason\":\"TESTING\",",
                "          \"settlementWindows\":",
                "          [",
                "            {",
                "              \"id\": `${environment.openWindowID}`",
                "            }",
                "          ]",
                "      }",
                "      )",
                "      res = axioResponse.data;",
                "      responseCode = axioResponse.code || axioResponse.status",
                "    } catch (err) {",
                "      console.log(err)",
                "    }",
                "  }",
                "}",
                "",
                "environment.settlementId = res.id",
                "console.log(`environment.settlementId=${environment.settlementId}`);",
                "requestVariables.response = res",
                "console.log(`requestVariables.response=${JSON.stringify(requestVariables.response)}`);",
                "requestVariables.responseCode = responseCode",
                "console.log(`requestVariables.responseCode=${requestVariables.responseCode}`);",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "close-any-window",
      "name": "Close any window before transfers",
      "meta": {
        "info": "Close any window before transfers"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window1",
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-Existing-Window",
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          }
        }
      ]
    },
    {
      "id": "new-sims-win1",
      "name": "[new sims] new transfers window1",
      "meta": {
        "info": "[new sims] new transfers window1"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp4-w2w",
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-b2b",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2BankFname testfsp2Bankname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp2bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "87.88",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-w2w-1",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp4-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "close-any-win1",
      "name": "Close any window1",
      "meta": {
        "info": "Close any window1"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window1",
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-Existing-Window",
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "new-sims-win2",
      "name": "[new sims] new transfers window2",
      "meta": {
        "info": "[new sims] new transfers window2"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "POST-scn-testfsp3-testfsp4-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp4 w2w SEND [45.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp4 w2w SEND [45.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "45",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp4-testfsp2-w2w",
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp2 w2w SEND [34.55 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp2 w2w SEND [34.55 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "34.55",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp2-b2b",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp2 b2b SEND [22.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp2 b2b SEND [22.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3BankFname testfsp3Bankname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "22",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(requestVariables.scenarioResponse.code).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(requestVariables.scenarioResponse.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "// requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "// requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "// requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "// requestVariables.payerName = \"PayerFirst PayerLast\"",
                "",
                "",
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// requestVariables.scenarioResponse = {...response, status: response.code}",
                "",
                "// lets get retry config",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250",
                " ",
                "const expectedStatusCode = 200",
                "requestVariables.scenarioResponse = null",
                " ",
                "async function main() {",
                "  let _response = response",
                " ",
                "  for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "    requestVariables.scenarioResponse = _response",
                "    console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`)",
                "     ",
                "    const isOk = _response.code === expectedStatusCode;",
                "     ",
                "    if (isOk) {",
                "      console.log(`Everything is OK, let's continue`)",
                "      break;",
                "    } else {",
                "      console.log(`Everything is NOT OK, let's wait for ${maxRetryWait}ms, and try again...`)",
                "      await custom.sleep(maxRetryWait);",
                "      const axiosRes = await makeRequest()",
                "      _response = { body: axiosRes.data, code: axiosRes.status }",
                "    }",
                "  }",
                "}",
                " ",
                "function makeRequest() {",
                "    const reqParams = {",
                "        method: request.method, ",
                "        url: `${request.url}${request.path}`,",
                "        data: request.body,",
                "        headers: {",
                "          'Content-Type': 'application/json',",
                "        }",
                "    };",
                "     ",
                "    return axios(reqParams);",
                "}",
                " ",
                "await main()"
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp2-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [788.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [788.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "788",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          },
          "disabled": false
        },
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [22.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [22.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "22",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          },
          "disabled": false
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [333.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [333.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "333",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          },
          "disabled": false
        }
      ]
    },
    {
      "id": "close-any-win2",
      "name": "Close any window2",
      "meta": {
        "info": "Close any window2"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window1",
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-Existing-Window",
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "new-sims-win3",
      "name": "[new sims] new transfers window3",
      "meta": {
        "info": "[new sims] new transfers window3"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [56.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [56.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "56",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [44.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [44.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "44",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp2-b2b",
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp2 b2b SEND [89.00 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp2 b2b SEND [89.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1BankFname testfsp1BankLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp2bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "89",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp4-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [99.00 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [99.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "99",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(requestVariables.scenarioResponse.code).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(requestVariables.scenarioResponse.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "// requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "// requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "// requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "// requestVariables.payerName = \"PayerFirst PayerLast\"",
                "",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "// requestVariables.scenarioResponse = {...response, status: response.code}",
                "// console.log(requestVariables.scenarioResponse)",
                "",
                "// lets get retry config",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250",
                " ",
                "const expectedStatusCode = 200",
                "requestVariables.scenarioResponse = null",
                " ",
                "async function main() {",
                "  let _response = response",
                " ",
                "  for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "    requestVariables.scenarioResponse = _response",
                "    console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`)",
                "     ",
                "    const isOk = _response.code === expectedStatusCode;",
                "     ",
                "    if (isOk) {",
                "      console.log(`Everything is OK, let's continue`)",
                "      break;",
                "    } else {",
                "      console.log(`Everything is NOT OK, let's wait for ${maxRetryWait}ms, and try again...`)",
                "      await custom.sleep(maxRetryWait);",
                "      const axiosRes = await makeRequest()",
                "      _response = { body: axiosRes.data, code: axiosRes.status }",
                "    }",
                "  }",
                "}",
                " ",
                "function makeRequest() {",
                "    const reqParams = {",
                "        method: request.method, ",
                "        url: `${request.url}${request.path}`,",
                "        data: request.body,",
                "        headers: {",
                "          'Content-Type': 'application/json',",
                "        }",
                "    };",
                "     ",
                "    return axios(reqParams);",
                "}",
                " ",
                "await main()"
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w-1",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-w2w-1",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [110.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [110.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "110",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "close-any-win3",
      "name": "Close any window3",
      "meta": {
        "info": "Close any window3"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window1",
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-Existing-Window",
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "new-sims-win4",
      "name": "[new sims] new transfers window4",
      "meta": {
        "info": "[new sims] new transfers window4"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp2-w2w",
          "meta": {
            "info": "POST /scenarios testfsp1 -> testfsp2 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp1 -> testfsp2 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp4-b2b",
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp4 b2b SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp4 b2b SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1BankFname testfsp1BankLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp4bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp2-w2w-1",
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp2 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp2 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w-1",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [150.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [150.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "close-any-win4",
      "name": "Close any window4",
      "meta": {
        "info": "Close any window4"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window1",
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-Existing-Window",
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "new-sims-win5",
      "name": "[new sims] new transfers window5",
      "meta": {
        "info": "[new sims] new transfers window5"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "POST-scn-testfsp2-testfsp3-w2w",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp3 w2w SEND [15.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp3 w2w SEND [15.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp4-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp1-testfsp3-b2b",
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp3 b2b SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp3 b2b SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1BankFname testfsp1BankLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp3bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp2-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp3-testfsp1-w2w",
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": "POST-scn-testfsp2-testfsp4-w2w",
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp4 w2w RECEIVE [150.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp4 w2w RECEIVE [150.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Status-code-200",
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "trans-state-COMMITTED",
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.body.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "close-any-win5",
      "name": "Close any window5",
      "meta": {
        "info": "Close any window5"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window1",
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-OPEN",
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": "Close-Existing-Window",
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "Create-Settlement-fo",
      "name": "Create Settlement for previously  closed 5 windows",
      "meta": {
        "info": "Create Settlement for previously  closed 5 windows"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "Get-Existing-Open-Window",
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "State-open",
                "description": "State should be open",
                "exec": [
                  "expect(response.body[0].state).to.eql('OPEN');"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                " var jsonData = response.body;\r",
                "\r",
                "\r",
                "environment.openWindowID=jsonData[0].settlementWindowId;\r",
                "\r",
                " \r",
                "    environment.openWindowID=jsonData[0].settlementWindowId;\r",
                "    environment.closed_win_prev_prev_prev_prev_prev= Number(jsonData[0].settlementWindowId)-5; \r",
                "    environment.closed_win_prev_prev_prev_prev= Number(jsonData[0].settlementWindowId)-4;  \r",
                "    environment.closed_win_prev_prev_prev=Number(jsonData[0].settlementWindowId)-3;  \r",
                "    environment.closed_win_prev_prev=Number(jsonData[0].settlementWindowId)-2;\r",
                "    environment.closed_win_prev=Number(jsonData[0].settlementWindowId)-1;\r",
                "    console.log('openWindowID '+environment.openWindowID);\r",
                "    console.log('closed window prev prev '+environment.closed_win_prev_prev)\r",
                "    console.log('closed window prev '+environment.closed_win_prev)"
              ]
            }
          }
        },
        {
          "id": "Create-settle-all-5-Closed-Win",
          "meta": {
            "info": "Create Settlement for all 5 Closed Windows (INTERCHANGE FEE)"
          },
          "description": "Create Settlement for all 5 Closed Windows (INTERCHANGE FEE)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closed_win_prev_prev_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev}"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(requestVariables.responseCode).to.equal(200)"
                ]
              },
              {
                "id": "settle-State-PENDING_SETTLEMEN",
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "  expect(requestVariables.response.state).to.eql('PENDING_SETTLEMENT');"
                ]
              },
              {
                "id": "first-part-netSettlementAmount",
                "description": "first participant netSettlementAmount == -5.37 TZS",
                "exec": [
                  "expect(requestVariables.response.participants[0].accounts[0].netSettlementAmount.amount).to.eql(-5.37);"
                ]
              },
              {
                "id": "second-part-netSettlementAmoun",
                "description": "second participant netSettlementAmount == -2.26 TZS",
                "exec": [
                  "expect(requestVariables.response.participants[1].accounts[0].netSettlementAmount.amount).to.eql(-2.26);"
                ]
              },
              {
                "id": "third-part-netSettlementAmount",
                "description": "third participant netSettlementAmount == 7.10 TZS",
                "exec": [
                  "expect(requestVariables.response.participants[2].accounts[0].netSettlementAmount.amount).to.eql(7.10);"
                ]
              },
              {
                "id": "fourth-part-netSettlementAmoun",
                "description": "fourth participant netSettlementAmount == 0.53 TZS",
                "exec": [
                  "expect(requestVariables.response.participants[3].accounts[0].netSettlementAmount.amount).to.eql(0.53);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "// lets get retry configs",
                "const maxRetryCount = Number.parseFloat(environment.RETRY_MAX_ATTEMPTS) || 20;",
                "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250;",
                "",
                "var responseCode = response.code || response.status",
                "var responseState = null",
                "for (let retryCount = 0 ; retryCount < maxRetryCount; retryCount++) {",
                "  console.log(`retry-count=${retryCount+1}, max-count=${maxRetryCount}, max-wait=${maxRetryWait}`)",
                "  console.log(res)",
                "  if (res.state === 'PENDING_SETTLEMENT') {",
                "    console.log('Everything is ok, lets continue')",
                "    break; // lets break out of while loop",
                "  } else {",
                "    console.log(`Everything is NOT OK, lets wait for ${maxRetryWait}ms, and try again...`)",
                "    await custom.sleep(maxRetryWait);",
                "    try {",
                "      const axioResponse = await axios.post(",
                "        `${environment.HOST_CENTRAL_SETTLEMENT}/settlements`,",
                "        {",
                "          \"settlementModel\": \"InterchangeFee\",",
                "          \"reason\": \"TESTING\",",
                "          \"settlementWindows\": [",
                "            {",
                "              \"id\": `${environment.closed_win_prev_prev_prev_prev_prev}`",
                "            },",
                "            {",
                "              \"id\": `${environment.closed_win_prev_prev_prev_prev}`",
                "            },",
                "            {",
                "              \"id\": `${environment.closed_win_prev_prev_prev}`",
                "            },",
                "            {",
                "              \"id\": `${environment.closed_win_prev_prev}`",
                "            },",
                "            {",
                "              \"id\": `${environment.closed_win_prev}`",
                "            }",
                "          ]",
                "        }",
                "      )",
                "      res = axioResponse.data;",
                "      responseCode = axioResponse.code || axioResponse.status",
                "    } catch (err) {",
                "      console.log(err)",
                "    }",
                "  }",
                "}",
                "",
                "requestVariables.response = res",
                "console.log(`requestVariables.response=${JSON.stringify(requestVariables.response)}`);",
                "requestVariables.responseCode = responseCode",
                "console.log(`requestVariables.responseCode=${requestVariables.responseCode}`);",
                ""
              ]
            }
          }
        }
      ]
    },
    {
      "id": "neg-requests",
      "name": "negative requests",
      "meta": {
        "info": "negative requests"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "NEGATIVE-Create-settle-all-Win",
          "meta": {
            "info": "NEGATIVE Create Settlement for all Windows Second time"
          },
          "description": "NEGATIVE Create Settlement for all Windows Second time",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closed_win_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev}"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": "Resposne-code-400",
                "description": "Resposne code is 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": "rsp-Generic-validation-error",
                "description": "Response contains 'Generic validation error",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include(\"Generic validation error\");"
                ]
              },
              {
                "id": "errorCode-3100",
                "description": "errorCode == 3100",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.eql(\"3100\");"
                ]
              }
            ]
          }
        },
        {
          "id": "NEGATIVE-POST-scn-payerfsp-NON",
          "meta": {
            "info": "NEGATIVE POST /scenarios payerfsp -> NON-registered fsp party"
          },
          "description": "NEGATIVE POST /scenarios payerfsp -> NON-registered fsp party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.PAYERFSP_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "payerfspFname payerfspLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.payerMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestNonExistingMSISDN}"
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "10",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-10 11:02pm",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": "rsp-code-200",
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "party-not-found-result-statusC",
                "description": "party not found with result.statusCode==3204 && lastError.httpStatusCOde==500",
                "exec": [
                  " var jsonData = response.body;\r",
                  "    expect(jsonData.scenario1.result.transferState.currentState).to.eql(\"ERROR_OCCURRED\");\r",
                  "    expect(jsonData.scenario1.result.transferState.lastError.httpStatusCode).to.eql(500);\r",
                  "    expect(jsonData.scenario1.result.transferState.lastError.mojaloopError.errorInformation.errorDescription).to.eql(\"Party not found\");\r",
                  "    expect(jsonData.scenario1.result.statusCode).to.eql(\"3204\");"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "add-users-als",
      "name": "Add Users to new Sims ; ALS registration (random MSISDN)",
      "meta": {
        "info": "Add Users to new Sims ; ALS registration (random MSISDN)"
      },
      "fileInfo": {
        "path": "hub/golden_path/settlement_cgs/newsetcgs.json",
        "labels": [
          "settlements"
        ]
      },
      "requests": [
        {
          "id": "GET-TESTFSP4FSP-repo-parties-b",
          "meta": {
            "info": "GET TESTFSP4FSP/repository/parties  before sim and ALS registration"
          },
          "description": "GET TESTFSP4FSP/repository/parties  before sim and ALS registration",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "get",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": "Successful-GET-req",
                "description": "Successful GET request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              }
            ]
          }
        },
        {
          "id": "testfsp4-Wallet-POST-parties-S",
          "meta": {
            "info": "[testfsp4, Wallet] POST /parties  {{SIM4_MSISDN}}"
          },
          "description": "[testfsp4, Wallet] POST /parties  {{SIM4_MSISDN}}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "displayName": "{$environment.fnameW2WGenerated} {$environment.lnameW2WGenerated}",
            "firstName": "{$environment.fnameW2WGenerated}",
            "middleName": "",
            "lastName": "{$environment.lnameW2WGenerated}",
            "dateOfBirth": "{$environment.dateOfBirthGenerated}",
            "idType": "MSISDN",
            "idValue": "{$environment.RandomNumberMsisdnW2W}",
            "extensionList": [
              {
                "key": "accountType",
                "value": "Wallet"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Successful-POST-req",
                "description": "Successful POST request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var randonumber= Math.floor(Math.random() * (999999999999 - 111111111111)) + 111111111111;\r",
                "\r",
                "environment.RandomNumberMsisdnW2W= randonumber;\r",
                "console.log('randomg MSISDN generated for registration of wallet extension type',environment.RandomNumberMsisdnW2W);\r",
                "\r",
                "var today = new Date();\r",
                "var dd = String(today.getDate()).padStart(2, '0');\r",
                "var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r",
                "var yyyy = today.getFullYear();\r",
                "\r",
                "\r",
                "//const moment = require('moment');\r",
                "//environment.dateOfBirthGenerated =moment().format(\"YYYY-MM-DD\");\r",
                "\r",
                "environment.dateOfBirthGenerated= yyyy + '-' + mm + '-' + dd;\r",
                "environment.fnameW2WGenerated= \"fsp4WalletFname{{$timestamp}}\";\r",
                "environment.lnameW2WGenerated=\"fsp4WalletLname{{$timestamp}}\";\r",
                "\r",
                "console.log(environment.dateOfBirthGenerated)\r",
                "console.log(environment.fnameW2WGenerated)\r",
                "console.log(environment.lnameW2WGenerated)"
              ]
            }
          }
        },
        {
          "id": "testfsp4-Wallet-POST-ALS_host-",
          "meta": {
            "info": "[testfsp4, Wallet] POST /ALS_host/participants {{SIM4_MSISDN}}"
          },
          "description": "[testfsp4, Wallet] POST /ALS_host/participants {{SIM4_MSISDN}}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$environment.RandomNumberMsisdnW2W}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$environment.RandomNumberMsisdnW2W}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Accept": "{$inputs.acceptParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$environment.SIM4_NAME}"
          },
          "scriptingEngine": "javascript",
          "body": {
            "fspId": "{$environment.SIM4_NAME}",
            "currency": "{$environment.cgscurrency}"
          },
          "tests": {
            "assertions": [
              {
                "id": "Resposne-code-202",
                "description": "Resposne code is 202",
                "exec": [
                  "expect(response.status).to.be.equal(202);"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "testfsp4-Bank-POST-parties-set",
          "description": "[testfsp4, Bank] POST /parties  {{settlementtestfsp4bankMSISDN}}",
          "params": {
            "Type": "",
            "ID": "",
            "SubId": ""
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "body": {
            "displayName": "{$environment.fnameB2BGenerated} {$environment.lnameB2BGenerated}",
            "firstName": "{$environment.fnameB2BGenerated}",
            "middleName": "",
            "lastName": "{$environment.lnameB2BGenerated}",
            "dateOfBirth": "{$environment.dateOfBirthGenerated}",
            "idType": "MSISDN",
            "idValue": "{$environment.RandomNumberMsisdnB2B}",
            "extensionList": [
              {
                "key": "accountType",
                "value": "Bank"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": "Successful-POST-req",
                "description": "Successful POST Request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "var randonumber1= Math.floor(Math.random() * (999999999999 - 111111111111)) + 111111111111;\r",
                "\r",
                "\r",
                "environment.RandomNumberMsisdnB2B=randonumber1;\r",
                "\r",
                "console.log('randomg MSISDN generated for registration of bank extension type',environment.RandomNumberMsisdnB2B);\r",
                "\r",
                "\r",
                "var today = new Date();\r",
                "var dd = String(today.getDate()).padStart(2, '0');\r",
                "var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r",
                "var yyyy = today.getFullYear();\r",
                "\r",
                "\r",
                "//const moment = require('moment');\r",
                "//environment.dateOfBirthGenerated =moment().format(\"YYYY-MM-DD\");\r",
                "\r",
                "environment.dateOfBirthGenerated= yyyy + '-' + mm + '-' + dd;\r",
                "environment.fnameB2BGenerated=\"fsp4BankFname{$timestamp}\";\r",
                "environment.lnameB2BGenerated=\"fsp4BankLname{$timestamp}\";\r",
                "\r",
                "console.log(environment.fnameB2BGenerated)\r",
                "console.log(environment.lnameB2BGenerated)\r",
                "console.log(environment.dateOfBirthGenerated)"
              ]
            }
          }
        },
        {
          "id": "testfsp4-Bank-POST-ALS_host-pa",
          "meta": {
            "info": "[testfsp4, Bank] POST /ALS_host/participants {{RandomNumberMsisdnB2B}}"
          },
          "description": "[testfsp4, Bank] POST /ALS_host/participants {{RandomNumberMsisdnB2B}}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$environment.RandomNumberMsisdnB2B}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$environment.RandomNumberMsisdnB2B}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Accept": "{$inputs.acceptParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$environment.SIM4_NAME}"
          },
          "body": {
            "fspId": "{$environment.SIM4_NAME}",
            "currency": "{$environment.cgscurrency}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Resposne-code-202",
                "description": "Resposne code 202",
                "exec": [
                  "expect(response.status).to.be.equal(202);"
                ]
              }
            ]
          },
          "ignoreCallbacks": true
        },
        {
          "id": "GET-TESTFSP4FSP-repo-parties-a",
          "meta": {
            "info": "GET TESTFSP4FSP/repository/parties    after registration sim and ALS"
          },
          "description": "GET TESTFSP4FSP/repository/parties    after registration sim and ALS",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "get",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": "Successful-GET-req",
                "description": "Successful GET request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              },
              {
                "id": "rsp-MSISDNs-just-registered-us",
                "description": "Response contains MSISDNs of just registered user with Wallet extension",
                "exec": [
                  "expect(environment.val2).to.equal(true);"
                ]
              },
              {
                "id": "rsp-MSISDNs-just-registered-us",
                "description": "Response contains MSISDNs of just registered user with Bank extension ",
                "exec": [
                  "expect(environment.val1).to.equal(true);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2000",
          "scripts": {
            "postRequest": {
              "exec": [
                "// is included environment.RandomNumberMsisdnW2W?",
                "environment.val1=false;",
                "environment.val2=false;",
                "",
                "",
                "res=response.body;",
                "",
                "console.log(environment.RandomNumberMsisdnB2B)",
                "console.log(environment.RandomNumberMsisdnW2W)",
                " for(var i in res) {",
                "   console.log(res[i].idValue);",
                "   ",
                "        if(String(res[i].idValue) === String(environment.RandomNumberMsisdnB2B) ) {",
                "          console.log(\"found val1\")",
                "          ",
                "environment.val1=true;",
                "",
                "        }",
                "             if(String(res[i].idValue) === String(environment.RandomNumberMsisdnW2W) ) {",
                "            console.log(\"found val2\")",
                "environment.val2=true;",
                "",
                "        }",
                "    }",
                "    ",
                "    console.log(environment.val1);",
                "    console.log(environment.val2);"
              ]
            }
          }
        }
      ]
    }
  ]
}