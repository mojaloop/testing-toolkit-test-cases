{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "Close current open window and store data for all closed windows",
      "meta": {
        "info": "Close current open window and store data for all closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close existing open window"
          },
          "description": "Close existing open window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "if(response.status === 400){",
                "  environment.isFailed = true;",
                "}",
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}",
                "await custom.sleep(5000);"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Get list of all Closed Windows"
          },
          "description": "Get list of all Closed Windows",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "CLOSED"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200/400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.closedWindowsData = response.body;"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "get settlements models"
          },
          "description": "get settlements models",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/settlementModels",
          "path": "/settlementModels",
          "method": "get",
          "scriptingEngine": "javascript",
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }"
              ]
            },
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "environment.settlementModels = { deferred: {}}",
                "for (const sm of jsonData) {",
                "  if (sm.settlementDelay === 'DEFERRED') {",
                "    if (sm.currency === null) {",
                "      environment.settlementModels.deferred.default = sm.name",
                "    } else {",
                "      environment.settlementModels.deferred[sm.currency] = sm.name",
                "    }",
                "  }",
                "}",
                "",
                "console.log(environment.settlementModels)"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Run deferred currency settlement model for all the closed windows",
      "meta": {
        "info": "Run deferred currency settlement model for all the closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Create Settlement for all Closed Windows in deferred settlement model for currency"
          },
          "description": "Create Settlement for all Closed Windows in deferred settlement model for currency",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "settlementModel": "{$requestVariables.settlementModel}",
            "reason": "TESTING",
            "settlementWindows": []
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200 or 400",
                "exec": [
                  "expect(response.status).to.be.oneOf([200,400])"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.settlementModel = environment.settlementModels.deferred[environment.currency];",
                "var settlementWindows = [];",
                "environment.closedWindowsData.forEach(closedWindow => {",
                "  let windowData = {",
                "    id: closedWindow.settlementWindowId",
                "  };",
                "  settlementWindows.push(windowData);",
                "});",
                "",
                "custom.appendRequestBody({",
                "  settlementWindows: settlementWindows",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "if(response.status === 400){",
                "  environment.isFailed = true",
                "}",
                "environment.settlementData = response.body",
                "environment.settlementId = response.body.id;",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Prepare Settlement"
          },
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.settlementData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers recorded for payer\",",
                "          state: \"PS_TRANSFERS_RECORDED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.preparedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Reserve Settlement"
          },
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.preparedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers reserved for payer\",",
                "          state: \"PS_TRANSFERS_RESERVED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.reservedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Commit Settlement"
          },
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.reservedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers committed for payer\",",
                "          state: \"PS_TRANSFERS_COMMITTED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.committedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Settle Settlement"
          },
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('SETTLED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "   custom.skipRequest();",
                " }",
                "",
                "var res = environment.committedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers settled for payer\",",
                "          state: \"SETTLED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "Run default deferred settlement model for all the closed windows",
      "meta": {
        "info": "Run default deferred settlement model for all the closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Create Settlement for Closed Window in default deferred settlement model "
          },
          "description": "Create Settlement for Closed Window in default deferred settlement model ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": 5,
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "{$environment.settlementModels.deferred.default}",
            "reason": "TESTING",
            "settlementWindows": []
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var settlementWindows = [];",
                "environment.closedWindowsData.forEach(closedWindow => {",
                "  let windowData = {",
                "    id: closedWindow.settlementWindowId",
                "  };",
                "  settlementWindows.push(windowData);",
                "});",
                "",
                "custom.appendRequestBody({",
                "  settlementWindows: settlementWindows",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "if(response.status === 400){",
                " environment.isFailed = true; ",
                "}",
                "",
                "environment.settlementData = response.body",
                "environment.settlementId = response.body.id;",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Prepare Settlement"
          },
          "description": "Prepare Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RECORDED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RECORDED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2500",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.settlementData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PENDING_SETTLEMENT\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers recorded for payer\",",
                "          state: \"PS_TRANSFERS_RECORDED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.preparedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "Reserve Settlement"
          },
          "description": "Reserve Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_RESERVED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_RESERVED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.preparedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RECORDED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers reserved for payer\",",
                "          state: \"PS_TRANSFERS_RESERVED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.reservedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "Commit Settlement"
          },
          "description": "Commit Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('PENDING_SETTLEMENT')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is PS_TRANSFERS_COMMITTED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('PS_TRANSFERS_COMMITTED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.reservedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_RESERVED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers committed for payer\",",
                "          state: \"PS_TRANSFERS_COMMITTED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.committedData = response.body;"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Settle Settlement"
          },
          "description": "Settle Settlement",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements/{id}",
          "path": "/settlements/{$environment.settlementId}",
          "method": "put",
          "params": {
            "id": "{$environment.settlementId}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "participants": []
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Overall state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Settlement Window state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal('SETTLED')",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Participants state is SETTLED",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "  response.body.participants.forEach(participant => {",
                  "      participant.accounts.forEach(account => {",
                  "          expect(account.state).to.equal('SETTLED')",
                  "      });",
                  "  });",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if(environment.isFailed === true) {",
                "  custom.skipRequest(); ",
                "}",
                "",
                "var res = environment.committedData;",
                "console.log('settlementId:',environment.settlementId);",
                "var i=0;",
                "var dfspsacc = [];",
                "var callbackpayer;",
                "",
                "environment.winstate = res.state;",
                "if(environment.winstate===\"PS_TRANSFERS_COMMITTED\"){",
                "",
                "res.participants.map(function (participant) {",
                "   participant.accounts.filter(account => account.netSettlementAmount.currency === environment.currency).forEach(curAccount => {",
                "",
                " dfspsacc[i] = {",
                "        dfspid: participant.id,",
                "        dfspaccid: curAccount.id ",
                "    }",
                "    i++;",
                "})",
                " })",
                "    ",
                "",
                "var participants = []",
                "for(let dfspsaccx of dfspsacc){",
                "  console.log('dfspid: ', dfspsaccx.dfspid)",
                "  console.log('dfspaccid: ',dfspsaccx.dfspaccid)",
                "  let participant = { ",
                "    id: dfspsaccx.dfspid,",
                "    accounts: [",
                "        {",
                "          id: dfspsaccx.dfspaccid,",
                "          reason: \"Transfers settled for payer\",",
                "          state: \"SETTLED\"",
                "        }",
                "      ]",
                "  };",
                "  participants.push(participant);",
                "}",
                "console.log('participants:',participants);",
                "",
                "custom.appendRequestBody({",
                "  participants: participants",
                "})",
                "",
                "}else{",
                "  console.log(\"Window is empty\")",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "Run Interchange fee, cgs settlement model for all the closed windows",
      "meta": {
        "info": "Run Interchange fee, cgs settlement model for all the closed windows"
      },
      "fileInfo": {
        "path": "run-settlements.json"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Create Settlement for Closed Window in Interchange fee, cgs settlement model "
          },
          "description": "Create Settlement for Closed Window in Interchange fee, cgs settlement model ",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.status).to.equal(200)",
                  "}"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(environment.winstate).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Number of associated windows should be 1",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows.length).to.equal(1)",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Associated Settlement Window ID is the correct one",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].id).to.equal(environment.closedWindowID)",
                  "}"
                ]
              },
              {
                "id": 5,
                "description": "Associated Settlement Window state should be PENDING_SETTLEMENT",
                "exec": [
                  "if(environment.WINDOWISEMPTY === false){",
                  "expect(response.body.settlementWindows[0].state).to.equal(\"PENDING_SETTLEMENT\")",
                  "}"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": []
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var settlementWindows = [];",
                "environment.closedWindowsData.forEach(closedWindow => {",
                "  let windowData = {",
                "    id: closedWindow.settlementWindowId",
                "  };",
                "  settlementWindows.push(windowData);",
                "});",
                "",
                "custom.appendRequestBody({",
                "  settlementWindows: settlementWindows",
                "});"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.settlementData = response.body",
                "environment.settlementId = response.body.id;",
                "if (response.body.errorInformation?.errorCode === \"3100\"){",
                "  ",
                "  environment.WINDOWISEMPTY = true;",
                "  console.log(\"Window is empty\");",
                "}else{",
                "  environment.WINDOWISEMPTY = false;",
                "}"
              ]
            }
          }
        }
      ]
    }
  ]
}