{
  "options": {},
  "name": "hub_golden_path_fx_feature_tests_happy_path_fx_tests",
  "test_cases": [
    {
      "id": "fx",
      "name": "HA/Happy Path FX E2E",
      "fileInfo": {
        "path": "hub/golden_path/fx/feature_tests/happy_path/fx_tests.json",
        "labels": [
          "HA-tests",
          "fx",
          "min-func-tests"
        ]
      },
      "meta": {
        "info": "FX Transfer"
      },
      "breakOnError": false,
      "requests": [
        {
          "id": "Add-part-ALS",
          "description": "Add Participant to ALS",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_1.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_1.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_1.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_1.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_1.1/trigger_templates"
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/{$inputs.toIdType}/{$inputs.FX_MSISDN_1}",
          "method": "post",
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.FX_MSISDN_1}"
          },
          "body": {
            "fspId": "{$inputs.FX_PAYEE_DFSP_ID}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "FSPIOP-Source": "{$inputs.FX_PAYEE_DFSP_ID}",
            "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}",
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "baggage": "errorExpect=ALS.1001",
            "Date": "{$function.generic.curDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          },
          "disabled": false
        },
        {
          "id": "Get-party-info",
          "description": "Get party info",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "additionalApi": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/parties/{Type}/{ID}",
          "path": "/parties/MSISDN/{$inputs.FX_MSISDN_1}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.FX_MSISDN_1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "{$inputs.contentTypeParties}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "Accept": "{$inputs.acceptParties}"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-party",
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-partyIdInfo-partyIdType-par",
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.FX_MSISDN_1}')"
                ]
              }
            ]
          }
        },
        {
          "id": "POST-fxQuotes",
          "description": "POST /fxQuotes",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxQuotes",
          "path": "/fxQuotes",
          "method": "post",
          "body": {
            "conversionRequestId": "{$function.generic.generateID}",
            "conversionTerms": {
              "conversionId": "{$function.generic.generateID}",
              "determiningTransferId": "{$function.generic.generateID}",
              "initiatingFsp": "{$inputs.FX_PAYER_DFSP_ID}",
              "counterPartyFsp": "{$inputs.FX_TESTFXP1_ID}",
              "amountType": "SEND",
              "sourceAmount": {
                "currency": "{$inputs.FX_SOURCE_CURRENCY}",
                "amount": "{$inputs.FX_SOURCE_AMOUNT}"
              },
              "targetAmount": {
                "currency": "{$inputs.FX_TARGET_CURRENCY}"
              },
              "expiration": "{$inputs.FX_EXPIRATION}"
            }
          },
          "headers": {
            "Accept": "{$inputs.acceptFxQuotes}",
            "Content-Type": "{$inputs.contentTypeFxQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "FSPIOP-Destination": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-conversionTerms",
                "description": "Callback body should contain conversionTerms",
                "exec": [
                  "expect(callback.body).to.have.property('conversionTerms')"
                ]
              },
              {
                "id": "cb-sourceAmount-amt-curr-req",
                "description": "Callback sourceAmount (amount & currency) to match the request",
                "exec": [
                  "expect(callback.body.conversionTerms.sourceAmount.currency).to.equal('{$request.body.conversionTerms.sourceAmount.currency}')",
                  "request.body.conversionTerms.sourceAmount.amount && expect(callback.body.conversionTerms.sourceAmount.amount).to.equal('{$request.body.conversionTerms.sourceAmount.amount}')"
                ]
              },
              {
                "id": "cb-content-type-fxQuotes",
                "description": "Callback content-type to be fxQuotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxQuotes+json')"
                ]
              },
              {
                "id": "cb-condition",
                "description": "Callback body should contain condition",
                "exec": [
                  "expect(callback.body).to.have.property('condition')"
                ]
              },
              {
                "id": "cb-target-amt",
                "description": "Callback body should contain target amount",
                "exec": [
                  "expect(callback.body.conversionTerms.targetAmount).to.have.property('amount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request Copy",
                "exec": [
                  "expect(callback.body.conversionTerms.sourceAmount.currency).to.equal('{$request.body.conversionTerms.sourceAmount.currency}')",
                  "expect(callback.body.conversionTerms.targetAmount.currency).to.equal('{$request.body.conversionTerms.targetAmount.currency}')"
                ]
              }
            ]
          }
        },
        {
          "id": "POST-quotes",
          "description": "POST /quotes",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "FSPIOP-Destination": "{$inputs.FX_PAYEE_DFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$prev.POST-fxQuotes.request.body.conversionTerms.determiningTransferId}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.FX_PAYER_DFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.Get-party-info.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.Get-party-info.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.Get-party-info.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "SEND",
            "amount": {
              "amount": "{$prev.POST-fxQuotes.callback.body.conversionTerms.targetAmount.amount}",
              "currency": "{$prev.POST-fxQuotes.callback.body.conversionTerms.targetAmount.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferAmount",
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": "cb-transferAmount-amt-curr-req",
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": "req-transactionType-scenario-t",
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": "req-transactionType-initiator-",
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": "req-transactionType-initiatorT",
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              }
            ]
          }
        },
        {
          "id": "Get-Accounts-Payer-BEFORE-fxTr",
          "description": "Get Accounts for Payer BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYER_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance before FxTransfer=${environment.payerPositionBalanceBeforeFxTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-Payee-BEFORE-fxTr",
          "description": "Get Accounts for Payee BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYEE_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYEE_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payeePositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payee Position Balance before FxTransfer=${environment.payeePositionBalanceBeforeFxTransfer}`);",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-FXP-BEFORE-fxTran",
          "description": "Get Accounts for FXP BEFORE fxTransfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`FXP Source Currency Position Balance before FxTransfer=${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer}`);",
                "",
                "console.log(`FXP Target Currency Position Balance before FxTransfer=${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer}`);"
              ]
            }
          }
        },
        {
          "id": "POST-fxTransfers",
          "description": "POST /fxTransfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxTransfers",
          "path": "/fxTransfers",
          "method": "post",
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptFxTransfers}",
            "Content-Type": "{$inputs.contentTypeFxTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "FSPIOP-Destination": "{$inputs.FX_TESTFXP1_ID}"
          },
          "body": {
            "commitRequestId": "{$prev.POST-fxQuotes.callback.body.conversionTerms.conversionId}",
            "determiningTransferId": "{$prev.POST-fxQuotes.request.body.conversionTerms.determiningTransferId}",
            "initiatingFsp": "{$inputs.FX_PAYER_DFSP_ID}",
            "counterPartyFsp": "{$inputs.FX_TESTFXP1_ID}",
            "amountType": "SEND",
            "sourceAmount": {
              "amount": "{$prev.POST-fxQuotes.callback.body.conversionTerms.sourceAmount.amount}",
              "currency": "{$prev.POST-fxQuotes.callback.body.conversionTerms.sourceAmount.currency}"
            },
            "targetAmount": {
              "amount": "{$prev.POST-fxQuotes.callback.body.conversionTerms.targetAmount.amount}",
              "currency": "{$prev.POST-fxQuotes.callback.body.conversionTerms.targetAmount.currency}"
            },
            "condition": "{$prev.POST-fxQuotes.callback.body.condition}",
            "expiration": "{$requestVariables.expiration}"
          },
          "scriptingEngine": "javascript",
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-length-not-zero",
                "description": "Callback length not zero",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-Payer-AFTER-fx-tr",
          "description": "Get Accounts for Payer AFTER fx transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYER_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "disabled": false,
          "tests": {
            "assertions": [
              {
                "id": "Payer-pos-changed",
                "description": "Payer position should be changed",
                "exec": [
                  "expect(environment.payerPositionBalanceAfterFxTransfer).to.not.equal(environment.payerPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payerPositionBalanceAfterFxTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payer Position Balance after Transfer=${environment.payerPositionBalanceAfterFxTransfer}`);"
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-FXP-AFTER-fx-tran",
          "description": "Get Accounts for FXP AFTER fx transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Payer-pos-changed",
                "description": "Payer position should be changed",
                "exec": [
                  "expect(environment.payerPositionBalanceAfterFxTransfer-environment.payerPositionBalanceBeforeFxTransfer).to.equal(+environment.FX_SOURCE_AMOUNT)"
                ]
              },
              {
                "id": "FXP-src-curr-pos-not-changed",
                "description": "FXP Source currency position should not be changed",
                "exec": [
                  "expect(environment.fxpSourceCurrencyPositionBalanceAfterTransfer).to.equal(environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer)"
                ]
              },
              {
                "id": "FXP-Target-curr-pos-not-change",
                "description": "FXP Target currency position should not be changed",
                "exec": [
                  "expect(environment.fxpTargetCurrencyPositionBalanceAfterTransfer).to.equal(environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "// console.log(`FXP Source Currency Position Balance after Transfer=${environment.fxpSourceCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "// console.log(`FXP Target Currency Position Balance after Transfer=${environment.fxpTargetCurrencyPositionBalanceAfterTransfer}`);",
                "",
                "console.log(`Payer Position ${environment.FX_SOURCE_CURRENCY} : ${environment.payerPositionBalanceBeforeFxTransfer} -> ${environment.payerPositionBalanceAfterTransfer} (${environment.payerPositionBalanceAfterTransfer - environment.payerPositionBalanceBeforeFxTransfer})`);",
                "console.log(`Payee Position ${environment.FX_TARGET_CURRENCY} : ${environment.payeePositionBalanceBeforeFxTransfer} -> ${environment.payeePositionBalanceAfterTransfer} (${environment.payeePositionBalanceAfterTransfer - environment.payeePositionBalanceBeforeFxTransfer})`);",
                "console.log(`FXP Source Currency ${environment.FX_SOURCE_CURRENCY} : ${environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer} -> ${environment.fxpSourceCurrencyPositionBalanceAfterTransfer} (${environment.fxpSourceCurrencyPositionBalanceAfterTransfer - environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer})`);",
                "console.log(`FXP Target Currency ${environment.FX_TARGET_CURRENCY} : ${environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer} -> ${environment.fxpTargetCurrencyPositionBalanceAfterTransfer} (${environment.fxpTargetCurrencyPositionBalanceAfterTransfer - environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer})`);"
              ]
            }
          }
        },
        {
          "id": "Get-FxTransfers",
          "description": "Get FxTransfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxTransfers/{ID}",
          "path": "/fxTransfers/{$prev.POST-fxTransfers.request.body.commitRequestId}",
          "method": "get",
          "params": {
            "ID": "{$prev.POST-fxTransfers.request.body.commitRequestId}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptFxTransfers}",
            "Content-Type": "{$inputs.contentTypeFxTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-conversionState-RESERVED",
                "description": "Callback conversionState to be RESERVED",
                "exec": [
                  "expect(callback.body.conversionState).to.equal('RESERVED')"
                ]
              },
              {
                "id": "cb-content-type-fxTransfers",
                "description": "Callback content-type to be fxTransfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxTransfers+json')"
                ]
              },
              {
                "id": "cb-fulfilment",
                "description": "Callback body should contain fulfilment",
                "exec": [
                  "expect(callback.body).to.have.property('fulfilment')"
                ]
              }
            ]
          }
        },
        {
          "id": "POST-trans",
          "description": "POST /transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "body": {
            "transferId": "{$prev.POST-fxQuotes.request.body.conversionTerms.determiningTransferId}",
            "payeeFsp": "{$inputs.FX_PAYEE_DFSP_ID}",
            "payerFsp": "{$inputs.FX_PAYER_DFSP_ID}",
            "amount": {
              "currency": "{$prev.POST-quotes.callback.body.transferAmount.currency}",
              "amount": "{$prev.POST-quotes.callback.body.transferAmount.amount}"
            },
            "ilpPacket": "{$prev.POST-quotes.callback.body.ilpPacket}",
            "condition": "{$prev.POST-quotes.callback.body.condition}",
            "expiration": "{$prev.POST-quotes.callback.body.expiration}"
          },
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}",
            "FSPIOP-Destination": "{$inputs.FX_PAYEE_DFSP_ID}"
          },
          "disabled": false,
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-transferState-COMMITTED",
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "req-src-quote-cb-dest",
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.POST-fxQuotes.callback.headers.fspiop-destination}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-FXP-AFTER-trans",
          "description": "Get Accounts for FXP AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_TESTFXP1_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_TESTFXP1_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "FXP-src-curr-pos-changed",
                "description": "FXP Source currency position should be changed",
                "exec": [
                  "expect(environment.fxpSourceCurrencyPositionBalanceAfterTransfer-environment.fxpSourceCurrencyPositionBalanceBeforeFxTransfer).to.equal(-environment.FX_SOURCE_AMOUNT)"
                ]
              },
              {
                "id": "FXP-Target-curr-pos-changed",
                "description": "FXP Target currency position should be changed",
                "exec": [
                  "expect(environment.fxpTargetCurrencyPositionBalanceAfterTransfer).to.not.equal(environment.fxpTargetCurrencyPositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_SOURCE_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpSourceCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.fxpTargetCurrencyPositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Accounts-Payee-AFTER-trans",
          "description": "Get Accounts for Payee AFTER transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin",
            "specFile": "spec_files/api_definitions/central_admin_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/central_admin_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/central_admin_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/central_admin_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/central_admin_1.0/trigger_templates"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.FX_PAYEE_DFSP_ID}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.FX_PAYEE_DFSP_ID}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Payee-pos-changed",
                "description": "Payee position should be changed",
                "exec": [
                  "expect(environment.payeePositionBalanceAfterTransfer).to.not.equal(environment.payeePositionBalanceBeforeFxTransfer)"
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "res.filter(account => account.currency === environment.FX_TARGET_CURRENCY).forEach(curAccount => {",
                "  if(curAccount.ledgerAccountType === \"POSITION\") {",
                "    environment.payeePositionBalanceAfterTransfer= curAccount.value",
                "  }",
                "})",
                "",
                "console.log(`Payee Position Balance after Transfer=${environment.payeePositionBalanceAfterTransfer}`);",
                "",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-FxTransfers-after-final-tr",
          "description": "Get FxTransfers after final transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "fspiop",
            "asynchronous": true,
            "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
          },
          "operationPath": "/fxTransfers/{ID}",
          "path": "/fxTransfers/{$prev.POST-fxTransfers.request.body.commitRequestId}",
          "method": "get",
          "params": {
            "ID": "{$prev.POST-fxTransfers.request.body.commitRequestId}"
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "headers": {
            "Accept": "{$inputs.acceptFxTransfers}",
            "Content-Type": "{$inputs.contentTypeFxTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.FX_PAYER_DFSP_ID}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-conversionState-RESERVED",
                "description": "Callback conversionState to be RESERVED",
                "exec": [
                  "expect(callback.body.conversionState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": "cb-content-type-fxTransfers",
                "description": "Callback content-type to be fxTransfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxTransfers+json')"
                ]
              },
              {
                "id": "cb-fulfilment",
                "description": "Callback body should contain fulfilment",
                "exec": [
                  "expect(callback.body).to.have.property('fulfilment')"
                ]
              }
            ]
          }
        }
      ],
      "options": {
        "executionOrder": 50
      }
    }
  ]
}