{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "Store settlement and position balances before-transfers",
      "meta": {
        "info": "Store settlement and position balances before-transfers"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "get balances for testfsp1"
          },
          "description": "get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp1SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp1PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "get balances for testfsp2"
          },
          "description": "get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp2SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp2PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "get balances for testfsp3"
          },
          "description": "get balances for testfsp3",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp3SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp3PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "get balances for testfsp4"
          },
          "description": "get balances for testfsp4",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp4PositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp4SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp4PositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "get balances for payerfsp"
          },
          "description": "get balances for payerfsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIMPAYER_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYER_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.payerfspSettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.payerfspPositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.payerfspSettleAccountBalanceBeforeTransfer);",
                "console.log(environment.payerfspPositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "get balances for payeefsp"
          },
          "description": "get balances for payeefsp",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.payeefsp}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.payeefsp}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.payeefspSettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.payeefspPositionAccountBalanceBeforeTransfer= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.payeefspSettleAccountBalanceBeforeTransfer);",
                "console.log(environment.payeefspPositionAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "Get Hub balances"
          },
          "description": "Get Hub balances",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/Hub/accounts",
          "method": "get",
          "params": {
            "name": "Hub"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;\r",
                "jsonData\r",
                "    .filter(account => account.currency === environment.cgscurrency)\r",
                "    .forEach(curAccount => {\r",
                "        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {\r",
                "            environment.hubReconciliationAccountBalanceBeforeTransfer=curAccount.value;\r",
                "        }\r",
                "        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {\r",
                "            environment.hubMultilateralAccountBalanceBeforeTransfer=curAccount.value;\r",
                "        }\r",
                "    })\r",
                "\r",
                "\r",
                "console.log(environment.hubReconciliationAccountBalanceBeforeTransfer);\r",
                "console.log(environment.hubMultilateralAccountBalanceBeforeTransfer);"
              ]
            }
          }
        },
        {
          "id": 8,
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Close window before tranfers",
      "meta": {
        "info": "Close window before tranfers"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200 or 400",
                "exec": [
                  "if(response.status === 400){",
                  "  expect(response.status).to.equal(400)",
                  "}",
                  "else{",
                  "  expect(response.status).to.equal(200)",
                  "}",
                  "",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "New window State should be OPEN",
                "exec": [
                  "",
                  " if (response.status === 400) {",
                  "   ",
                  "expect(response.body.errorInformation.errorCode).to.eql('3100');",
                  "expect(response.body.errorInformation.errorDescription).to.eql('Generic validation error - Window ' + environment.openWindowID + ' is empty');",
                  "}else{",
                  "  ",
                  "  ",
                  "  expect(environment.openWindowstate).to.equal(\"OPEN\");",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "var rcode = Number(response.status);",
                "//console.log(rcode);",
                "",
                "//if (rcode == 200){",
                "environment.closedWindowID= Number(environment.openWindowID);",
                "environment.openWindowstate=jsonData.state;",
                "",
                "console.log(environment.openWindowstate);",
                "console.log(environment.closedWindowID);",
                "//}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "get initial position: testfsp1, testfsp2, testfsp3, testfsp4",
      "meta": {
        "info": "get initial position: testfsp1, testfsp2, testfsp3, testfsp4"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "get balances for testfsp1"
          },
          "description": "get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                " /* if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }*/",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBefore= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "//console.log(environment.testfsp1SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp1PositionBefore);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "get balances for testfsp2"
          },
          "description": "get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                " /* if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }*/",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBefore= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "//console.log(environment.testfsp2SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp2PositionBefore);"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "get balances for testfsp3"
          },
          "description": "get balances for testfsp3",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                " /* if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }*/",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionBefore= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "//console.log(environment.testfsp3SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp3PositionBefore);"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "get balances for testfsp4"
          },
          "description": "get balances for testfsp4",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                " /* if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettleAccountBalanceBeforeTransfer= curAccount.value",
                "        }*/",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp4PositionBefore= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "//console.log(environment.testfsp4SettleAccountBalanceBeforeTransfer);",
                "console.log(environment.testfsp4PositionBefore);"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "[new sims]  transfers, positions CGS Window1 tests (OTC-649, OTC-645)",
      "meta": {
        "info": "[new sims]  transfers, positions CGS Window1 tests (OTC-649, OTC-645)"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "get balances for testfsp1"
          },
          "description": "get balances for testfsp1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceBefore= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceBefore= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp1SettlementBalanceBefore);",
                "console.log(environment.testfsp1PositionBalanceBefore);",
                "console.log(environment.testfsp1InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "get balances for testfsp2"
          },
          "description": "get balances for testfsp2",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBalanceBefore= curAccount.value",
                "        }    ",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp2InterchFeeBalanceBefore= curAccount.value",
                "        }     ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp2SettlementBalanceBefore);",
                "console.log(environment.testfsp2PositionBalanceBefore);",
                "console.log(environment.testfsp2InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "get balances for testfsp3"
          },
          "description": "get balances for testfsp3",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp3SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionBalanceBefore= curAccount.value",
                "        }     ",
                "",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp3InterchFeeBalanceBefore= curAccount.value",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp3SettlementBalanceBefore);",
                "console.log(environment.testfsp3PositionBalanceBefore);",
                "console.log(environment.testfsp3InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "get balances for testfsp4"
          },
          "description": "get balances for testfsp4",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp4SettlementBalanceBefore= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp3PositionBalanceBefore= curAccount.value",
                "        }     ",
                " if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp4InterchFeeBalanceBefore= curAccount.value",
                "        }  ",
                "",
                "})",
                "//})",
                "",
                "                      ",
                "console.log(environment.testfsp4SettlementBalanceBefore);",
                "console.log(environment.testfsp4PositionBalanceBefore);",
                "console.log(environment.testfsp4InterchFeeBalanceBefore);"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "testfsp3 Post scenario"
          },
          "description": "testfsp3 Post scenario",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            },
            "postRequest": {
              "exec": [
                "/*",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payeeRequest)",
                "  requestVariables.payerCallback = await websocket.getMessage('payerCallback', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payerCallback)",
                "  ",
                "  requestVariables.scenario1TransferId = response.body.scenario1.result.transferId",
                "  ",
                "  let url = `${environment.PAYEEFSP_SDK_TESTAPI_URL}/requests/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payeeSideTransferRequest = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "  ",
                "  url = `${environment.PAYERFSP_SDK_TESTAPI_URL}/callbacks/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payerSideTransferCallback = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "}*/"
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "[negative] POST /scenarios testfsp3  -> testfsp1 w2w SEND"
          },
          "description": "[negative] POST /scenarios testfsp3  -> testfsp1 w2w SEND",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idValue": "{$inputs.SIM3_MSISDN}"
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "result.statusCode == 400",
                "exec": [
                  "expect(response.body.scenario1.result.statusCode).to.equal(400)"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            },
            "postRequest": {
              "exec": [
                "/*",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payeeRequest)",
                "  requestVariables.payerCallback = await websocket.getMessage('payerCallback', environment.WS_ASSERTION_TIMEOUT)",
                "  console.log(requestVariables.payerCallback)",
                "  ",
                "  requestVariables.scenario1TransferId = response.body.scenario1.result.transferId",
                "  ",
                "  let url = `${environment.PAYEEFSP_SDK_TESTAPI_URL}/requests/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payeeSideTransferRequest = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "  ",
                "  url = `${environment.PAYERFSP_SDK_TESTAPI_URL}/callbacks/${response.body.scenario1.result.transferId}`",
                "  ",
                "  try {",
                "    const res = await axios.get(url)",
                "    requestVariables.payerSideTransferCallback = res.data",
                "  } catch (err) {",
                "    console.log(err)",
                "  }",
                "}*/"
              ]
            }
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "testfsp3/accounts (settlement, position) AFTER [15.00 TZS] transfer"
          },
          "description": "testfsp3/accounts (settlement, position) AFTER [15.00 TZS] transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changes by transfer amount ",
                "exec": [
                  "expect(environment.testfsp3SettlementBalanceAfterExpected).to.eql(environment.testfsp3SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": 3,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(environment.testfsp3PositionBalanceBefore).to.eql(environment.testfsp3PositionBalanceAfterTransfer1);"
                ]
              },
              {
                "id": 4,
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(environment.testfsp3_actual_interchange_transfer1)).to.eql(Number(environment.testfsp3_expected_interchange_transfer1));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;\r",
                "\r",
                "\r",
                "res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {\r",
                "    \r",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
                "  environment.testfsp3SettlementBalanceAfterTransfer1= curAccount.value\r",
                "        }\r",
                "        \r",
                "if(curAccount.ledgerAccountType === \"POSITION\") {\r",
                "  environment.testfsp3PositionBalanceAfterTransfer1= curAccount.value\r",
                "        }     \r",
                "\r",
                "  if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {\r",
                "  environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1= curAccount.value\r",
                "        }  \r",
                "\r",
                "})\r",
                "\r",
                "     /*                 \r",
                "console.log(environment.testfsp3SettlementBalanceAfterTransfer1);\r",
                "console.log(environment.testfsp3PositionBalanceAfterTransfer1);\r",
                "console.log(environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1);*/\r",
                "\r",
                "var transferAmount = 15;\r",
                "environment.testfsp3SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp3SettlementBalanceBefore) - Number.parseFloat(transferAmount);\r",
                "\r",
                "console.log(\"testfsp3SettlementBalanceAfterExpected  before fixed\"+environment.testfsp3SettlementBalanceAfterExpected)\r",
                "\r",
                "environment.testfsp3SettlementBalanceAfterExpected = environment.testfsp3SettlementBalanceAfterExpected.toFixed(2);\r",
                "\r",
                "console.log(\"testfsp3SettlementBalanceAfterExpected  after fixed\"+environment.testfsp3SettlementBalanceAfterExpected)\r",
                "\r",
                "\r",
                "environment.testfsp3SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp3SettlementBalanceAfterTransfer1).toFixed(2);\r",
                "\r",
                "console.log(\"testfsp3SettlementBalanceAfterActual  after fixed\"+environment.testfsp3SettlementBalanceAfterActual)\r",
                "\r",
                "console.log(environment.testfsp3SettlementBalanceAfterActual === environment.testfsp3SettlementBalanceAfterExpected)\r",
                "\r",
                "\r",
                "console.log('extracted testfsp3 settlement balance before transfers',environment.testfsp3SettlementBalanceBefore);\r",
                "console.log('extracted testfsp3 settlement balance after first transfer ACTUAL',environment.testfsp3SettlementBalanceAfterActual);\r",
                "console.log('calculated testfsp3 settlement balance before transfers '+environment.testfsp3SettlementBalanceBefore +' transfer amount -'+transferAmount, environment.testfsp3SettlementBalanceAfterExpected);\r",
                "\r",
                "console.log('test fsp3 positions account before',environment.testfsp3PositionBalanceBefore);\r",
                "console.log('test fsp3 positions account after',environment.testfsp3PositionBalanceAfterTransfer1);\r",
                "\r",
                "\r",
                "\r",
                "environment.testfsp3_actual_interchange_transfer1 =  Number.parseFloat(environment.testfsp3InterchFeeBalanceAfterTransfer1Transfer1) - Number.parseFloat(environment.testfsp3InterchFeeBalanceBefore)\r",
                "environment.testfsp3_actual_interchange_transfer1 = console.log(\"interchange transfer \"+environment.testfsp3_actual_interchange_transfer1)\r",
                "environment.testfsp3_actual_interchange_transfer1.toFixed(2);\r",
                "\r",
                "console.log(\"interchange fee actual  \"+environment.testfsp3_actual_interchange_transfer1);\r",
                "\r",
                "environment.testfsp3_expected_interchange_transfer1 = 0.09; \r",
                "\r",
                "console.log(\"interchange fee expected \"+environment.testfsp3_expected_interchange_transfer1);\r",
                "\r",
                "/*console.log(\"data1\"+ Number(environment.testfsp3PositionBalanceBefore))\r",
                "\r",
                "console.log(\"data2\"+Number(environment.testfsp3PositionBalanceAfterTransfer1))*/"
              ]
            }
          }
        },
        {
          "id": 8,
          "meta": {
            "info": "testfsp1/accounts (settlement, position) AFTER [15.00 TZS] transfer"
          },
          "description": "testfsp1/accounts (settlement, position) AFTER [15.00 TZS] transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changes by transfer amount",
                "exec": [
                  "expect(environment.testfsp1SettlementBalanceAfterExpected).to.eql(environment.testfsp1SettlementBalanceAfterActual);"
                ]
              },
              {
                "id": 3,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(environment.testfsp1PositionBalanceBefore).to.eql(environment.testfsp1PositionBalanceAfter);"
                ]
              },
              {
                "id": 4,
                "description": "check that interchange fee have been changed by",
                "exec": [
                  "expect(Number(environment.testfsp1_actual_interchange_transfer1)).to.eql(Number(environment.testfsp1_expected_interchange_transfer1));"
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "delay": "{$inputs.DELAY_CGS}",
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceAfter= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceAfter= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceAfterTransfer1= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "",
                "",
                " /*                     ",
                "console.log(environment.testfsp1SettlementBalanceAfter);",
                "console.log(environment.testfsp1PositionBalanceAfter);",
                "console.log(environment.testfsp1InterchFeeBalanceAfterTransfer1);*/",
                "",
                "var transferAmount = 15;",
                "environment.testfsp1SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp1SettlementBalanceBefore) + Number.parseFloat(transferAmount);",
                "",
                "console.log(\"testfsp1SettlementBalanceAfterExpected before fixed\" +environment.testfsp1SettlementBalanceAfterExpected)",
                "",
                "environment.testfsp1SettlementBalanceAfterExpected = environment.testfsp1SettlementBalanceAfterExpected.toFixed(2);",
                "console.log(\"testfsp1SettlementBalanceAfterExpected after fixed\"+environment.testfsp1SettlementBalanceAfterExpected)",
                "",
                "environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfter).toFixed(2);",
                "",
                "console.log(\"testfsp1SettlementBalanceAfterActual after fixed\"+environment.testfsp1SettlementBalanceAfterActual)",
                "",
                "",
                "console.log(environment.testfsp1SettlementBalanceAfterActual === environment.testfsp1SettlementBalanceAfterExpected)",
                "",
                "",
                "",
                "",
                "console.log('extracted testfsp1 settlement balance before transfers',environment.testfsp1SettlementBalanceBefore);",
                "console.log('extracted testfsp1 settlement balance after transfers ACTUAL',environment.testfsp1SettlementBalanceAfter);",
                "console.log('calculated testfsp1 settlement balance before transfers '+environment.testfsp1SettlementBalanceBefore +' transfer amount +'+transferAmount, environment.testfsp1SettlementBalanceAfterExpected);",
                "",
                "console.log('test fsp1 positions account before',environment.testfsp1PositionBalanceBefore);",
                "console.log('test fsp1 positions account after',environment.testfsp1PositionBalanceAfter);",
                "",
                "environment.testfsp1_actual_interchange_transfer1 =  Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer1) - Number.parseFloat(environment.testfsp1InterchFeeBalanceBefore)",
                "environment.testfsp1_actual_interchange_transfer1 = environment.testfsp1_actual_interchange_transfer1.toFixed(2);",
                "environment.testfsp1_expected_interchange_transfer1 = -0.09; "
              ]
            }
          }
        },
        {
          "id": 9,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/json"
          },
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2BankFname testfsp2Bankname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp2bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "87.88",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Transfer is COMMITED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 2,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        },
        {
          "id": 10,
          "meta": {
            "info": "testfsp2/accounts (settlement) after b2b transfer [87.88 TZS]"
          },
          "description": "testfsp2/accounts (settlement) after b2b transfer [87.88 TZS]",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "ignoreCallbacks": false,
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "check that interchange fee have been changed by+ environment.testfsp2_expected_interchange_b2b",
                "exec": [
                  "expect(Number(environment.testfsp2_actual_interchange_B2B)).to.eql(Number(environment.testfsp2_expected_interchange_b2b));"
                ]
              },
              {
                "id": 2,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettlementBalanceAfterB2B= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBalanceAfterB2B= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp2InterchFeeBalanceAfterB2B= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "",
                "environment.testfsp2_actual_interchange_B2B =  Number.parseFloat(environment.testfsp2InterchFeeBalanceAfterB2B) - Number.parseFloat(environment.testfsp2InterchFeeBalanceBefore)",
                "environment.testfsp2_actual_interchange_B2B = environment.testfsp2_actual_interchange_B2B.toFixed(2);",
                "",
                "console.log(\"actual value \"+environment.testfsp2_actual_interchange_B2B);",
                "",
                "environment.testfsp2_expected_interchange_b2b = 0.00; "
              ]
            }
          }
        },
        {
          "id": 11,
          "meta": {
            "info": "testfsp1/accounts (settlement, position) after b2b transfer [87.88 TZS]"
          },
          "description": "testfsp1/accounts (settlement, position) after b2b transfer [87.88 TZS]",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "check that interchange fee have been changed by ",
                "exec": [
                  "expect(Number(environment.testfsp1_actual_interchange_b2b_transfer)).to.eql(Number(environment.testfsp1_expected_interchange_b2b));"
                ]
              },
              {
                "id": 2,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceAfterB2B= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceAfterB2B= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceAfterB2B= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "",
                "",
                "environment.testfsp1_actual_interchange_b2b_transfer =  Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterB2B) - Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer1)",
                "",
                "environment.testfsp1_actual_interchange_b2b_transfer = environment.testfsp1_actual_interchange_b2b_transfer.toFixed(2);",
                "console.log(\"actual value \" +environment.testfsp1_actual_interchange_b2b_transfer);",
                "",
                "environment.testfsp1_expected_interchange_b2b = 0.00; "
              ]
            }
          }
        },
        {
          "id": 12,
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "headers": {
            "Content-Type": "application/json"
          },
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          }
        },
        {
          "id": 13,
          "meta": {
            "info": "testfsp1/accounts (settlement, position) after  [158.36 TZS] w2w transfer"
          },
          "description": "testfsp1/accounts (settlement, position) after  [158.36 TZS] w2w transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Check that settlement account value changes by transfer amount -",
                "exec": [
                  "expect(Number(environment.testfsp1SettlementBalanceAfterExpected)).to.eql(Number(environment.testfsp1SettlementBalanceAfterActual));"
                ]
              },
              {
                "id": 2,
                "description": "Check that position account value remains unchanged",
                "exec": [
                  "expect(Number(environment.testfsp1PositionBalanceAfter)).to.eql(Number(environment.testfsp1PositionBalanceAfterTransfer2));"
                ]
              },
              {
                "id": 3,
                "description": "check that interchange fee have been changed by ",
                "exec": [
                  "expect(Number(environment.testfsp1_actual_interchange_transfer2)).to.eql(Number(environment.testfsp1_expected_interchange_transfer2));"
                ]
              },
              {
                "id": 4,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceAfterTransfer2= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceAfterTransfer2= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceAfterTransfer2= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "",
                "",
                "var transferAmount = 158.36;",
                "environment.testfsp1SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp1SettlementBalanceAfterB2B) - Number.parseFloat(transferAmount);",
                "",
                " environment.testfsp1SettlementBalanceAfterExpected = environment.testfsp1SettlementBalanceAfterExpected.toFixed(2);",
                "",
                "environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfterTransfer2).toFixed(2);",
                "",
                "",
                "",
                "",
                "environment.testfsp1_actual_interchange_transfer2 =  Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer2) - Number.parseFloat(environment.testfsp1InterchFeeBalanceAfterTransfer1)",
                "",
                "environment.testfsp1_actual_interchange_transfer2 = environment.testfsp1_actual_interchange_transfer2.toFixed(2);",
                "environment.testfsp1_expected_interchange_transfer2 = 0.95; "
              ]
            }
          }
        },
        {
          "id": 14,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet 2020-06-26 11:52AM",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 2,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "Content-Type": "application/json"
          }
        },
        {
          "id": 15,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 2,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "Content-Type": "application/json"
          }
        },
        {
          "id": 16,
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "ignoreCallbacks": true,
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABCfdafar353533"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Transfer is COMMITTED",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 2,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "headers": {
            "Content-Type": "application/json"
          }
        },
        {
          "id": 18,
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "ignoreCallbacks": true,
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json"
          },
          "params": {
            "id": ""
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                " var jsonData = response.body;",
                "              ",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "",
                "console.log(environment.openWindowID);",
                "environment.openWindowstate=jsonData[0].state;"
              ]
            }
          }
        },
        {
          "id": 19,
          "meta": {
            "info": "Close existent window"
          },
          "description": "Close existent window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "ignoreCallbacks": true,
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        },
        {
          "id": 20,
          "meta": {
            "info": "Get testfsp1 position AFTER transfers"
          },
          "description": "Get testfsp1 position AFTER transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.currentvaluetestfsp1).to.eql(      environment.testfsp1PositionBefore);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "",
                "",
                "for (var i in jsonData) {",
                "    if (jsonData[i].currency === environment.cgscurrency && jsonData[i].ledgerAccountType === \"POSITION\") {",
                "      environment.currentvaluetestfsp1 =Number(jsonData[i].value)",
                "      ",
                "      ",
                "           ",
                "        ",
                "    }",
                "",
                "}",
                "",
                "console.log(\"current value testfsp1: \"+environment.currentvaluetestfsp1)",
                "",
                "console.log(\"before transfers value testfsp1: \"+environment.testfsp1PositionBefore)"
              ]
            }
          }
        },
        {
          "id": 21,
          "meta": {
            "info": "Get testfsp2 position AFTER transfers"
          },
          "description": "Get testfsp2 position AFTER transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.currentvaluetestfsp2).to.eql(      environment.testfsp2PositionBefore);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "",
                "",
                "for (var i in jsonData) {",
                "    if (jsonData[i].currency === environment.cgscurrency && jsonData[i].ledgerAccountType === \"POSITION\") {",
                "      environment.currentvaluetestfsp2 =Number(jsonData[i].value)",
                "      ",
                "      ",
                "           ",
                "        ",
                "    }",
                "",
                "}",
                "",
                "console.log(\"current value testfsp2: \"+environment.currentvaluetestfsp2)",
                "",
                "console.log(\"before transfers value testfsp2: \"+environment.testfsp2PositionBefore)"
              ]
            }
          }
        },
        {
          "id": 22,
          "meta": {
            "info": "Get testfsp3 position AFTER transfers"
          },
          "description": "Get testfsp3 position AFTER transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.currentvaluetestfsp3).to.eql(      environment.testfsp3PositionBefore);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "",
                "",
                "for (var i in jsonData) {",
                "    if (jsonData[i].currency === environment.cgscurrency && jsonData[i].ledgerAccountType === \"POSITION\") {",
                "      environment.currentvaluetestfsp3 =Number(jsonData[i].value)",
                "      ",
                "      ",
                "           ",
                "        ",
                "    }",
                "",
                "}",
                "",
                "console.log(\"current value testfsp3: \"+environment.currentvaluetestfsp3)",
                "",
                "console.log(\"before transfers value testfsp3: \"+environment.testfsp3PositionBefore)"
              ]
            }
          }
        },
        {
          "id": 23,
          "meta": {
            "info": "Get testfsp4 position AFTER transfers"
          },
          "description": "Get testfsp4 position AFTER transfers",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Position value should be the same after transfer",
                "exec": [
                  "expect(environment.currentvaluetestfsp4).to.eql(      environment.testfsp4PositionBefore);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "",
                "",
                "for (var i in jsonData) {",
                "    if (jsonData[i].currency === environment.cgscurrency && jsonData[i].ledgerAccountType === \"POSITION\") {",
                "      environment.currentvaluetestfsp4 =Number(jsonData[i].value)",
                "      ",
                "      ",
                "           ",
                "        ",
                "    }",
                "",
                "}",
                "",
                "console.log(\"current value testfsp4: \"+environment.currentvaluetestfsp4)",
                "",
                "console.log(\"before transfers value testfsp4: \"+environment.testfsp4PositionBefore)"
              ]
            }
          }
        },
        {
          "id": 24,
          "meta": {
            "info": "testfsp1 (settlement) accounts vals AFTER"
          },
          "description": "testfsp1 (settlement) accounts vals AFTER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM1_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM1_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Check that settlement account value changed after transfers",
                "exec": [
                  "expect(Number(environment.testfsp1SettlementBalanceAfterExpected)).to.eql(Number(environment.testfsp1SettlementBalanceAfterActual));"
                ]
              },
              {
                "id": 3,
                "description": "check agregates for interchange fees calculated correctly",
                "exec": [
                  "expect(environment.aggregates_fee).to.eql(environment.testfsp1_aggregate_interchange_fee_expected);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp1SettlementBalanceAfter= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp1PositionBalanceAfter= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp1InterchFeeBalanceAfter= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "",
                "",
                "environment.testfsp1SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp1SettlementBalanceBefore) + Number.parseFloat(15) - Number.parseFloat(158.36) + Number.parseFloat(87.88) + Number.parseFloat(211.15) + Number.parseFloat(14.21) + Number.parseFloat(150);",
                "environment.testfsp1SettlementBalanceAfterExpected = environment.testfsp1SettlementBalanceAfterExpected.toFixed(2);",
                "",
                "//@TODO adjust rounding balance (2 decimals || 3 decimals after the point).",
                "environment.testfsp1SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp1SettlementBalanceAfter).toFixed(2);",
                "",
                "",
                "",
                "environment.aggregates_fee = Number.parseFloat(environment.testfsp1InterchFeeBalanceAfter) - Number.parseFloat(environment.testfsp1InterchFeeBalanceBefore);",
                "environment.aggregates_fee = environment.aggregates_fee.toFixed(2);",
                "",
                "environment.testfsp1_aggregate_interchange_fee_expected = -1.40;",
                "",
                "environment.testfsp1_aggregate_interchange_fee_expected = Number.parseFloat(environment.testfsp1_aggregate_interchange_fee_expected).toFixed(2);"
              ]
            }
          }
        },
        {
          "id": 25,
          "meta": {
            "info": "testfsp2 (settlement) accounts vals AFTER"
          },
          "description": "testfsp2 (settlement) accounts vals AFTER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM2_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM2_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "delay": "{$inputs.DELAY_CGS}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 3,
                "description": "check agregates for interchange fees calculated correctly",
                "exec": [
                  "expect(environment.aggregates_fee).to.eql(Number.parseFloat(1.36).toFixed(2));"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "var res = response.body;",
                "",
                "",
                "   res.filter(account => account.currency === environment.cgscurrency).forEach(curAccount => {",
                "    ",
                "  if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
                "  environment.testfsp2SettlementBalanceAfter= curAccount.value",
                "        }",
                "        ",
                "    if(curAccount.ledgerAccountType === \"POSITION\") {",
                "  environment.testfsp2PositionBalanceAfter= curAccount.value",
                "        }  ",
                "        ",
                "          if(curAccount.ledgerAccountType === \"INTERCHANGE_FEE\") {",
                "  environment.testfsp2InterchFeeBalanceAfter= curAccount.value",
                "        }     ",
                "",
                "",
                "})",
                "",
                "",
                "environment.testfsp2SettlementBalanceAfterExpected = Number.parseFloat(environment.testfsp2SettlementBalanceBefore) + Number.parseFloat(87.88) + Number.parseFloat(211.15) + Number.parseFloat(14.21);",
                "// testfsp2SettlementBalanceAfterExpected = testfsp2SettlementBalanceAfterExpected.toFixed(2);",
                "",
                "environment.testfsp2SettlementBalanceAfterActual = Number.parseFloat(environment.testfsp2SettlementBalanceAfter);",
                "",
                "",
                "environment.aggregates_fee = Number.parseFloat(environment.testfsp2InterchFeeBalanceAfter)-Number.parseFloat(environment.testfsp2InterchFeeBalanceBefore);",
                "environment.aggregates_fee = environment.aggregates_fee.toFixed(2);",
                "",
                "console.log(\"environment.aggregates_fee \"+environment.aggregates_fee);"
              ]
            }
          }
        },
        {
          "id": 26,
          "meta": {
            "info": "testfsp3 (settlement) accounts vals AFTER"
          },
          "description": "testfsp3 (settlement) accounts vals AFTER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM3_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM3_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 27,
          "meta": {
            "info": "testfsp4 (settlement) accounts vals AFTER"
          },
          "description": "testfsp4 (settlement) accounts vals AFTER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/accounts",
          "path": "/participants/{$inputs.SIM4_NAME}/accounts",
          "method": "get",
          "params": {
            "name": "{$inputs.SIM4_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 28,
          "meta": {
            "info": "Create Interchange-Fee Settlement for a single Window"
          },
          "description": "Create Interchange-Fee Settlement for a single Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.openWindowID}"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "expect(response.body.state).to.eql('PENDING_SETTLEMENT')"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "postRequest": {
              "exec": [
                "environment.settlementId= response.body.id",
                "",
                "console.log(environment.settlementId);"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 5,
      "name": "Close any window before transfers",
      "meta": {
        "info": "Close any window before transfers"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": []
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "[new sims] new transfers window1",
      "meta": {
        "info": "[new sims] new transfers window1"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp4 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 b2b SEND [87.88 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2BankFname testfsp2Bankname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp2bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "87.88",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w RECEIVE [150 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 7,
      "name": "Close any window1",
      "meta": {
        "info": "Close any window1"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 8,
      "name": "[new sims] new transfers window2",
      "meta": {
        "info": "[new sims] new transfers window2"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp4 w2w SEND [45.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp4 w2w SEND [45.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "45",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp2 w2w SEND [34.55 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp2 w2w SEND [34.55 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "34.55",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp2 b2b SEND [22.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp2 b2b SEND [22.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3BankFname testfsp3Bankname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "22",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [788.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [788.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "788",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [22.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [22.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "22",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [333.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [333.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "333",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 9,
      "name": "Close any window2",
      "meta": {
        "info": "Close any window2"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 10,
      "name": "[new sims] new transfers window3",
      "meta": {
        "info": "[new sims] new transfers window3"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [56.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [56.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "56",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [44.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w SEND [44.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "44",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp2 b2b SEND [89.00 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp2 b2b SEND [89.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1BankFname testfsp1BankLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp2bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "89",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [99.00 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [99.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "99",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [110.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [110.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "110",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 11,
      "name": "Close any window3",
      "meta": {
        "info": "Close any window3"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 12,
      "name": "[new sims] new transfers window4",
      "meta": {
        "info": "[new sims] new transfers window4"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w SEND [15.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "POST /scenarios testfsp1 -> testfsp2 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp1 -> testfsp2 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp4 b2b SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp4 b2b SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1BankFname testfsp1BankLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp4bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp2 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp2 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1Fname testfsp1Lname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [150.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp1 w2w RECEIVE [150.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 13,
      "name": "Close any window4",
      "meta": {
        "info": "Close any window4"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 14,
      "name": "[new sims] new transfers window5",
      "meta": {
        "info": "[new sims] new transfers window5"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp3 w2w SEND [15.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp3 w2w SEND [15.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [158.36 TZS]"
          },
          "description": "POST /scenarios testfsp4  -> testfsp1 w2w SEND [158.36 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp4WalletFname testfsp4WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "158.36",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "POST /scenarios testfsp1  -> testfsp3 b2b SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp1  -> testfsp3 b2b SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP1_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp1BankFname testfsp1BankLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp1bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestfsp3bankMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Bank"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [211.15 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp2 w2w SEND [211.15 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "211.15",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-26 11:52AM",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]"
          },
          "description": "POST /scenarios testfsp3  -> testfsp1 w2w RECEIVE [14.21 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP3_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp3WalletFname testfsp3WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM3_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp1MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "14.21",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "POST /scenarios testfsp2  -> testfsp4 w2w RECEIVE [150.00 TZS]"
          },
          "description": "POST /scenarios testfsp2  -> testfsp4 w2w RECEIVE [150.00 TZS]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.TESTFSP2_BACKEND_TESTAPI_URL}",
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "testfsp2WalletFname testfsp2WalletLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.testfsp2MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.SIM4_MSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "amountType": "RECEIVE",
                "currency": "{$inputs.cgscurrency}",
                "amount": "150",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "from testfsp2 to testfsp1, wallet-to-wallet RECEIVE",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 55,
                "description": "Transfer state is 'COMMITTED'",
                "exec": [
                  "expect(response.body.scenario2.result.fulfil.transferState).to.equal('COMMITTED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "/*if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.SIMPAYEE_MSISDN}', 'payeeRequest')",
                "  ",
                "  await websocket.connect(environment.PAYERFSP_SDK_TESTAPI_WS_URL + '/callbacks/{$inputs.SIMPAYEE_MSISDN}', 'payerCallback')",
                "}",
                "*/",
                "requestVariables.expectedPayeeFirstName = \"PayeeFirst\"",
                "requestVariables.expectedPayeeLastName = \"PayeeLast\"",
                "requestVariables.expectedPayeeDOB = \"2010-10-10\"",
                "requestVariables.payerName = \"PayerFirst PayerLast\""
              ]
            }
          }
        }
      ]
    },
    {
      "id": 15,
      "name": "Close any window5",
      "meta": {
        "info": "Close any window5"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "Get Existing Open Window1"
          },
          "description": "Get Existing Open Window1",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "State should be OPEN",
                "exec": [
                  "expect(environment.openWindowstate).to.equal(\"OPEN\")"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "var jsonData = response.body;",
                "//console.log(jsonData.state);",
                "",
                "environment.openWindowID=jsonData[0].settlementWindowId;",
                "environment.openWindowstate=jsonData[0].state;",
                "",
                "console.log(environment.openWindowID);"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Close Existing Window"
          },
          "description": "Close Existing Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows/{id}",
          "path": "/settlementWindows/{$environment.openWindowID}",
          "method": "post",
          "params": {
            "id": "{$environment.openWindowID}"
          },
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "state": "CLOSED",
            "reason": "string"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 16,
      "name": "Create Settlement for previously  closed 5 windows",
      "meta": {
        "info": "Create Settlement for previously  closed 5 windows"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "Get Existing Open Window"
          },
          "description": "Get Existing Open Window",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlementWindows",
          "path": "/settlementWindows",
          "method": "get",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "queryParams": {
            "state": "OPEN"
          },
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 2,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 1,
                "description": "State should be open",
                "exec": [
                  "expect(response.body[0].state).to.eql('OPEN');"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "\r",
                " var jsonData = response.body;\r",
                "\r",
                "\r",
                "environment.openWindowID=jsonData[0].settlementWindowId;\r",
                "\r",
                " \r",
                "    environment.openWindowID=jsonData[0].settlementWindowId;\r",
                "    environment.closed_win_prev_prev_prev_prev_prev= Number(jsonData[0].settlementWindowId)-5; \r",
                "    environment.closed_win_prev_prev_prev_prev= Number(jsonData[0].settlementWindowId)-4;  \r",
                "    environment.closed_win_prev_prev_prev=Number(jsonData[0].settlementWindowId)-3;  \r",
                "    environment.closed_win_prev_prev=Number(jsonData[0].settlementWindowId)-2;\r",
                "    environment.closed_win_prev=Number(jsonData[0].settlementWindowId)-1;\r",
                "    console.log('openWindowID '+environment.openWindowID);\r",
                "    console.log('closed window prev prev '+environment.closed_win_prev_prev)\r",
                "    console.log('closed window prev '+environment.closed_win_prev)"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "Create Settlement for all 5 Closed Windows (INTERCHANGE FEE)"
          },
          "description": "Create Settlement for all 5 Closed Windows (INTERCHANGE FEE)",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closed_win_prev_prev_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev}"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Settlement State should be PENDING_SETTLEMENT",
                "exec": [
                  "  expect(response.body.state).to.eql('PENDING_SETTLEMENT');"
                ]
              },
              {
                "id": 3,
                "description": "first participant netSettlementAmount == -5.37 TZS",
                "exec": [
                  "expect(response.body.participants[0].accounts[0].netSettlementAmount.amount).to.eql(-5.37);"
                ]
              },
              {
                "id": 4,
                "description": "second participant netSettlementAmount == -2.26 TZS",
                "exec": [
                  "expect(response.body.participants[1].accounts[0].netSettlementAmount.amount).to.eql(-2.26);"
                ]
              },
              {
                "id": 5,
                "description": "third participant netSettlementAmount == 7.10 TZS",
                "exec": [
                  "expect(response.body.participants[2].accounts[0].netSettlementAmount.amount).to.eql(7.10);"
                ]
              },
              {
                "id": 6,
                "description": "fourth participant netSettlementAmount == 0.53 TZS",
                "exec": [
                  "expect(response.body.participants[3].accounts[0].netSettlementAmount.amount).to.eql(0.53);"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 17,
      "name": "negative requests",
      "meta": {
        "info": "negative requests"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "NEGATIVE Create Settlement for all Windows Second time"
          },
          "description": "NEGATIVE Create Settlement for all Windows Second time",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 2,
            "type": "settlements"
          },
          "operationPath": "/settlements",
          "path": "/settlements",
          "method": "post",
          "url": "{$inputs.HOST_CENTRAL_SETTLEMENT}",
          "headers": {
            "Content-Type": "application/json",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "settlementModel": "InterchangeFee",
            "reason": "TESTING",
            "settlementWindows": [
              {
                "id": "{$environment.closed_win_prev_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev_prev}"
              },
              {
                "id": "{$environment.closed_win_prev}"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Resposne code is 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              },
              {
                "id": 2,
                "description": "Response contains 'Generic validation error",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.include(\"Generic validation error\");"
                ]
              },
              {
                "id": 3,
                "description": "errorCode == 3100",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.eql(\"3100\");"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "NEGATIVE POST /scenarios payerfsp -> NON-registered fsp party"
          },
          "description": "NEGATIVE POST /scenarios payerfsp -> NON-registered fsp party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/scenarios",
          "path": "/scenarios",
          "method": "post",
          "url": "{$inputs.PAYERFSP_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": [
            {
              "name": "scenario1",
              "operation": "postTransfers",
              "body": {
                "from": {
                  "displayName": "payerfspFname payerfspLname",
                  "idType": "MSISDN",
                  "idValue": "{$inputs.payerMSISDN}",
                  "extensionList": [
                    {
                      "key": "accountType",
                      "value": "Wallet"
                    }
                  ]
                },
                "to": {
                  "idType": "MSISDN",
                  "idValue": "{$inputs.settlementtestNonExistingMSISDN}"
                },
                "amountType": "SEND",
                "currency": "{$inputs.cgscurrency}",
                "amount": "10",
                "transactionType": "TRANSFER",
                "initiatorType": "CONSUMER",
                "note": "test payment 2020-06-10 11:02pm",
                "homeTransactionId": "123ABC"
              }
            },
            {
              "name": "scenario2",
              "operation": "putTransfers",
              "params": {
                "transferId": "{{scenario1.result.transferId}}"
              },
              "body": {
                "acceptQuote": true
              }
            }
          ],
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "party not found with result.statusCode==3204 && lastError.httpStatusCOde==500",
                "exec": [
                  " var jsonData = response.body;\r",
                  "    expect(jsonData.scenario1.result.transferState.currentState).to.eql(\"ERROR_OCCURRED\");\r",
                  "    expect(jsonData.scenario1.result.transferState.lastError.httpStatusCode).to.eql(500);\r",
                  "    expect(jsonData.scenario1.result.transferState.lastError.mojaloopError.errorInformation.errorDescription).to.eql(\"Party not found\");\r",
                  "    expect(jsonData.scenario1.result.statusCode).to.eql(\"3204\");"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": 18,
      "name": "Add Users to new Sims ; ALS registration (random MSISDN)",
      "meta": {
        "info": "Add Users to new Sims ; ALS registration (random MSISDN)"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "GET TESTFSP4FSP/repository/parties  before sim and ALS registration"
          },
          "description": "GET TESTFSP4FSP/repository/parties  before sim and ALS registration",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "get",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successful GET request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "[testfsp4, Wallet] POST /parties  {{SIM4_MSISDN}}"
          },
          "description": "[testfsp4, Wallet] POST /parties  {{SIM4_MSISDN}}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "displayName": "{$environment.fnameW2WGenerated} {$environment.lnameW2WGenerated}",
            "firstName": "{$environment.fnameW2WGenerated}",
            "middleName": "",
            "lastName": "{$environment.lnameW2WGenerated}",
            "dateOfBirth": "{$environment.dateOfBirthGenerated}",
            "idType": "MSISDN",
            "idValue": "{$environment.RandomNumberMsisdnW2W}",
            "extensionList": [
              {
                "key": "accountType",
                "value": "Wallet"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successful POST request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "var randonumber= Math.floor(Math.random() * (999999999999 - 111111111111)) + 111111111111;\r",
                "\r",
                "environment.RandomNumberMsisdnW2W= randonumber;\r",
                "console.log('randomg MSISDN generated for registration of wallet extension type',environment.RandomNumberMsisdnW2W);\r",
                "\r",
                "var today = new Date();\r",
                "var dd = String(today.getDate()).padStart(2, '0');\r",
                "var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r",
                "var yyyy = today.getFullYear();\r",
                "\r",
                "\r",
                "//const moment = require('moment');\r",
                "//environment.dateOfBirthGenerated =moment().format(\"YYYY-MM-DD\");\r",
                "\r",
                "environment.dateOfBirthGenerated= yyyy + '-' + mm + '-' + dd;\r",
                "environment.fnameW2WGenerated= \"fsp4WalletFname{{$timestamp}}\";\r",
                "environment.lnameW2WGenerated=\"fsp4WalletLname{{$timestamp}}\";\r",
                "\r",
                "console.log(environment.dateOfBirthGenerated)\r",
                "console.log(environment.fnameW2WGenerated)\r",
                "console.log(environment.lnameW2WGenerated)"
              ]
            }
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "[testfsp4, Wallet] POST /ALS_host/participants {{SIM4_MSISDN}}"
          },
          "description": "[testfsp4, Wallet] POST /ALS_host/participants {{SIM4_MSISDN}}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$environment.RandomNumberMsisdnW2W}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$environment.RandomNumberMsisdnW2W}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
            "Accept": "application/vnd.interoperability.participants+json;version=1",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$environment.SIM4_NAME}"
          },
          "scriptingEngine": "javascript",
          "body": {
            "fspId": "{$environment.SIM4_NAME}",
            "currency": "{$environment.cgscurrency}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Resposne code is 202",
                "exec": [
                  "expect(response.status).to.be.equal(202);"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "[testfsp4, Bank] POST /parties  {{settlementtestfsp4bankMSISDN}}",
          "params": {
            "Type": "",
            "ID": "",
            "SubId": ""
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "post",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "scriptingEngine": "javascript",
          "body": {
            "displayName": "{$environment.fnameB2BGenerated} {$environment.lnameB2BGenerated}",
            "firstName": "{$environment.fnameB2BGenerated}",
            "middleName": "",
            "lastName": "{$environment.lnameB2BGenerated}",
            "dateOfBirth": "{$environment.dateOfBirthGenerated}",
            "idType": "MSISDN",
            "idValue": "{$environment.RandomNumberMsisdnB2B}",
            "extensionList": [
              {
                "key": "accountType",
                "value": "Bank"
              }
            ]
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successful POST Request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              }
            ]
          },
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "var randonumber1= Math.floor(Math.random() * (999999999999 - 111111111111)) + 111111111111;\r",
                "\r",
                "\r",
                "environment.RandomNumberMsisdnB2B=randonumber1;\r",
                "\r",
                "console.log('randomg MSISDN generated for registration of bank extension type',environment.RandomNumberMsisdnB2B);\r",
                "\r",
                "\r",
                "var today = new Date();\r",
                "var dd = String(today.getDate()).padStart(2, '0');\r",
                "var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r",
                "var yyyy = today.getFullYear();\r",
                "\r",
                "\r",
                "//const moment = require('moment');\r",
                "//environment.dateOfBirthGenerated =moment().format(\"YYYY-MM-DD\");\r",
                "\r",
                "environment.dateOfBirthGenerated= yyyy + '-' + mm + '-' + dd;\r",
                "environment.fnameB2BGenerated=\"fsp4BankFname{$timestamp}\";\r",
                "environment.lnameB2BGenerated=\"fsp4BankLname{$timestamp}\";\r",
                "\r",
                "console.log(environment.fnameB2BGenerated)\r",
                "console.log(environment.lnameB2BGenerated)\r",
                "console.log(environment.dateOfBirthGenerated)"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "[testfsp4, Bank] POST /ALS_host/participants {{RandomNumberMsisdnB2B}}"
          },
          "description": "[testfsp4, Bank] POST /ALS_host/participants {{RandomNumberMsisdnB2B}}",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$environment.RandomNumberMsisdnB2B}",
          "method": "post",
          "params": {
            "Type": "MSISDN",
            "ID": "{$environment.RandomNumberMsisdnB2B}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
            "Accept": "application/vnd.interoperability.participants+json;version=1",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$environment.SIM4_NAME}"
          },
          "body": {
            "fspId": "{$environment.SIM4_NAME}",
            "currency": "{$environment.cgscurrency}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Resposne code 202",
                "exec": [
                  "expect(response.status).to.be.equal(202);"
                ]
              }
            ]
          },
          "ignoreCallbacks": true
        },
        {
          "id": 8,
          "meta": {
            "info": "GET TESTFSP4FSP/repository/parties    after registration sim and ALS"
          },
          "description": "GET TESTFSP4FSP/repository/parties    after registration sim and ALS",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 0,
            "type": "mojaloop_simulator"
          },
          "operationPath": "/repository/parties",
          "path": "/repository/parties",
          "method": "get",
          "url": "{$inputs.TESTFSP4_BACKEND_TESTAPI_URL}",
          "headers": {
            "Content-Type": "application/json"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Successful GET request",
                "exec": [
                  "expect(response.status).to.be.oneOf([204,200, 500]);"
                ]
              },
              {
                "id": 2,
                "description": "Response contains MSISDNs of just registered user with Wallet extension",
                "exec": [
                  "expect(environment.val2).to.equal(true);"
                ]
              },
              {
                "id": 3,
                "description": "Response contains MSISDNs of just registered user with Bank extension ",
                "exec": [
                  "expect(environment.val1).to.equal(true);"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "delay": "2000",
          "scripts": {
            "postRequest": {
              "exec": [
                "// is included environment.RandomNumberMsisdnW2W?",
                "environment.val1=false;",
                "environment.val2=false;",
                "",
                "",
                "res=response.body;",
                "",
                "console.log(environment.RandomNumberMsisdnB2B)",
                "console.log(environment.RandomNumberMsisdnW2W)",
                " for(var i in res) {",
                "   console.log(res[i].idValue);",
                "   ",
                "        if(String(res[i].idValue) === String(environment.RandomNumberMsisdnB2B) ) {",
                "          console.log(\"found val1\")",
                "          ",
                "environment.val1=true;",
                "",
                "        }",
                "             if(String(res[i].idValue) === String(environment.RandomNumberMsisdnW2W) ) {",
                "            console.log(\"found val2\")",
                "environment.val2=true;",
                "",
                "        }",
                "    }",
                "    ",
                "    console.log(environment.val1);",
                "    console.log(environment.val2);"
              ]
            }
          }
        }
      ]
    }
  ]
}