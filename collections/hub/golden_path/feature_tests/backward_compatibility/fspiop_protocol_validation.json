{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "fspiop_protocol_validation - Account-Lookup-Service",
      "meta": {
        "info": "This is a test to validate that ACCEPT and CONTENT-TYPE headers are correctly validated for both legacy (Old) and not\n-supported (NotSupported)"
      },
      "fileInfo": {
        "path": "hub/golden_path/feature_tests/backward_compatibility/fspiop_protocol_validation.json"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "This request allows us to get the personal information associated with a MSISDN and the FSP associated to it."
          },
          "description": "Get party information",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.acceptPartiesOld}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypePartiesOld}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": 5,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')"
                ]
              },
              {
                "id": 8,
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              },
              {
                "id": 9,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                  "}"
                ]
              },
              {
                "id": 10,
                "description": "Payee Content-Type",
                "exec": [
                  "// TODO investigate how to properly test this as it requires SIMs to be configured for 1.0",
                  "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "//   expect(environment.payeeRequest.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')",
                  "// }"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.toIdValue}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": 4,
          "description": "Get party information",
          "meta": {
            "info": "This request allows us to get the personal information associated with a MSISDN and the FSP associated to it."
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.acceptPartiesNotSupported}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypeParties}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText to be 'Not Acceptable'",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - The Client requested an unsupported version')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.toIdValue}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Get party information",
          "meta": {
            "info": "This request allows us to get the personal information associated with a MSISDN and the FSP associated to it."
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.acceptParties}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypePartiesNotSupported}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText to be 'Not Acceptable'",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - Client supplied a protocol version which is not supported by the server')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "scriptingEngine": "javascript",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.toIdValue}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "fspiop_protocol_validation - Quoting-Service",
      "meta": {
        "info": "This is a test to validate that ACCEPT and CONTENT-TYPE headers are correctly validated for both legacy (Old) and not\n-supported (NotSupported)"
      },
      "fileInfo": {
        "path": "hub/golden_path/feature_tests/backward_compatibility/fspiop_protocol_validation.json"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "This request allows us to get the personal information associated with a MSISDN and the FSP associated to it."
          },
          "description": "Get party information",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.acceptParties}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypeParties}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": 5,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')"
                ]
              },
              {
                "id": 8,
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              },
              {
                "id": 9,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                  "}"
                ]
              },
              {
                "id": 10,
                "description": "Payee Content-Type",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(environment.payeeRequest.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')",
                  "}"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "// NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.toIdValue}', 'payeeRequest')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "// NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API instead until it can be resolved.",
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "// }",
                "",
                "environment.payeeRequest = (await axios.get(environment.PAYEEFSP_SDK_TESTAPI_URL + '/requests/{$inputs.toIdValue}')).data"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "This request allows us to send a request for Quote (payerfsp to payeefsp), for the calculation of possible fees and FSP commission involved in performing an interoperable financial transaction."
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotesOld}",
            "Content-Type": "{$inputs.contentTypeQuotesOld}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.3.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.3.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.3.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              },
              {
                "id": 12,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                  "}"
                ]
              },
              {
                "id": 13,
                "description": "Payee Content-Type",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.headers['content-type']).to.equal(request.headers['Content-Type'])",
                  "}"
                ]
              },
              {
                "id": 14,
                "description": "Payee Body QuoteId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.data['quoteId']).to.equal('{$request.body.quoteId}')",
                  "}"
                ]
              },
              {
                "id": 15,
                "description": "Payee Body TransactionId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.data['transactionId']).to.equal('{$request.body.transactionId}')",
                  "}"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scripts": {
            "preRequest": {
              "exec": [
                "// NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API on the postRequest instead until it can be resolved.",
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "// NOTE: This has been commented out due to the WS issue https://github.com/mojaloop/project/issues/3164, with a work-around to call the HTTP equivalent API instead until it can be resolved.",
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "// }",
                "",
                "environment.payeeRequest = (await axios.get(environment.PAYEEFSP_SDK_TESTAPI_URL + '/requests/{$request.body.quoteId}')).data"
              ]
            }
          }
        },
        {
          "id": 5,
          "description": "Send quote",
          "meta": {
            "info": "This request allows us to send a request for Quote (payerfsp to payeefsp), for the calculation of possible fees and FSP commission involved in performing an interoperable financial transaction. Validate Not Support Accept header."
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotesNotSupported}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.3.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.3.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.3.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - The Client requested an unsupported version')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "// }"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "Send quote",
          "meta": {
            "info": "This request allows us to send a request for Quote (payerfsp to payeefsp), for the calculation of possible fees and FSP commission involved in performing an interoperable financial transaction. Validate Not Support Content-Type header."
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotesNotSupported}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.3.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.3.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.3.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - Client supplied a protocol version which is not supported by the server')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "// }"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "fspiop_protocol_validation - Transfers-Service",
      "meta": {
        "info": "This is a test to validate that ACCEPT and CONTENT-TYPE headers are correctly validated for both legacy (Old) and not\n-supported (NotSupported)"
      },
      "fileInfo": {
        "path": "hub/golden_path/feature_tests/backward_compatibility/fspiop_protocol_validation.json"
      },
      "requests": [
        {
          "id": 3,
          "meta": {
            "info": "This request allows us to get the personal information associated with a MSISDN and the FSP associated to it."
          },
          "description": "Get party information",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/parties/{Type}/{ID}",
          "method": "get",
          "headers": {
            "Accept": "{$inputs.acceptParties}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "Content-Type": "{$inputs.contentTypeParties}"
          },
          "params": {
            "Type": "{$inputs.toIdType}",
            "ID": "{$inputs.toIdValue}"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback body should contain party",
                "exec": [
                  "expect(callback.body).to.have.property('party')"
                ]
              },
              {
                "id": 5,
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": 6,
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be parties",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')"
                ]
              },
              {
                "id": 8,
                "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                "exec": [
                  "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.toIdType}')",
                  "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.toIdValue}')"
                ]
              },
              {
                "id": 9,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                  "}"
                ]
              },
              {
                "id": 10,
                "description": "Payee Content-Type",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  expect(environment.payeeRequest.headers['content-type']).to.equal('application/vnd.interoperability.parties+json;version={$inputs.expectedPartiesVersion}')",
                  "}"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "path": "/parties/{$inputs.toIdType}/{$inputs.toIdValue}",
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$inputs.toIdValue}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "This request allows us to send a request for Quote (payerfsp to payeefsp), for the calculation of possible fees and FSP commission involved in performing an interoperable financial transaction."
          },
          "description": "Send quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.toFspId}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.fromIdType}",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.fromFirstName}",
                  "lastName": "{$inputs.fromLastName}"
                },
                "dateOfBirth": "{$inputs.fromDOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$prev.3.callback.body.party.partyIdInfo.partyIdType}",
                "partyIdentifier": "{$prev.3.callback.body.party.partyIdInfo.partyIdentifier}",
                "fspId": "{$prev.3.callback.body.party.partyIdInfo.fspId}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "{$inputs.note}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback body should contain transferAmount",
                "exec": [
                  "expect(callback.body).to.have.property('transferAmount')"
                ]
              },
              {
                "id": 6,
                "description": "Callback transferAmount (amount & currency)to match the request",
                "exec": [
                  "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                  "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 7,
                "description": "Callback content-type to be quotes",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                ]
              },
              {
                "id": 8,
                "description": "Request amountType to be RECEIVE",
                "exec": [
                  "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                ]
              },
              {
                "id": 9,
                "description": "Request transactionType scenario to be TRANSFER",
                "exec": [
                  "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                ]
              },
              {
                "id": 10,
                "description": "Request transactionType initiator to be PAYER",
                "exec": [
                  "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                ]
              },
              {
                "id": 11,
                "description": "Request transactionType initiatorType to be CONSUMER",
                "exec": [
                  "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                ]
              },
              {
                "id": 12,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                  "}"
                ]
              },
              {
                "id": 13,
                "description": "Payee Content-Type",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.headers['content-type']).to.equal(request.headers['Content-Type'])",
                  "}"
                ]
              },
              {
                "id": 14,
                "description": "Payee Body QuoteId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.data['quoteId']).to.equal('{$request.body.quoteId}')",
                  "}"
                ]
              },
              {
                "id": 15,
                "description": "Payee Body TransactionId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.data['transactionId']).to.equal('{$request.body.transactionId}')",
                  "}"
                ]
              }
            ]
          },
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.toIdValue}"
          },
          "path": "/quotes",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "This request allows us to send a Transfer (payerfsp to payeefsp), resulting in an ILP transfer exchanged between two account holders on either side of a common ledger."
          },
          "description": "Send transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfersOld}",
            "Content-Type": "{$inputs.contentTypeTransfersOld}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.4.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$prev.3.callback.body.party.partyIdInfo.fspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.4.callback.body.expiration}",
            "ilpPacket": "{$prev.4.callback.body.ilpPacket}",
            "condition": "{$prev.4.callback.body.condition}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": 3,
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": 4,
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": 5,
                "description": "Callback transferState to be COMMITTED",
                "exec": [
                  "expect(callback.body.transferState).to.equal('COMMITTED')"
                ]
              },
              {
                "id": 6,
                "description": "Callback content-type to be transfers",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.transfers+json;version={$inputs.expectedTransfersVersion}')"
                ]
              },
              {
                "id": 7,
                "description": "Request transferId same as quote request transferId",
                "exec": [
                  "expect('{$request.body.transferId}').to.equal('{$prev.4.request.body.transactionId}')"
                ]
              },
              {
                "id": 8,
                "description": "Request transferAmount (amount & currency) to match quote request",
                "exec": [
                  "expect('{$prev.4.callback.body.transferAmount.amount}').to.equal('{$request.body.amount.amount}')",
                  "expect('{$prev.4.callback.body.transferAmount.currency}').to.equal('{$request.body.amount.currency}')"
                ]
              },
              {
                "id": 9,
                "description": "Request FSP source the same as quote callback FSP destination",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.4.callback.headers.fspiop-destination}')"
                ]
              },
              {
                "id": 10,
                "description": "Payee FSPIOP-Source",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.headers['fspiop-source']).to.equal('{$inputs.fromFspId}')",
                  "}"
                ]
              },
              {
                "id": 11,
                "description": "Payee Content-Type",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.headers['content-type']).to.equal(request.headers['Content-Type'])",
                  "}"
                ]
              },
              {
                "id": 12,
                "description": "Payee Body TransferId",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.data['transferId']).to.equal('{$request.body.transferId}')",
                  "}"
                ]
              },
              {
                "id": 13,
                "description": "Payee Body Amount",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(environment.payeeRequest.data.amount.amount).to.equal('{$request.body.amount.amount}')",
                  "}"
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scripts": {
            "preRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.transferId}', 'payeeRequest')",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}"
              ]
            }
          }
        },
        {
          "id": 6,
          "description": "Send transfer",
          "meta": {
            "info": "This request allows us to send a Transfer (payerfsp to payeefsp), resulting in an ILP transfer exchanged between two account holders on either side of a common ledger. Validate Not Support Accept header."
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfersNotSupported}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.4.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$prev.3.callback.body.party.partyIdInfo.fspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.4.callback.body.expiration}",
            "ilpPacket": "{$prev.4.callback.body.ilpPacket}",
            "condition": "{$prev.4.callback.body.condition}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - The Client requested an unsupported version')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.transferId}', 'payeeRequest')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "// }"
              ]
            }
          }
        },
        {
          "id": 7,
          "description": "Send transfer",
          "meta": {
            "info": "This request allows us to send a Transfer (payerfsp to payeefsp), resulting in an ILP transfer exchanged between two account holders on either side of a common ledger. Validate Not Support Content-Type header."
          },
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfersNotSupported}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "body": {
            "transferId": "{$prev.4.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$prev.3.callback.body.party.partyIdInfo.fspId}",
            "amount": {
              "amount": "{$inputs.amount}",
              "currency": "{$inputs.currency}"
            },
            "expiration": "{$prev.4.callback.body.expiration}",
            "ilpPacket": "{$prev.4.callback.body.ilpPacket}",
            "condition": "{$prev.4.callback.body.condition}"
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response status to be 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - Client supplied a protocol version which is not supported by the server')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          },
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "ignoreCallbacks": true,
          "scripts": {
            "preRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.transferId}', 'payeeRequest')",
                "// }"
              ]
            },
            "postRequest": {
              "exec": [
                "// if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "//   environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "// }"
              ]
            }
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "fspiop_protocol_validation - Transaction-Requests-Service",
      "fileInfo": {
        "path": "hub/golden_path/feature_tests/backward_compatibility/fspiop_protocol_validation.json"
      },
      "requests": [
        {
          "id": 1,
          "description": "Get transactionRequests by transactionId",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests/{ID}",
          "path": "/transactionRequests/{$environment.tranid}",
          "method": "get",
          "params": {
            "ID": "{$environment.tranid}"
          },
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "ignoreCallbacks": true,
          "headers": {
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "FSPIOP-Destination": "{$inputs.payeefsp}",
            "Date": "{$function.generic.curDate}",
            "Accept": "{$inputs.acceptTransactionRequestsOld}",
            "Content-Type": "{$inputs.contentTypeTransactionRequestsOld}",
            "FSPIOP-HTTP-Method": "GET",
            "FSPIOP-URI": "/transactionRequests"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              }
            ]
          }
        },
        {
          "id": 2,
          "description": "Get transactionRequests by transactionId",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests/{ID}",
          "path": "/transactionRequests/{$environment.tranid}",
          "method": "get",
          "params": {
            "ID": "{$environment.tranid}"
          },
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "ignoreCallbacks": true,
          "headers": {
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "FSPIOP-Destination": "{$inputs.payeefsp}",
            "Date": "{$function.generic.curDate}",
            "Accept": "{$inputs.acceptTransactionRequestsNotSupported}",
            "Content-Type": "{$inputs.contentTypeTransactionRequests}",
            "FSPIOP-HTTP-Method": "GET",
            "FSPIOP-URI": "/transactionRequests"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText to be 'Not Acceptable'",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - The Client requested an unsupported version')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          }
        },
        {
          "id": 3,
          "description": "Get transactionRequests by transactionId",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transactionRequests/{ID}",
          "path": "/transactionRequests/{$environment.tranid}",
          "method": "get",
          "params": {
            "ID": "{$environment.tranid}"
          },
          "url": "{$inputs.HOST_TRANSACTION_REQUESTS_SERVICE}",
          "ignoreCallbacks": true,
          "headers": {
            "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
            "FSPIOP-Destination": "{$inputs.payeefsp}",
            "Date": "{$function.generic.curDate}",
            "Accept": "{$inputs.acceptTransactionRequests}",
            "Content-Type": "{$inputs.contentTypeTransactionRequestsNotSupported}",
            "FSPIOP-HTTP-Method": "GET",
            "FSPIOP-URI": "/transactionRequests"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Response code status 406",
                "exec": [
                  "expect(response.status).to.equal(406)"
                ]
              },
              {
                "id": 2,
                "description": "Response statusText to be 'Not Acceptable'",
                "exec": [
                  "expect(response.statusText).to.equal('Not Acceptable')"
                ]
              },
              {
                "id": 3,
                "description": "Response errorCode to be 3001",
                "exec": [
                  "expect(response.body.errorInformation.errorCode).to.equal('3001')",
                  ""
                ]
              },
              {
                "id": 4,
                "description": "Response errorDescription to contain`Unacceptable version requested`",
                "exec": [
                  "expect(response.body.errorInformation.errorDescription).to.contain('Unacceptable version requested - Client supplied a protocol version which is not supported by the server')",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Response header content-type to be correct",
                "exec": [
                  "// Currently this is not working",
                  "// expect(response.headers['content-type']).to.equal(environment.contentTypeParticipants)",
                  ""
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}