{
  "name": "multi",
  "test_cases": [
    {
      "id": 1,
      "name": "Block Transfer",
      "meta": {
        "info": "Block Transfer"
      },
      "requests": [
        {
          "id": 1,
          "meta": {
            "info": "GET limits - SIMPAYER"
          },
          "description": "GET limits - SIMPAYER",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/limits",
          "path": "/participants/{$inputs.fromFspId}/limits",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)",
                  "",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "NDC limit set correctly",
                "exec": [
                  "expect(environment.payerNDC).to.not.equal(undefined)",
                  ""
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "environment.payerNDC = response.body[0].limit.value"
              ]
            }
          }
        },
        {
          "id": 2,
          "meta": {
            "info": "GET limits - SIMPAYEE"
          },
          "description": "GET limits - SIMPAYEE",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/limits",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/limits",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)",
                  "",
                  ""
                ]
              },
              {
                "id": 2,
                "description": "NDC limit set correctly",
                "exec": [
                  "expect(environment.payeeNDC).to.not.equal(undefined)",
                  ""
                ]
              }
            ]
          },
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "environment.payeeNDC = response.body[0].limit.value"
              ]
            }
          }
        },
        {
          "id": 3,
          "meta": {
            "info": "GET SIMPAYER position before the transfer"
          },
          "description": "GET SIMPAYER position before the transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payer FSP position correctly set",
                "exec": [
                  "expect(environment.payerPositionBeforeTransfer).to.not.equal(undefined)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "postRequest": {
              "exec": [
                "environment.payerPositionBeforeTransfer = response.body[0].value"
              ]
            }
          }
        },
        {
          "id": 4,
          "meta": {
            "info": "GET SIMPAYEE position before the transfer"
          },
          "description": "GET SIMPAYEE position before the transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Payee FSP position correctly set",
                "exec": [
                  "expect(environment.payeePositionBeforeTransfer).to.not.equal(undefined)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          },
          "scripts": {
            "preRequest": {
              "exec": [
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "environment.payeePositionBeforeTransfer = response.body[0].value"
              ]
            }
          }
        },
        {
          "id": 5,
          "meta": {
            "info": "Send Quote"
          },
          "description": "Send Quote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "path": "/quotes",
          "method": "post",
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "scriptingEngine": "javascript",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.SIMPAYEE_NAME}",
            "FSPIOP-HTTP-Method": "POST",
            "FSPIOP-URI": "/quotes",
            "Date": "{$function.generic.curDate}"
          },
          "body": {
            "quoteId": "{$requestVariables.quoteId}",
            "transactionId": "{$requestVariables.transactionId}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.fromIdValue}",
                "fspId": "{$inputs.fromFspId}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "Mats",
                  "lastName": "Hagman"
                },
                "dateOfBirth": "1983-10-25"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.SIMPAYEE_MSISDN}",
                "fspId": "{$inputs.SIMPAYEE_NAME}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "60",
              "currency": "{$inputs.SIMPAYEE_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            },
            "note": "hej"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Payee FSP 'fspiop-source' is 'testingtoolkitdfsp'",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "expect(requestVariables.payeeRequest.headers['fspiop-source']).to.equal(environment.fromFspId)",
                  "}"
                ]
              },
              {
                "id": 3,
                "description": "Payee FSP 'fspiop-destination' is 'payeefsp'",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  " expect(requestVariables.payeeRequest.headers['fspiop-destination']).to.equal(environment.SIMPAYEE_NAME)",
                  "}"
                ]
              },
              {
                "id": 4,
                "description": "Payee FSP: 'fspiop-signature' is same as sent in the request",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  " expect(requestVariables.payeeRequest.headers['fspiop-signature']).to.equal(request.headers['fspiop-signature'])",
                  "}",
                  ""
                ]
              },
              {
                "id": 5,
                "description": "Payee FSP 'accept' is same as sent in the request",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  " expect(requestVariables.payeeRequest.headers['accept']).to.equal(request.headers['Accept'])",
                  "}"
                ]
              },
              {
                "id": 6,
                "description": "Payee FSP 'content-type' is same as sent in the request",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  " expect(requestVariables.payeeRequest.headers['content-type']).to.equal(request.headers['Content-Type'])",
                  "}"
                ]
              },
              {
                "id": 7,
                "description": "Payee FSP 'fspiop-uri' is /quotes",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  " expect(requestVariables.payeeRequest.headers['fspiop-uri']).to.equal(\"/quotes\")",
                  "}"
                ]
              },
              {
                "id": 8,
                "description": "Payee FSP 'fspiop-http-method' is 'POST'",
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  " expect(requestVariables.payeeRequest.headers['fspiop-http-method']).to.equal(\"POST\")",
                  "}"
                ]
              },
              {
                "id": 9,
                "description": "Payer FSP Callback: 'fspiop-source' is 'payeefsp'",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal(environment.SIMPAYEE_NAME)",
                  ""
                ]
              },
              {
                "id": 10,
                "description": "Payer FSP Callback: 'fspiop-destination' is 'testingtoolkitdfsp'",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal(environment.fromFspId)"
                ]
              },
              {
                "id": 11,
                "description": "Payer FSP Callback:  JWS signature valid",
                "exec": [
                  "if(environment.ENABLE_JWS_VALIDATION) {",
                  "expect(requestVariables.payerCallbackJWSValidationStatus).to.equal('VALID')",
                  "}",
                  ""
                ]
              },
              {
                "id": 17,
                "description": "Payer Callback: JWS protected headers are valid",
                "exec": [
                  "if (environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                  "expect(requestVariables.payerCallbackJWSHeadersValidationStatus).to.equal('VALID')",
                  "}"
                ]
              },
              {
                "id": 12,
                "description": "Payer FSP Callback: 'accept' is empty",
                "exec": [
                  "expect(callback.headers['accept']).to.equal(undefined)"
                ]
              },
              {
                "id": 13,
                "description": "Payer FSP Callback: 'content-type' is as expected",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal(\"application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}\")"
                ]
              },
              {
                "id": 14,
                "description": "Payer FSP Callback: 'fspiop-uri' is /quotes",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal(\"/quotes/{$request.body.quoteId}\")"
                ]
              },
              {
                "id": 15,
                "description": "Payer FSP Callback: 'fspiop-http-method' is 'PUT'",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal(\"PUT\")"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.quoteId = '{$function.generic.generateUUID}'",
                "requestVariables.transactionId = '{$function.generic.generateUUID}'",
                "",
                "if(environment.ENABLE_JWS_SIGNING) {",
                "  custom.jws.signRequest(environment.TTKFSP_JWS_KEY)",
                "}",
                "",
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  await websocket.connect(",
                "    environment.PAYEEFSP_SDK_TESTAPI_WS_URL + `/requests/${requestVariables.quoteId}`, ",
                "    'payeeRequest'",
                "  )",
                "}"
              ]
            },
            "postRequest": {
              "exec": [
                "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                "  requestVariables.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                "}",
                "",
                "if (environment.ENABLE_JWS_VALIDATION) {",
                "  requestVariables.payerCallbackJWSValidationStatus = custom.jws.validateCallback(callback.headers, callback.body, environment.SIMPAYEE_JWS_PUB_KEY)",
                "}",
                "",
                "if (environment.ENABLE_PROTECTED_HEADERS_VALIDATION) {",
                "  requestVariables.payerCallbackJWSHeadersValidationStatus = custom.jws.validateCallbackProtectedHeaders(callback.headers)",
                "}",
                ""
              ]
            }
          }
        },
        {
          "id": 6,
          "meta": {
            "info": "Send Block Transfer"
          },
          "description": "Send Block Transfer",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/transfers",
          "path": "/transfers",
          "method": "post",
          "url": "{$inputs.HOST_ML_API_ADAPTER}",
          "scriptingEngine": "javascript",
          "body": {
            "transferId": "{$prev.5.request.body.transactionId}",
            "payerFsp": "{$inputs.fromFspId}",
            "payeeFsp": "{$inputs.SIMPAYEE_NAME}",
            "amount": {
              "amount": "{$requestVariables.amount}",
              "currency": "{$inputs.SIMPAYEE_CURRENCY}"
            },
            "expiration": "{$prev.5.callback.body.expiration}",
            "ilpPacket": "{$prev.5.callback.body.ilpPacket}",
            "condition": "{$prev.5.callback.body.condition}"
          },
          "headers": {
            "Accept": "{$inputs.acceptTransfers}",
            "Content-Type": "{$inputs.contentTypeTransfers}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.SIMPAYEE_NAME}",
            "FSPIOP-HTTP-Method": "POST",
            "FSPIOP-URI": "/transfers"
          },
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": 2,
                "description": "Error code should be returned",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.eql('4001');"
                ]
              },
              {
                "id": 3,
                "description": "Error description should be returned",
                "exec": [
                  "expect(callback.body.errorInformation.errorDescription).to.equal('Payer FSP insufficient liquidity');"
                ]
              },
              {
                "id": 4,
                "description": "'fspiop-source' should be 'switch'",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('switch');"
                ]
              },
              {
                "id": 5,
                "description": "'fspiop-destination' should be 'testingtoolkitdfsp'",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$inputs.fromFspId}');"
                ]
              },
              {
                "id": 6,
                "description": "'accept' should be empty",
                "exec": [
                  "expect(callback.headers['accept']).to.equal(undefined);"
                ]
              },
              {
                "id": 7,
                "description": "'content-type' should be in proper format",
                "exec": [
                  "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.transfers+json;version=');"
                ]
              },
              {
                "id": 8,
                "description": "'fspiop-signature' should be present",
                "exec": [
                  "expect(callback.headers['fspiop-signature']).to.not.equal(undefined);"
                ]
              },
              {
                "id": 9,
                "description": "'fspiop-uri' is /transfers/{transferId}/error",
                "exec": [
                  "expect(callback.headers['fspiop-uri']).to.equal(`/transfers/{$request.body.transferId}/error`);"
                ]
              },
              {
                "id": 10,
                "description": "'fspiop-http-method' is PUT",
                "exec": [
                  "expect(callback.headers['fspiop-http-method']).to.equal('PUT');"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.transferExpiration = new Date(new Date().getTime() + 600000).toISOString();",
                "",
                "requestVariables.amount = Number(environment.payerNDC) - Number(environment.payerPositionBeforeTransfer) + 100;"
              ]
            }
          }
        },
        {
          "id": 7,
          "meta": {
            "info": "GET SIMPAYER position after the transfer"
          },
          "description": "GET SIMPAYER position after the transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.fromFspId}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.fromFspId}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Position before and after transfer should be the same",
                "exec": [
                  "expect(environment.payerPositionBeforeTransfer).to.equal(response.body[0].value)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          }
        },
        {
          "id": 8,
          "meta": {
            "info": "GET SIMPAYEE position after the transfer"
          },
          "description": "GET SIMPAYEE position after the transfer",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "central_admin"
          },
          "operationPath": "/participants/{name}/positions",
          "path": "/participants/{$inputs.SIMPAYEE_NAME}/positions",
          "method": "get",
          "params": {
            "name": "{$inputs.SIMPAYEE_NAME}"
          },
          "url": "{$inputs.HOST_CENTRAL_LEDGER}",
          "tests": {
            "assertions": [
              {
                "id": 1,
                "description": "Status code is 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": 2,
                "description": "Position before and after transfer should be the same",
                "exec": [
                  "expect(environment.payeePositionBeforeTransfer).to.equal(response.body[0].value)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "headers": {
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
          }
        }
      ]
    }
  ]
}