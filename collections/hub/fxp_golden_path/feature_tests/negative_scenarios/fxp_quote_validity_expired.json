{
    "options": {},
    "name": "fxp_quote_expired",
    "test_cases": [
      {
        "id": 1,
        "name": "Send POST /quotes after expiry of the fxQuote",
        "fileInfo": {
          "path": "collections/tests/fx/golden_path/feature_tests/fxp_error.json",
          "labels": [
            "fx"
          ]
        },
        "meta": {
          "info": "POST /fxQuotes returns PUT /fxQuotes/{ID}/error"
        },
        "requests": [
          {
            "id": 1,
            "description": "GET /services/FXP",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "prefix": "/v2",
              "additionalApi": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/services/FXP",
            "path": "/services/FXP",
            "method": "get",
            "url": "{$inputs.HOST_FXP_SERVICES}",
            "disabled": false,
            "headers": {
              "Content-Type": "{$inputs.contentTypeServicesFxp}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "Accept": "{$inputs.acceptServicesFxp}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback body should contain providers",
                  "exec": [
                    "expect(callback.body).to.have.property('providers')",
                    "expect(callback.body.providers.length).to.be.at.least(1)"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                }
              ]
            }
          },
          {
            "id": 2,
            "description": "POST /fxQuotes",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/fxQuotes",
            "path": "/fxQuotes",
            "method": "post",
            "body": {
              "conversionRequestId": "{$function.generic.generateUUID}",
              "conversionTerms": {
                "conversionId": "{$function.generic.generateUUID}",
                "initiatingFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
                "counterPartyFsp": "{$inputs.FXP_TESTFXP1_ID}",
                "amountType": "SEND",
                "sourceAmount": {
                  "currency": "{$inputs.FXP_SOURCE_CURRENCY}",
                  "amount": "{$inputs.FXP_SOURCE_AMOUNT}"
                },
                "targetAmount": {
                  "currency": "{$inputs.FXP_TARGET_CURRENCY}"
                },
                "expiration": "{$inputs.FXP_EXPIRATION}",
                "extensionList": {
                  "extension": [
                    {
                      "key": "error",
                      "value": "trigger error for fxQuotes"
                    }
                  ]
                }
              }
            },
            "headers": {
              "Accept": "{$inputs.acceptFxQuotes}",
              "Content-Type": "{$inputs.contentTypeFxQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "FSPIOP-Destination": "{$inputs.FXP_TESTFXP1_ID}"
            },
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain conversionTerms",
                  "exec": [
                    "expect(callback.body).to.have.property('conversionTerms')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.conversionTerms.sourceAmount.currency).to.equal('{$request.body.conversionTerms.sourceAmount.currency}')",
                    "expect(callback.body.conversionTerms.targetAmount.currency).to.equal('{$request.body.conversionTerms.targetAmount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be fxQuotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxQuotes+json')"
                  ]
                },
                {
                  "id": 8,
                  "description": "Callback body should contain condition",
                  "exec": [
                    "expect(callback.body).to.have.property('condition')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Callback body should contain target amount",
                  "exec": [
                    "expect(callback.body.conversionTerms.targetAmount).to.have.property('amount')"
                  ]
                },
                {
                  "id": 10,
                  "description": "Callback body should contain expiration",
                  "exec": [
                    "expect(callback.body.conversionTerms.expiration).to.equal('{$request.body.conversionTerms.expiration}')"
                  ]

                }
              ]
            }
          },
          {
            "id": 5,
            "description": "Send POST /quotes after expiration in PUT /fxQuotes/{ID}",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/quotes",
            "path": "/quotes",
            "method": "post",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Content-Type": "{$inputs.contentTypeQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "FSPIOP-Destination": "{$inputs.FXP_PAYEE_DFSP_ID}"
            },
            "body": {
              "quoteId": "{$function.generic.generateUUID}",
              "transactionId": "{$function.generic.generateUUID}",
              "transactionRequestId": "{$function.generic.generateUUID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.fromIdType}",
                  "partyIdentifier": "{$inputs.fromIdValue}",
                  "fspId": "{$inputs.fromFspId}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.fromFirstName}",
                    "lastName": "{$inputs.fromLastName}"
                  },
                  "dateOfBirth": "{$inputs.fromDOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$prev.2.callback.body.party.partyIdInfo.partyIdType}",
                  "partyIdentifier": "{$prev.2.callback.body.party.partyIdInfo.partyIdentifier}",
                  "fspId": "{$prev.2.callback.body.party.partyIdInfo.fspId}"
                }
              },
              "amountType": "SEND",
              "amount": {
                "amount": "{$inputs.amount}",
                "currency": "{$inputs.FXP_TARGET_CURRENCY}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              },
              "note": "{$inputs.note}"
            },
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain transferAmount",
                  "exec": [
                    "expect(callback.body).to.have.property('transferAmount')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                    "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be quotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Request transactionType scenario to be TRANSFER",
                  "exec": [
                    "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                  ]
                },
                {
                  "id": 10,
                  "description": "Request transactionType initiator to be PAYER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                  ]
                },
                {
                  "id": 11,
                  "description": "Request transactionType initiatorType to be CONSUMER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                  ]
                }
              ]
            },
            "scripts": {
              "preRequest": {
                "exec": [
                  "const maxRetryWait = Number.parseFloat(environment.RETRY_MAX_WAIT_IN_MS) || 250",
                  "await custom.sleep(maxRetryWait)"
                ]
              }
            }
          }
        ]
      },
      {
        "id": 2,
        "name": "Send POST /fxTransfers after expiry of the fxQuote",
        "fileInfo": {
          "path": "collections/tests/fx/fx_tests.json",
          "labels": [
            "fx"
          ]
        },
        "meta": {
          "info": "POST /fxTransfers returns PUT /fxTransfers/{ID}/error"
        },
        "requests": [
          {
            "id": 1,
            "description": "GET /services/FXP",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "prefix": "/v2",
              "additionalApi": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/services/FXP",
            "path": "/services/FXP",
            "method": "get",
            "url": "{$inputs.HOST_FXP_SERVICES}",
            "disabled": false,
            "headers": {
              "Content-Type": "{$inputs.contentTypeServicesFxp}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "Accept": "{$inputs.acceptServicesFxp}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback body should contain providers",
                  "exec": [
                    "expect(callback.body).to.have.property('providers')",
                    "expect(callback.body.providers.length).to.be.at.least(1)"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                }
              ]
            }
          },
          {
            "id": 2,
            "description": "POST /fxQuotes",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/fxQuotes",
            "path": "/fxQuotes",
            "method": "post",
            "body": {
              "conversionRequestId": "{$function.generic.generateUUID}",
              "conversionTerms": {
                "conversionId": "{$function.generic.generateUUID}",
                "initiatingFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
                "counterPartyFsp": "{$inputs.FXP_TESTFXP1_ID}",
                "amountType": "SEND",
                "sourceAmount": {
                  "currency": "{$inputs.FXP_SOURCE_CURRENCY}",
                  "amount": "{$inputs.FXP_SOURCE_AMOUNT}"
                },
                "targetAmount": {
                  "currency": "{$inputs.FXP_TARGET_CURRENCY}"
                },
                "expiration": "{$inputs.FXP_EXPIRATION}"
              }
            },
            "headers": {
              "Accept": "{$inputs.acceptFxQuotes}",
              "Content-Type": "{$inputs.contentTypeFxQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "FSPIOP-Destination": "{$inputs.FXP_TESTFXP1_ID}"
            },
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain conversionTerms",
                  "exec": [
                    "expect(callback.body).to.have.property('conversionTerms')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.conversionTerms.sourceAmount.currency).to.equal('{$request.body.conversionTerms.sourceAmount.currency}')",
                    "expect(callback.body.conversionTerms.targetAmount.currency).to.equal('{$request.body.conversionTerms.targetAmount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be fxQuotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxQuotes+json')"
                  ]
                },
                {
                  "id": 16,
                  "description": "Callback body should contain condition",
                  "exec": [
                    "expect(callback.body).to.have.property('condition')"
                  ]
                },
                {
                  "id": 17,
                  "description": "Callback body should contain target amount",
                  "exec": [
                    "expect(callback.body.conversionTerms.targetAmount).to.have.property('amount')"
                  ]
                }
              ]
            }
          },
          {
            "id": 3,
            "description": "POST /quotes",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/quotes",
            "path": "/quotes",
            "method": "post",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Content-Type": "{$inputs.contentTypeQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "FSPIOP-Destination": "{$inputs.FXP_PAYEE_DFSP_ID}"
            },
            "body": {
              "quoteId": "{$function.generic.generateUUID}",
              "transactionId": "{$function.generic.generateUUID}",
              "transactionRequestId": "{$function.generic.generateUUID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.fromIdType}",
                  "partyIdentifier": "{$inputs.fromIdValue}",
                  "fspId": "{$inputs.fromFspId}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.fromFirstName}",
                    "lastName": "{$inputs.fromLastName}"
                  },
                  "dateOfBirth": "{$inputs.fromDOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$prev.2.callback.body.party.partyIdInfo.partyIdType}",
                  "partyIdentifier": "{$prev.2.callback.body.party.partyIdInfo.partyIdentifier}",
                  "fspId": "{$prev.2.callback.body.party.partyIdInfo.fspId}"
                }
              },
              "amountType": "SEND",
              "amount": {
                "amount": "{$inputs.amount}",
                "currency": "{$inputs.FXP_TARGET_CURRENCY}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              },
              "note": "{$inputs.note}"
            },
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain transferAmount",
                  "exec": [
                    "expect(callback.body).to.have.property('transferAmount')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                    "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be quotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Request transactionType scenario to be TRANSFER",
                  "exec": [
                    "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                  ]
                },
                {
                  "id": 10,
                  "description": "Request transactionType initiator to be PAYER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                  ]
                },
                {
                  "id": 11,
                  "description": "Request transactionType initiatorType to be CONSUMER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                  ]
                }
              ]
            }
          },
          {
            "id": 4,
            "description": "POST /fxTransfers",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/fxTransfers",
            "path": "/fxTransfers",
            "method": "post",
            "url": "{$inputs.HOST_ML_API_ADAPTER}",
            "headers": {
              "Accept": "{$inputs.acceptFxTransfers}",
              "Content-Type": "{$inputs.contentTypeFxTransfers}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}"
            },
            "body": {
              "commitRequestId": "{$prev.4.callback.body.conversionTerms.conversionId}",
              "determiningTransferId": "{$function.generic.generateUUID}",
              "initiatingFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
              "counterPartyFsp": "{$inputs.FXP_TESTFXP1_ID}",
              "amountType": "SEND",
              "sourceAmount": {
                "currency": "{$inputs.FXP_SOURCE_CURRENCY}",
                "amount": "{$inputs.FXP_SOURCE_AMOUNT}"
              },
              "targetAmount": {
                "currency": "{$inputs.FXP_TARGET_CURRENCY}",
                "amount": "{$inputs.FXP_TARGET_AMOUNT}"
              },
              "condition": "{$prev.4.callback.body.condition}",
              "expiration": "{$requestVariables.expiration}",
              "extensionList": {
                "extension": [
                  {
                    "key": "error",
                    "value": "trigger error for fxTransfers"
                  }
                ]
              }
            },
            "scriptingEngine": "javascript",
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain errorInformation code",
                  "exec": [
                    "expect(response.body.errorInformation).to.have.property('errorCode')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback body should contain errorInformation description",
                  "exec": [
                    "expect(response.body.errorInformation).to.have.property('errorDescription')"
                  ]
                }
              ]
            },
            "scripts": {
              "preRequest": {
                "exec": [
                  "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
                ]
              }
            }
          }
        ]
      },
      {
        "id": 3,
        "name": "FX Transfer - error",
        "fileInfo": {
          "path": "collections/tests/fx/fx_tests.json",
          "labels": [
            "fx"
          ]
        },
        "meta": {
          "info": "POST /transfers returns PUT /transfers/{ID}/error"
        },
        "requests": [
          {
            "id": 1,
            "description": "GET /services/FXP",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "prefix": "/v2",
              "additionalApi": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/services/FXP",
            "path": "/services/FXP",
            "method": "get",
            "url": "{$inputs.HOST_FXP_SERVICES}",
            "disabled": false,
            "headers": {
              "Content-Type": "{$inputs.contentTypeServicesFxp}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "Accept": "{$inputs.acceptServicesFxp}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback body should contain providers",
                  "exec": [
                    "expect(callback.body).to.have.property('providers')",
                    "expect(callback.body.providers.length).to.be.at.least(1)"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                }
              ]
            }
          },
          {
            "id": 2,
            "description": "POST /fxQuotes",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/fxQuotes",
            "path": "/fxQuotes",
            "method": "post",
            "body": {
              "conversionRequestId": "{$function.generic.generateUUID}",
              "conversionTerms": {
                "conversionId": "{$function.generic.generateUUID}",
                "initiatingFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
                "counterPartyFsp": "{$inputs.FXP_TESTFXP1_ID}",
                "amountType": "SEND",
                "sourceAmount": {
                  "currency": "{$inputs.FXP_SOURCE_CURRENCY}",
                  "amount": "{$inputs.FXP_SOURCE_AMOUNT}"
                },
                "targetAmount": {
                  "currency": "{$inputs.FXP_TARGET_CURRENCY}"
                },
                "expiration": "{$inputs.FXP_EXPIRATION}"
              }
            },
            "headers": {
              "Accept": "{$inputs.acceptFxQuotes}",
              "Content-Type": "{$inputs.contentTypeFxQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "FSPIOP-Destination": "{$inputs.FXP_TESTFXP1_ID}"
            },
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain conversionTerms",
                  "exec": [
                    "expect(callback.body).to.have.property('conversionTerms')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.conversionTerms.sourceAmount.currency).to.equal('{$request.body.conversionTerms.sourceAmount.currency}')",
                    "expect(callback.body.conversionTerms.targetAmount.currency).to.equal('{$request.body.conversionTerms.targetAmount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be fxQuotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxQuotes+json')"
                  ]
                },
                {
                  "id": 16,
                  "description": "Callback body should contain condition",
                  "exec": [
                    "expect(callback.body).to.have.property('condition')"
                  ]
                },
                {
                  "id": 17,
                  "description": "Callback body should contain target amount",
                  "exec": [
                    "expect(callback.body.conversionTerms.targetAmount).to.have.property('amount')"
                  ]
                }
              ]
            }
          },
          {
            "id": 3,
            "description": "POST /quotes",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/quotes",
            "path": "/quotes",
            "method": "post",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Content-Type": "{$inputs.contentTypeQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}",
              "FSPIOP-Destination": "{$inputs.FXP_PAYEE_DFSP_ID}"
            },
            "body": {
              "quoteId": "{$function.generic.generateUUID}",
              "transactionId": "{$function.generic.generateUUID}",
              "transactionRequestId": "{$function.generic.generateUUID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.fromIdType}",
                  "partyIdentifier": "{$inputs.fromIdValue}",
                  "fspId": "{$inputs.fromFspId}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.fromFirstName}",
                    "lastName": "{$inputs.fromLastName}"
                  },
                  "dateOfBirth": "{$inputs.fromDOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$prev.2.callback.body.party.partyIdInfo.partyIdType}",
                  "partyIdentifier": "{$prev.2.callback.body.party.partyIdInfo.partyIdentifier}",
                  "fspId": "{$prev.2.callback.body.party.partyIdInfo.fspId}"
                }
              },
              "amountType": "SEND",
              "amount": {
                "amount": "{$inputs.amount}",
                "currency": "{$inputs.FXP_TARGET_CURRENCY}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              },
              "note": "{$inputs.note}"
            },
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain transferAmount",
                  "exec": [
                    "expect(callback.body).to.have.property('transferAmount')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                    "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be quotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Request transactionType scenario to be TRANSFER",
                  "exec": [
                    "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                  ]
                },
                {
                  "id": 10,
                  "description": "Request transactionType initiator to be PAYER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                  ]
                },
                {
                  "id": 11,
                  "description": "Request transactionType initiatorType to be CONSUMER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                  ]
                }
              ]
            }
          },
          {
            "id": 4,
            "description": "POST /fxTransfers",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/fxTransfers",
            "path": "/fxTransfers",
            "method": "post",
            "url": "{$inputs.HOST_ML_API_ADAPTER}",
            "headers": {
              "Accept": "{$inputs.acceptFxTransfers}",
              "Content-Type": "{$inputs.contentTypeFxTransfers}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}"
            },
            "body": {
              "commitRequestId": "{$prev.4.callback.body.conversionTerms.conversionId}",
              "determiningTransferId": "{$function.generic.generateUUID}",
              "initiatingFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
              "counterPartyFsp": "{$inputs.FXP_TESTFXP1_ID}",
              "amountType": "SEND",
              "sourceAmount": {
                "currency": "{$inputs.FXP_SOURCE_CURRENCY}",
                "amount": "{$inputs.FXP_SOURCE_AMOUNT}"
              },
              "targetAmount": {
                "currency": "{$inputs.FXP_TARGET_CURRENCY}",
                "amount": "{$inputs.FXP_TARGET_AMOUNT}"
              },
              "condition": "{$prev.4.callback.body.condition}",
              "expiration": "{$requestVariables.expiration}"
            },
            "scriptingEngine": "javascript",
            "disabled": false,
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback conversionState to be RESERVED",
                  "exec": [
                    "expect(callback.body.conversionState).to.equal('RESERVED')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback content-type to be fxTransfers",
                  "exec": [
                    "expect(callback.headers['content-type']).to.have.string('application/vnd.interoperability.fxTransfers+json')"
                  ]
                },
                {
                  "id": 8,
                  "description": "Callback body should contain fulfilment",
                  "exec": [
                    "expect(callback.body).to.have.property('fulfilment')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Request FSP source the same as quote callback FSP destination",
                  "exec": [
                    "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$prev.4.callback.headers.fspiop-destination}')"
                  ]
                }
              ]
            },
            "scripts": {
              "preRequest": {
                "exec": [
                  "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
                ]
              }
            }
          },
          {
            "id": 5,
            "description": "POST /transfer",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/transfers",
            "path": "/transfers",
            "method": "post",
            "url": "{$inputs.HOST_ML_API_ADAPTER}",
            "body": {
              "transferId": "{$prev.6.request.body.determiningTransferId}",
              "payeeFsp": "{$inputs.FXP_PAYEE_DFSP_ID}",
              "payerFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
              "amount": {
                "currency": "{$inputs.FXP_TARGET_CURRENCY}",
                "amount": "{$inputs.amount}"
              },
              "ilpPacket": "{$prev.5.callback.body.ilpPacket}",
              "condition": "{$prev.5.callback.body.condition}",
              "expiration": "{$requestVariables.expiration}",
              "extensionList": {
                "extension": [
                  {
                    "key": "error",
                    "value": "trigger error for transfers"
                  }
                ]
              }
            },
            "headers": {
              "Accept": "{$inputs.acceptTransfers}",
              "Content-Type": "{$inputs.contentTypeTransfers}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.FXP_PAYER_DFSP_ID}"
            },
            "disabled": false,
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain errorInformation code",
                  "exec": [
                    "expect(response.body.errorInformation).to.have.property('errorCode')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback body should contain errorInformation description",
                  "exec": [
                    "expect(response.body.errorInformation).to.have.property('errorDescription')"
                  ]
                }
              ]
            },
            "scripts": {
              "preRequest": {
                "exec": [
                  "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
                ]
              }
            }
          },
          {
            "id": 5,
            "description": "Check position for FXP. It should be same as before the transfer",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 2,
              "type": "fspiop",
              "asynchronous": true,
              "specFile": "spec_files/api_definitions/fspiop_2.0/api_spec.yaml",
              "callbackMapFile": "spec_files/api_definitions/fspiop_2.0/callback_map.json",
              "responseMapFile": "spec_files/api_definitions/fspiop_2.0/response_map.json",
              "jsfRefFile": "spec_files/api_definitions/fspiop_2.0/mockRef.json",
              "triggerTemplatesFolder": "spec_files/api_definitions/fspiop_2.0/trigger_templates"
            },
            "operationPath": "/participants/{name}/positions",
            "path": "/participants/{$inputs.payeefsp}/positions",
            "method": "get",
            "params": {
              "name": "{$inputs.payeefsp}"
            },
            "url": "{$inputs.HOST_CENTRAL_LEDGER}",
            "headers": {
              "FSPIOP-Source": "{$inputs.fromFspId}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "body": {
              "transferId": "{$prev.6.request.body.determiningTransferId}",
              "payeeFsp": "{$inputs.FXP_PAYEE_DFSP_ID}",
              "payerFsp": "{$inputs.FXP_PAYER_DFSP_ID}",
              "amount": {
                "currency": "{$inputs.FXP_TARGET_CURRENCY}",
                "amount": "{$inputs.amount}"
              },
              "ilpPacket": "{$prev.5.callback.body.ilpPacket}",
              "condition": "{$prev.5.callback.body.condition}",
              "expiration": "{$requestVariables.expiration}",
              "extensionList": {
                "extension": [
                  {
                    "key": "error",
                    "value": "trigger error for transfers"
                  }
                ]
              }
            },
            "disabled": false,
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain errorInformation code",
                  "exec": [
                    "expect(response.body.errorInformation).to.have.property('errorCode')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback body should contain errorInformation description",
                  "exec": [
                    "expect(response.body.errorInformation).to.have.property('errorDescription')"
                  ]
                }
              ]
            },
            "scripts": {
              "preRequest": {
                "exec": [
                  "requestVariables.expiration =new Date(new Date().getTime() + 24 * 60 * 60 * 1000).toISOString()"
                ]
              }
            }
          }
        ]
      }
    ]
  }
  