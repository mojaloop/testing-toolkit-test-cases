{
  "name": "Bulk High Volume Dynamic",
  "test_cases": [
    {
      "id": "tc-bhvd1-bulk-hi-e0ab",
      "name": "TC-BHVD1. Bulk High Volume Dynamic",
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": false,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}",
                "fspId": "{$inputs.TTKSIM1_FSPID}"
              }
            },
            "individualTransfers": []
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(environment.totalIndividualTransfers)"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-receiver-first-name-",
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-receiver-last-name-R",
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "ignoreCallbacks": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "environment.totalIndividualTransfers = 10",
                "",
                "const individualTransfers = []",
                "for(let i=1; i<=environment.totalIndividualTransfers/2; i++) {",
                "  individualTransfers.push({",
                "    homeTransactionId: 'abc' + i,",
                "    to: {",
                "      partyIdInfo: {",
                "        partyIdType: 'MSISDN',",
                "        partyIdentifier: Number(environment.TTKSIM2_MSISDN_PREFIX + '000000') + i + '',",
                "      }",
                "    },",
                "    amountType: 'SEND',",
                "    currency: environment.TTKSIM2_CURRENCY,",
                "    amount: '100',",
                "    note: 'fspsuccess'",
                "  })",
                "}",
                "for(let i=1; i<=environment.totalIndividualTransfers/2; i++) {",
                "  individualTransfers.push({",
                "    homeTransactionId: 'abcd' + i,",
                "    to: {",
                "      partyIdInfo: {",
                "        partyIdType: 'MSISDN',",
                "        partyIdentifier: Number(environment.TTKSIM3_MSISDN_PREFIX + '000000') + i + '',",
                "      }",
                "    },",
                "    amountType: 'SEND',",
                "    currency: environment.TTKSIM2_CURRENCY,",
                "    amount: '100',",
                "    note: 'fspsuccess'",
                "  })",
                "}",
                "",
                "",
                "",
                "custom.appendRequestBody({",
                "  individualTransfers: individualTransfers",
                "})",
                "",
                "requestVariables.bulkTimeout = (new Date(Date.now()+240000)).toISOString()",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                "environment.acceptPartyCallback = callback"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "individualTransfers": []
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              },
              {
                "id": "Check-all-responses-have-ilpPa",
                "description": "Check all the responses have ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults.filter(transfer => transfer.quoteResponse.ilpPacket && transfer.quoteResponse.condition)).to.not.be.empty;",
                  ""
                ]
              },
              {
                "id": "Check-all-responses-don-t-have",
                "description": "Check all the responses don't have lastError",
                "exec": [
                  "expect(callback.body.individualTransferResults.filter(transfer => transfer.quoteResponse.lastError)).to.be.empty;",
                  ""
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "const individualTransfers = []",
                "for(let i=1; i<=environment.totalIndividualTransfers; i++) {",
                "  individualTransfers.push({",
                "    transferId: environment.acceptPartyCallback.body.individualTransferResults[i-1].transferId,",
                "    acceptParty: true,",
                "  })",
                "}",
                "",
                "custom.appendRequestBody({",
                "  individualTransfers: individualTransfers",
                "})",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "individualTransfers": []
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(environment.totalIndividualTransfers)"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-receiver-first-name-",
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-receiver-last-name-R",
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(callback.body.currentState).to.equal('COMPLETED')"
                ]
              },
              {
                "id": "Check-all-responses-have-fulfi",
                "description": "Check all the responses have fulfilment and transferId",
                "exec": [
                  "expect(callback.body.individualTransferResults.filter(transfer => transfer.fulfil.fulfilment && transfer.fulfil.transferId)).to.not.be.empty;",
                  ""
                ]
              },
              {
                "id": "Check-all-responses-don-t-have",
                "description": "Check all the responses don't have lastError",
                "exec": [
                  "expect(callback.body.individualTransferResults.filter(transfer => transfer.fulfil.lastError)).to.be.empty;",
                  ""
                ]
              },
              {
                "id": "Check-all-responses-have-trans",
                "description": "Check all the responses have transferState as COMMITTED",
                "exec": [
                  "expect(callback.body.individualTransferResults.filter(transfer => transfer.fulfil.transferState == 'COMMITTED')).to.not.be.empty;",
                  ""
                ]
              }
            ]
          },
          "disabled": false,
          "scripts": {
            "preRequest": {
              "exec": [
                "const individualTransfers = []",
                "for(let i=1; i<=environment.totalIndividualTransfers; i++) {",
                "  individualTransfers.push({",
                "    transferId: environment.acceptPartyCallback.body.individualTransferResults[i-1].transferId,",
                "    acceptQuote: true,",
                "  })",
                "}",
                "",
                "custom.appendRequestBody({",
                "  individualTransfers: individualTransfers",
                "})",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk/basic/bulk-high-volume_dynamic.json",
        "labels": [
          "basic"
        ]
      }
    }
  ]
}