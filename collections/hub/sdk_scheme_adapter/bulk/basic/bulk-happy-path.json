{
  "name": "Happy Path",
  "test_cases": [
    {
      "id": "tc-bhp1-when-the-66a6",
      "name": "TC-BHP1. When there are 4 transfers in the bulk request 2 of which that have the same receiver fsp id and the others has a different receiver fsp id and acceptParty is true for all the transfers, Then the PUT response should have details of all the 4 transfers.",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk/basic/bulk-happy-path.json",
        "labels": [
          "basic"
        ]
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": false,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}",
                "fspId": "{$inputs.TTKSIM1_FSPID}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_1}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_2}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "678.91"
              },
              {
                "homeTransactionId": "abc3",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM3_MSISDN_1}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM3_CURRENCY}",
                "amount": "678.91"
              },
              {
                "homeTransactionId": "abc4",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM3_MSISDN_2}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM3_CURRENCY}",
                "amount": "678.91"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(4)"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()+240000)).toISOString()"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.acceptPartyCallback = callback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "individualTransfers": [
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transferId}",
                "acceptParty": true
              },
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transferId}",
                "acceptParty": true
              },
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[2].transferId}",
                "acceptParty": true
              },
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[3].transferId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(4)"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result-fir",
                "description": "Check response has quote result for first transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition for first transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result-sec",
                "description": "Check response has quote result for second transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[1].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition for second transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[1].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[1].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result-thi",
                "description": "Check response has quote result for third transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[2].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition for third transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[2].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[2].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "postRequest": {
              "exec": [
                ""
              ]
            }
          },
          "disabled": false
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "individualTransfers": [
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transferId}",
                "acceptQuote": true
              },
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transferId}",
                "acceptQuote": true
              },
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[2].transferId}",
                "acceptQuote": true
              },
              {
                "transferId": "{$environment.acceptPartyCallback.body.individualTransferResults[3].transferId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(4)"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.to.partyIdInfo.partyIdentifier).to.equal('{$inputs.TTKSIM2_MSISDN_1}')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-receiver-first-name-",
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-receiver-last-name-R",
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(requestVariables.ttksim2msisdn1response.quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn1response.fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.to.partyIdInfo.partyIdentifier).to.equal('{$inputs.TTKSIM2_MSISDN_2}')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-receiver-first-name-",
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-receiver-last-name-R",
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(requestVariables.ttksim2msisdn2response.quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(requestVariables.ttksim2msisdn2response.fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.to.partyIdInfo.partyIdentifier).to.equal('{$inputs.TTKSIM3_MSISDN_1}')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-receiver-first-name-",
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-receiver-last-name-R",
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(requestVariables.ttksim3msisdn1response.quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(requestVariables.ttksim3msisdn1response.fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.to.partyIdInfo.partyIdentifier).to.equal('{$inputs.TTKSIM3_MSISDN_2}')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-receiver-first-name-",
                "description": "Check response receiver first name is ReceiverFirst",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.to.personalInfo.complexName.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-receiver-last-name-R",
                "description": "Check response receiver last name is ReceiverLast",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.to.personalInfo.complexName.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(requestVariables.sim3msisdn2response.quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(requestVariables.sim3msisdn2response.fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(callback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)"
              ]
            },
            "postRequest": {
              "exec": [
                "console.log(callback)",
                "",
                "requestVariables.ttksim2msisdn1response = callback.body.individualTransferResults.filter(transfer => (transfer.to.partyIdInfo.partyIdentifier === environment.TTKSIM2_MSISDN_1))[0]",
                "",
                "requestVariables.ttksim2msisdn2response = callback.body.individualTransferResults.filter(transfer => (transfer.to.partyIdInfo.partyIdentifier === environment.TTKSIM2_MSISDN_2))[0]",
                "",
                "requestVariables.ttksim3msisdn1response = callback.body.individualTransferResults.filter(transfer => (transfer.to.partyIdInfo.partyIdentifier === environment.TTKSIM3_MSISDN_1))[0]",
                "",
                "requestVariables.sim3msisdn2response = callback.body.individualTransferResults.filter(transfer => (transfer.to.partyIdInfo.partyIdentifier === environment.TTKSIM3_MSISDN_2))[0]"
              ]
            }
          },
          "disabled": false
        }
      ]
    },
    {
      "id": "tc-bhp3-when-the-363f",
      "name": "TC-BHP3. When the incoming request has a format issue that fails schema validation, Then the return code should be 400 instead of 202",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk/basic/bulk-happy-path.json",
        "labels": [
          "basic"
        ]
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "DOESNOTEXIST",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "DOESNOTEXIST",
                    "partyIdentifier": "{$TTKSIM2_MSISDN_1}",
                    "fspId": "{$TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$TTKSIM2_MSISDN_2}",
                    "fspId": "{$TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(400)",
                  ""
                ]
              },
              {
                "id": "Check-rsp-has-statusText-value",
                "description": "Check response has statusText with value Bad Request",
                "exec": [
                  "expect(response.statusText).to.equal('Bad Request')"
                ]
              },
              {
                "id": "Check-rsp-message-must-one-all",
                "description": "Check response body message should be must be equal to one of the allowed values",
                "exec": [
                  "expect(response.body.message).to.equal('must be equal to one of the allowed values')"
                ]
              },
              {
                "id": "Check-rsp-status-code-400",
                "description": "Check response body status code to be 400",
                "exec": [
                  "expect(response.body.statusCode).to.equal(400)"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()-5000)).toISOString()",
                "await inboundEvent.addListener('acceptPartyCallback', 'put', '/bulkTransactions/{$request.body.bulkTransactionId}')"
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        }
      ]
    }
  ]
}