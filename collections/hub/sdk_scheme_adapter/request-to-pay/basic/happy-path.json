{
  "options": {},
  "name": "basic_request-to-pay",
  "test_cases": [
    {
      "id": "request-to-pay",
      "name": "Request To Pay",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/request-to-pay/basic/happy-path.json"
      },
      "requests": [
        {
          "id": "POST-requestToPay",
          "description": "POST /requestToPay",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/requestToPay",
          "path": "/requestToPay",
          "method": "post",
          "body": {
            "homeR2PTransactionId": "abc123",
            "from": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.TTKSIM1_MSISDN_1}",
              "displayName": "Henrik",
              "firstName": "Henrik",
              "lastName": "Karlsson",
              "dateOfBirth": "1966-06-16",
              "fspId": "{$inputs.TTKSIM1_FSPID}"
            },
            "to": {
              "type": "CONSUMER",
              "idType": "MSISDN",
              "idValue": "{$inputs.TTKSIM2_MSISDN_1}"
            },
            "amountType": "RECEIVE",
            "currency": "{$inputs.TTKSIM1_CURRENCY}",
            "amount": "123",
            "transactionType": "DEPOSIT"
          },
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-rsp-has-fspid",
                "description": "Check response has fspid",
                "exec": [
                  "expect(response.body.to.fspId).to.equal('{$inputs.TTKSIM2_FSPID}')",
                  ""
                ]
              },
              {
                "id": "Check-rsp-first-name-ReceiverF",
                "description": "Check response first name is ReceiverFirst",
                "exec": [
                  "expect(response.body.to.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-last-name-ReceiverLa",
                "description": "Check response last name is ReceiverLast",
                "exec": [
                  "expect(response.body.to.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-party-result",
                "description": "Check response has party result",
                "exec": [
                  "expect(response.body.getPartiesResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-WAITING_FOR_PART",
                "description": "Check response has  WAITING_FOR_PARTY_ACCEPTANCE state",
                "exec": [
                  "expect(response.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE');"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(response.body.to.idValue).to.equal('{$inputs.TTKSIM2_MSISDN_1}')"
                ]
              }
            ]
          }
        },
        {
          "id": "PUT-requestToPay-party-confirm",
          "description": "PUT /requestToPay party confirmation",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/requestToPay/{transactionRequestId}",
          "path": "/requestToPay/{$prev.POST-requestToPay.response.body.transactionRequestId}",
          "method": "put",
          "params": {
            "transactionRequestId": "{$prev.POST-requestToPay.response.body.transactionRequestId}"
          },
          "body": {
            "acceptParty": true
          },
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "Check-rsp-has-fspid",
                "description": "Check response has fspid",
                "exec": [
                  "expect(response.body.to.fspId).to.equal('{$inputs.TTKSIM2_FSPID}')",
                  ""
                ]
              },
              {
                "id": "Check-rsp-first-name-ReceiverF",
                "description": "Check response first name is ReceiverFirst",
                "exec": [
                  "expect(response.body.to.firstName).to.equal('ReceiverFirst')"
                ]
              },
              {
                "id": "Check-rsp-last-name-ReceiverLa",
                "description": "Check response last name is ReceiverLast",
                "exec": [
                  "expect(response.body.to.lastName).to.equal('ReceiverLast')"
                ]
              },
              {
                "id": "Check-rsp-has-party-result",
                "description": "Check response has party result",
                "exec": [
                  "expect(response.body.getPartiesResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(response.body.currentState).to.equal('COMPLETED');"
                ]
              },
              {
                "id": "Check-rsp-has-transactionReque",
                "description": "Check response has transactionRequest response",
                "exec": [
                  "expect(response.body.transactionRequestResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-transactionReque",
                "description": "Check response has transactionRequestState as RECEIVED",
                "exec": [
                  "expect(response.body.transactionRequestResponse.body.transactionRequestState).to.equal('RECEIVED');"
                ]
              },
              {
                "id": "Inbound-Quotes-req-amt",
                "description": "Inbound Quotes Request - amount",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.amount).to.equal(response.body.amount)"
                ]
              },
              {
                "id": "Inbound-Quotes-req-curr",
                "description": "Inbound Quotes Request - currency",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.currency).to.equal(response.body.currency)"
                ]
              },
              {
                "id": "Inbound-Quotes-req-from-idValu",
                "description": "Inbound Quotes Request - from idValue",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.from.idValue).to.equal(response.body.to.idValue)"
                ]
              },
              {
                "id": "Inbound-Quotes-req-idValue",
                "description": "Inbound Quotes Request - to idValue",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.to.idValue).to.equal(response.body.from.idValue)"
                ]
              },
              {
                "id": "Inbound-Quotes-req-from-fspId",
                "description": "Inbound Quotes Request - from fspId",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.from.fspId).to.equal(response.body.to.fspId)"
                ]
              },
              {
                "id": "Inbound-Quotes-req-transaction",
                "description": "Inbound Quotes Request - transactionRequestId",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.transactionRequestId).to.equal(response.body.transactionRequestId)"
                ]
              },
              {
                "id": "Inbound-Quotes-req-homeR2PTran",
                "description": "Inbound Quotes Request - homeR2PTransactionId",
                "exec": [
                  "expect(environment.inboundQuotesRequest.body.homeR2PTransactionId).to.equal(response.body.homeR2PTransactionId)"
                ]
              },
              {
                "id": "Inbound-Transfers-req-amt",
                "description": "Inbound Transfers Request - amount",
                "exec": [
                  "expect(environment.inboundTransfersRequest.body.amount).to.equal(response.body.amount)"
                ]
              },
              {
                "id": "Inbound-Transfers-req-curr",
                "description": "Inbound Transfers Request - currency",
                "exec": [
                  "expect(environment.inboundTransfersRequest.body.currency).to.equal(response.body.currency)"
                ]
              },
              {
                "id": "Inbound-Transfers-req-quoteId",
                "description": "Inbound Transfers Request - quoteId",
                "exec": [
                  "expect(environment.inboundTransfersRequest.body.quote.quoteId).to.equal(environment.inboundQuotesRequest.body.quoteId)"
                ]
              },
              {
                "id": "Inbound-Transfers-req-transact",
                "description": "Inbound Transfers Request - transactionRequestId",
                "exec": [
                  "expect(environment.inboundTransfersRequest.body.transactionRequestId).to.equal(response.body.transactionRequestId)"
                ]
              },
              {
                "id": "Inbound-Transfers-req-homeR2PT",
                "description": "Inbound Transfers Request - homeR2PTransactionId",
                "exec": [
                  "expect(environment.inboundTransfersRequest.body.homeR2PTransactionId).to.equal(response.body.homeR2PTransactionId)"
                ]
              }
            ]
          },
          "scriptingEngine": "javascript",
          "scripts": {
            "preRequest": {
              "exec": [
                "await inboundEvent.addListener('inbound-quotes-request', 'post', '/quoterequests')",
                "await inboundEvent.addListener('inbound-transfers-request', 'post', '/transfers')"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.inboundQuotesRequest = await inboundEvent.getMessage('inbound-quotes-request')",
                "environment.inboundTransfersRequest = await inboundEvent.getMessage('inbound-transfers-request')"
              ]
            }
          }
        }
      ]
    }
  ]
}