{
  "name": "Transfers related error cases",
  "test_cases": [
    {
      "id": "bt-3-given-party-0fdf",
      "name": "BT-3. Given partyLookup is skipped And there are 2 transfers with the same receiver fspid in the request, And acceptParty, acceptQuote is true for both the requests , When Payee fsp sends response for only one of the transfers instead of 2 transfers, Then the callback response should only have the party and quote results for the transfer that payee fsp did not send the response and for the other transfer where payee fsp sent the transfer response should has party, quote and transfer results. The story for this feature is github.com/mojaloop/project/issues/3015. Need to test this once this story implementation is complete.",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk-mvp-out-of-scope/bulk-transfers-error-case-mvp-out-of-scope.json"
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$TTKSIM2_MSISDN_1}",
                    "fspId": "{$TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$TTKSIM2_CURRENCY}",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$TTKSIM2_MSISDN_2}",
                    "fspId": "receiverfsphas1id"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "678.91"
              }
            ]
          },
          "url": "http://payer-sdk-api-svc:4001",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "await inboundEvent.addListener('acceptPartyCallback', 'put', '/bulkTransactions/{$request.body.bulkTransactionId}')"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptPartyCallback = await inboundEvent.getMessage('acceptPartyCallback')",
                "console.log(acceptPartyCallback);",
                "",
                "environment.bulkTransactionId = acceptPartyCallback.body.bulkTransactionId;",
                "",
                "environment.acceptPartyCallback = acceptPartyCallback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('acceptQuoteCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptQuoteCallback = await inboundEvent.getMessage('acceptQuoteCallback')",
                "",
                "console.log(acceptQuoteCallback)",
                "",
                "environment.acceptQuoteCallback = acceptQuoteCallback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "url": "http://payer-sdk-api-svc:4001",
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('56781234')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(environment.transfersCallback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('transfersCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const transfersCallback = await inboundEvent.getMessage('transfersCallback')",
                "",
                "console.log(transfersCallback)",
                "",
                "environment.transfersCallback = transfersCallback;"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "tc-bt4-given-par-e437",
      "name": "TC-BT4. Given partyLookup is skipped And there are 2 transfers with the same receiver fspid in the request, And acceptParty, acceptQuote is true for both the requests , When Payee fsp sends success response for one of the transfers and a failure response for the other transfer, Then the callback response should have the party and quote results for the transfer that payee fsp sent failure response and for the other transfer where payee fsp sent the transfer response should has party, quote and transfer results",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk-mvp-out-of-scope/bulk-transfers-error-case-mvp-out-of-scope.json"
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_1}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "456.78",
                "note": "blktrbatchpartialsuccess"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM3_MSISDN_1}",
                    "fspId": "{$inputs.TTKSIM3_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM3_CURRENCY}",
                "amount": "678.91",
                "note": "blktrbatchpartialsuccess"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()+5000)).toISOString()"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.acceptPartyCallback = callback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('123456789')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(callback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "tc-bt5-given-par-b753",
      "name": "TC-BT5. Given partyLookup is skipped And there are 2 transfers with the same receiver fspid in the request, When acceptParty is true for both the transfers And acceptQuote is false for one of the requests and true for the other request, Then the callback response should only have the party and quote results for the transfer that has acceptQuote false and for the other transfer has party, quote and transfer results",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk-mvp-out-of-scope/bulk-transfers-error-case-mvp-out-of-scope.json"
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_1}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "456.78"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_2}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "678.91"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()+5000)).toISOString()"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.acceptPartyCallback = callback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result-fir",
                "description": "Check response has quote result for first transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition for first transfer",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": false
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(callback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "tc-bt9---given-t-8475",
      "name": "TC-BT9 - Given there are 2 transfers in the request with the same receiver fspid, When the transfer amount exceeds NDC for one of the transfers, Then the final PUT response should have error details  for the transfer that exceeded NDC and success details for the other transfer",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk-mvp-out-of-scope/bulk-transfers-error-case-mvp-out-of-scope.json"
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}",
                "fspId": "{$inputs.TTKSIM1_FSPID}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_1}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "123.45",
                "note": "blktrbatchwith1trresponse"
              },
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.SIM1_MSISDN_2}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "USD",
                "amount": "123456789.45",
                "note": "blktrbatchwith1trresponse"
              }
            ]
          },
          "url": "{$inputs.SIM1_BACKEND_ENDPOINT}",
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptPartyCallback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()+120000)).toISOString()",
                "await inboundEvent.addListener('acceptPartyCallback', 'put', '/bulkTransactions/{$request.body.bulkTransactionId}')"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptPartyCallback = await inboundEvent.getMessage('acceptPartyCallback')",
                "console.log(acceptPartyCallback);",
                "",
                "environment.bulkTransactionId = acceptPartyCallback.body.bulkTransactionId;",
                "",
                "environment.acceptPartyCallback = acceptPartyCallback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "url": "{$inputs.SIM1_BACKEND_ENDPOINT}",
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(environment.acceptQuoteCallback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('acceptQuoteCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const acceptQuoteCallback = await inboundEvent.getMessage('acceptQuoteCallback')",
                "",
                "console.log(acceptQuoteCallback)",
                "",
                "environment.acceptQuoteCallback = acceptQuoteCallback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 0,
            "majorVersion": 1,
            "type": "scheme_adapter_outbound",
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_1.0/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "url": "{$inputs.SIM1_BACKEND_ENDPOINT}",
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.partyIdentifier).to.equal('56781234')"
                ]
              },
              {
                "id": "Check-first-rsp-has-receiver-f",
                "description": "Check first response has the receiver fspid populated",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-first-rsp-has-quote-resu",
                "description": "Check first response has quote result",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-first-rsp-has-ilpPacket-",
                "description": "Check first response has ilpPacket and condition",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-first-rsp-has-error-deta",
                "description": "Check first response has error details for transfer response",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[0].lastError.httpStatusCode).to.equal(500);",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[0].lastError.mojaloopError.errorInformation.errorCode).to.equal('4001');",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[0].lastError.mojaloopError.errorInformation.errorDescription).to.equal('Cannot process the bulk transfer');"
                ]
              },
              {
                "id": "Check-second-rsp-has-receiver-",
                "description": "Check second response has the receiver fspid populated",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[1].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-second-rsp-has-quote-res",
                "description": "Check second response has quote result",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[1].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-second-rsp-has-ilpPacket",
                "description": "Check second response has ilpPacket and condition",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[1].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[1].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-second-rsp-has-error-det",
                "description": "Check second response has error details for transfer response",
                "exec": [
                  "expect(environment.transfersCallback.body.individualTransferResults[1].lastError.httpStatusCode).to.equal(500);",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[1].lastError.mojaloopError.errorInformation.errorCode).to.equal('4001');",
                  "",
                  "expect(environment.transfersCallback.body.individualTransferResults[1].lastError.mojaloopError.errorInformation.errorDescription).to.equal('Cannot process the bulk transfer');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(environment.transfersCallback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "console.log(environment.bulkTransactionId)",
                "",
                "await inboundEvent.addListener('transfersCallback', 'put', `/bulkTransactions/${environment.bulkTransactionId}`)"
              ]
            },
            "postRequest": {
              "exec": [
                "const transfersCallback = await inboundEvent.getMessage('transfersCallback')",
                "",
                "console.log(transfersCallback)",
                "",
                "environment.transfersCallback = transfersCallback;"
              ]
            }
          }
        }
      ]
    },
    {
      "id": "tc-bt4-given-par-e437",
      "name": "TC-BT4. Given partyLookup is skipped And there are 2 transfers with the same receiver fspid in the request, And acceptParty, acceptQuote is true for both the requests , When Payee fsp sends success response for one of the transfers and a failure response for the other transfer, Then the callback response should have the party and quote results for the transfer that payee fsp sent failure response and for the other transfer where payee fsp sent the transfer response should has party, quote and transfer results",
      "fileInfo": {
        "path": "hub/sdk_scheme_adapter/bulk-mvp-out-of-scope/bulk-transfers-error-case-mvp-out-of-scope.json"
      },
      "requests": [
        {
          "id": "Post-bulkTransaction",
          "description": "Post /bulkTransaction",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions",
          "path": "/bulkTransactions",
          "method": "post",
          "body": {
            "bulkHomeTransactionID": "abc123",
            "bulkTransactionId": "{$function.generic.generateID}",
            "options": {
              "onlyValidateParty": true,
              "autoAcceptParty": {
                "enabled": false
              },
              "autoAcceptQuote": {
                "enabled": false
              },
              "skipPartyLookup": true,
              "synchronous": false,
              "bulkExpiration": "{$requestVariables.bulkTimeout}"
            },
            "from": {
              "partyIdInfo": {
                "partyIdType": "MSISDN",
                "partyIdentifier": "{$inputs.TTKSIM1_MSISDN_1}"
              }
            },
            "individualTransfers": [
              {
                "homeTransactionId": "abc1",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_1}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "456.78",
                "note": "blktrbatchpartialsuccess"
              },
              {
                "homeTransactionId": "abc2",
                "to": {
                  "partyIdInfo": {
                    "partyIdType": "MSISDN",
                    "partyIdentifier": "{$inputs.TTKSIM2_MSISDN_1}",
                    "fspId": "{$inputs.TTKSIM2_FSPID}"
                  }
                },
                "amountType": "SEND",
                "currency": "{$inputs.TTKSIM2_CURRENCY}",
                "amount": "678.91",
                "note": "blktrbatchpartialsuccess"
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)",
                  ""
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-current-state-WAITING_FO",
                "description": "Check current state is WAITING_FOR_PARTY_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_PARTY_ACCEPTANCE')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "requestVariables.bulkTimeout = (new Date(Date.now()+5000)).toISOString()"
              ]
            },
            "postRequest": {
              "exec": [
                "environment.acceptPartyCallback = callback;"
              ]
            }
          }
        },
        {
          "id": "put-bulk-txn-acceptParty",
          "description": "put bulk transaction for acceptParty",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptParty": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptParty": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-state-WAITING_FOR_QUOTE_",
                "description": "Check state is WAITING_FOR_QUOTE_ACCEPTANCE",
                "exec": [
                  "expect(callback.body.currentState).to.equal('WAITING_FOR_QUOTE_ACCEPTANCE')"
                ]
              }
            ]
          }
        },
        {
          "id": "put-bulk-txn-acceptQuote",
          "description": "put bulk transaction for acceptQuote",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 2,
            "type": "scheme_adapter_outbound",
            "asynchronous": true,
            "prefix": "/sdk-out",
            "hostnames": [],
            "specFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/api_spec.yaml",
            "callbackMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/callback_map.json",
            "responseMapFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/response_map.json",
            "jsfRefFile": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/mockRef.json",
            "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_sdk_outbound_scheme_adapter_2.1/trigger_templates"
          },
          "operationPath": "/bulkTransactions/{bulkTransactionId}",
          "path": "/bulkTransactions/{$prev.Post-bulkTransaction.request.body.bulkTransactionId}",
          "method": "put",
          "params": {
            "bulkTransactionId": "{$prev.Post-bulkTransaction.request.body.bulkTransactionId}"
          },
          "body": {
            "bulkHomeTransactionID": "{$prev.Post-bulkTransaction.request.body.bulkHomeTransactionID}",
            "individualTransfers": [
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[0].transactionId}",
                "acceptQuote": true
              },
              {
                "homeTransactionId": "abc456",
                "transactionId": "{$environment.acceptPartyCallback.body.individualTransferResults[1].transactionId}",
                "acceptQuote": true
              }
            ]
          },
          "scriptingEngine": "javascript",
          "tests": {
            "assertions": [
              {
                "id": "Check-Return-Status-Code",
                "description": "Check Return Status Code",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "Check-number-returned-transfer",
                "description": "Check number of returned transfers",
                "exec": [
                  "expect(callback.body.individualTransferResults.length).to.equal(2)"
                ]
              },
              {
                "id": "Check-rsp-MSISDN-req",
                "description": "Check response MSISDN is same as in the request",
                "exec": [
                  "expect(callback.body.individualTransferResults.map(t => t.to.partyIdInfo.partyIdentifier)).to.include('123456789')"
                ]
              },
              {
                "id": "Check-rsp-has-receiver-fspid-p",
                "description": "Check response has the receiver fspid populated",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].to.partyIdInfo.fspId).to.not.be.empty"
                ]
              },
              {
                "id": "Check-rsp-has-quote-result",
                "description": "Check response has quote result",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-ilpPacket-condit",
                "description": "Check response has ilpPacket and condition",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].quoteResponse.ilpPacket).to.not.be.empty;",
                  "",
                  "expect(callback.body.individualTransferResults[0].quoteResponse.condition).to.not.be.empty;"
                ]
              },
              {
                "id": "Check-rsp-has-fulfillment",
                "description": "Check response has  fulfillment",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.fulfilment).to.exist;"
                ]
              },
              {
                "id": "Check-rsp-has-COMPLETED-state",
                "description": "Check response has  COMPLETED state",
                "exec": [
                  "expect(callback.body.individualTransferResults[0].fulfil.transferState).to.equal('COMMITTED');"
                ]
              },
              {
                "id": "Check-overall-bulk-txn-state-C",
                "description": "Check overall bulk transaction state is COMPLETED",
                "exec": [
                  "expect(callback.body.currentState).to.equal('COMPLETED')"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}