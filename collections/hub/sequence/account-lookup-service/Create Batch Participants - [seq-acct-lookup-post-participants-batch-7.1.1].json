{
  "name": "Create Batch Participant Details - [seq-acct-lookup-post-participants-batch-7.1.1]",
  "test_cases": [
    {
      "id": "create-participa-b010",
      "name": "Create Participants Batch - Happy Path - [seq-acct-lookup-post-participants-batch-7.1.1]",
      "meta": {
        "info": "Create Participants Batch - Happy Path - [seq-acct-lookup-post-participants-batch-7.1.1]"
      },
      "requests": [
        {
          "id": "Create-Participants-Batch",
          "meta": {
            "info": "Create Participants Batch"
          },
          "description": "Create Participants Batch",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants",
          "path": "/participants",
          "method": "post",
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "requestId": "{$function.generic.generateUUID}",
            "partyList": [
              {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.batchToIdValue1}",
                "fspId": "{$inputs.fromFspId}"
              },
              {
                "partyIdType": "{$inputs.toIdType}",
                "partyIdentifier": "{$inputs.batchToIdValue2}",
                "fspId": "{$inputs.fromFspId}"
              }
            ],
            "currency": "{$inputs.currency}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "rsp-statusText-OK",
                "description": "Response statusText be OK",
                "exec": [
                  "expect(response.statusText).to.equal('OK')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-partyList",
                "description": "Callback body should contain partyList",
                "exec": [
                  "expect(callback.body).to.have.property('partyList')"
                ]
              },
              {
                "id": "cb-curr",
                "description": "Callback body should contain currency",
                "exec": [
                  "expect(callback.body).to.have.property('currency')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "\r",
                "const curDate = (new Date()).toUTCString()\r",
                "\r",
                "\r",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Participants-Details",
          "meta": {
            "info": "Get Participants Details"
          },
          "description": "Get Participants Details",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue1}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-fspId",
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": "cb-fspId-src",
                "description": "Callback fspId should be same as fspiop-source",
                "exec": [
                  "expect(callback.body.fspId).to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-part-Details-second-party",
          "meta": {
            "info": "Get Participant Details second party"
          },
          "description": "Get Participant Details second party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue2}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue2}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-fspId",
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": "cb-fspId-src",
                "description": "Callback fspId should be same as fspiop-source",
                "exec": [
                  "expect(callback.body.fspId).to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/sequence/account-lookup-service/Create Batch Participants - [seq-acct-lookup-post-participants-batch-7.1.1].json"
      }
    },
    {
      "id": "delete-added-par-aab2",
      "name": "Delete Added Participant Details - [seq-acct-lookup-del-participants-7.1.2]",
      "meta": {
        "info": "Delete Added Participant Details - [seq-acct-lookup-del-participants-7.1.2]"
      },
      "requests": [
        {
          "id": "Delete-part-Details-Happy-Path",
          "meta": {
            "info": "Delete Participant Details - Happy Path - [seq-acct-lookup-del-participants-7.1.2]"
          },
          "description": "Delete Participant Details - Happy Path - [seq-acct-lookup-del-participants-7.1.2]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue1}",
          "method": "delete",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-fspId",
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        },
        {
          "id": "Delete-Second-part-Happy-Path-",
          "meta": {
            "info": "Delete Second Participant - Happy Path - [seq-acct-lookup-del-participants-7.1.2]"
          },
          "description": "Delete Second Participant - Happy Path - [seq-acct-lookup-del-participants-7.1.2]",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue2}",
          "method": "delete",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue2}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "FSPIOP-Source": "{$inputs.fromFspId}",
            "Date": "{$function.generic.curDate}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-fspId",
                "description": "Callback body should contain fspId",
                "exec": [
                  "expect(callback.body).to.have.property('fspId')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/sequence/account-lookup-service/Create Batch Participants - [seq-acct-lookup-post-participants-batch-7.1.1].json"
      }
    },
    {
      "id": "create-participa-eef0",
      "name": "Create Participants Batch - Error Invalid IdType - [seq-acct-lookup-post-participants-batch-7.1.1]",
      "meta": {
        "info": "Create Participants Batch - Error Invalid IdType - [seq-acct-lookup-post-participants-batch-7.1.1]"
      },
      "requests": [
        {
          "id": "Create-Participants-Batch",
          "meta": {
            "info": "Create Participants Batch"
          },
          "description": "Create Participants Batch",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants",
          "path": "/participants",
          "method": "post",
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "body": {
            "requestId": "{$function.generic.generateUUID}",
            "partyList": [
              {
                "partyIdType": "{$inputs.invalidToIdType}",
                "partyIdentifier": "{$inputs.batchToIdValue1}",
                "fspId": "{$inputs.fromFspId}"
              },
              {
                "partyIdType": "{$inputs.invalidToIdType}",
                "partyIdentifier": "{$inputs.batchToIdValue2}",
                "fspId": "{$inputs.fromFspId}"
              }
            ],
            "currency": "{$inputs.currency}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-200",
                "description": "Response status to be 200",
                "exec": [
                  "expect(response.status).to.equal(200)"
                ]
              },
              {
                "id": "rsp-statusText-OK",
                "description": "Response statusText be OK",
                "exec": [
                  "expect(response.statusText).to.equal('OK')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-errorInformation",
                "description": "Callback body should contain errorInformation",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              },
              {
                "id": "cb-errorCode-errorDescription",
                "description": "Callback body should contain errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3003')",
                  "expect(callback.body.errorInformation.errorDescription).to.include('Oracle type:ACCOUNT_ID not found')"
                ]
              },
              {
                "id": "req-src-inputs-fromFspId",
                "description": "Request FSPIOP-Source same as inputs fromFspId",
                "exec": [
                  "expect('{$request.headers['FSPIOP-Source']}').to.equal('{$inputs.fromFspId}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "\r",
                "const curDate = (new Date()).toUTCString()\r",
                "\r",
                "\r",
                ""
              ]
            },
            "postRequest": {
              "exec": [
                ""
              ]
            }
          }
        },
        {
          "id": "Get-Participants-Details",
          "meta": {
            "info": "Get Participants Details"
          },
          "description": "Get Participants Details",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue1}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue1}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-errorInformation",
                "description": "Callback body should contain errorInformation",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              },
              {
                "id": "cb-errorCode-errorDescription",
                "description": "Callback body should contain errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3204')",
                  "expect(callback.body.errorInformation.errorDescription).to.equal('Party not found')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        },
        {
          "id": "Get-part-Details-second-party",
          "meta": {
            "info": "Get Participant Details second party"
          },
          "description": "Get Participant Details second party",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/participants/{Type}/{ID}",
          "path": "/participants/MSISDN/{$inputs.batchToIdValue2}",
          "method": "get",
          "params": {
            "Type": "MSISDN",
            "ID": "{$inputs.batchToIdValue2}"
          },
          "url": "{$inputs.HOST_ACCOUNT_LOOKUP_SERVICE}",
          "headers": {
            "Accept": "{$inputs.acceptParticipants}",
            "Content-Type": "{$inputs.contentTypeParticipants}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.fromFspId}"
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-statusText-Accepted",
                "description": "Response statusText be Accepted",
                "exec": [
                  "expect(response.statusText).to.equal('Accepted')"
                ]
              },
              {
                "id": "cb-Content-Length-not-0",
                "description": "Callback Content Length not 0",
                "exec": [
                  "expect(callback.headers['Content-Length']).to.not.equal('0')"
                ]
              },
              {
                "id": "cb-errorInformation",
                "description": "Callback body should contain errorInformation",
                "exec": [
                  "expect(callback.body).to.have.property('errorInformation')"
                ]
              },
              {
                "id": "cb-content-type-participants",
                "description": "Callback content-type to be participants",
                "exec": [
                  "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.participants+json;version={$inputs.expectedParticipantsVersion}')"
                ]
              },
              {
                "id": "cb-errorCode-errorDescription",
                "description": "Callback body should contain errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('3204')",
                  "expect(callback.body.errorInformation.errorDescription).to.equal('Party not found')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSPIOP-Destination same as request FSPIOP-Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              }
            ]
          },
          "scripts": {
            "preRequest": {
              "exec": [
                "const curDate = (new Date()).toUTCString()\r",
                ""
              ]
            }
          }
        }
      ],
      "fileInfo": {
        "path": "hub/sequence/account-lookup-service/Create Batch Participants - [seq-acct-lookup-post-participants-batch-7.1.1].json"
      }
    }
  ]
}