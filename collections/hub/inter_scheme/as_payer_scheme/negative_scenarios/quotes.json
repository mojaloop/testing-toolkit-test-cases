{
  "name": "Quotes Negative Scenarios",
  "test_cases": [
    {
      "id": "1",
      "name": "Test Case for Bad Request - 400",
      "requests": [
        {
          "id": "Quote-req",
          "description": "Quote request",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                },
                "dateOfBirth": "{$inputs.PROXY_PAYERFSP_PARTY_DOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-400",
                "description": "Response status to be 400",
                "exec": [
                  "expect(response.status).to.equal(400)"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "2",
      "name": "Test Case for scenario where the receiving dfsp is not in payer proxy cache",
      "requests": [
        {
          "id": "Send-party-lookup-req",
          "description": "Send party lookup request",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                },
                "dateOfBirth": "{$inputs.PROXY_PAYERFSP_PARTY_DOB}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_NOT_IN_PAYER_PROXY_CACHE}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode-errorDesc",
                "description": "Callback response has errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('${inputs.PROXY_PAYEEFSP_PARTY_ID_NOT_IN_PAYER_PROXY_CACHE_ERROR_CODE}')",
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          },
          "disabled": true
        }
      ]
    },
    {
      "id": "3",
      "name": "Test Case for scenario when there is an error in proxy",
      "requests": [
        {
          "id": "Send-party-lookup-req",
          "description": "Send party lookup request",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_ERROR_IN_PROXY}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "rsp-src-hdr-proxy",
                "description": "Response Source Header should be proxy",
                "exec": [
                  "expect(callback.headers['fspiop-source']).to.equal('{$inputs.PROXY_HEADER}')"
                ]
              },
              {
                "id": "cb-dest-req-src",
                "description": "Callback FSP Destination equal to request FSP Source",
                "exec": [
                  "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode",
                "description": "Callback response has errorCode",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID_ERROR_IN_PROXY_ERROR_CODE}')"
                ]
              },
              {
                "id": "cb-rsp-has-errorDescription",
                "description": "Callback response has  errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "4",
      "name": "Test Case for scenario when there is an error in payee scheme",
      "requests": [
        {
          "id": "Negative-test-case-error-code-",
          "description": "Negative test case for error code 2xxx",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                }
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_ERROR_PAYEE_SCHEME_2XXX}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode-errorDesc",
                "description": "Callback response has errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYEE_SCHEME_ERROR_CODE_2XXX}')",
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          }
        },
        {
          "id": "Negative-test-case-error-code--1",
          "description": "Negative test case for error code 3xxx",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                }
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_ERROR_PAYEE_SCHEME_3XXX}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode-errorDesc",
                "description": "Callback response has errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYEE_SCHEME_ERROR_CODE_3XXX}')",
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          }
        },
        {
          "id": "Negative-test-case-error-code--2",
          "description": "Negative test case for error code 4xxx",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                }
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_ERROR_PAYEE_SCHEME_4XXX}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode-errorDesc",
                "description": "Callback response has errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYEE_SCHEME_ERROR_CODE_4XXX}')",
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          }
        },
        {
          "id": "Negative-test-case-error-code--3",
          "description": "Negative test case for error code 5xxx",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                }
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_ERROR_PAYEE_SCHEME_5XXX}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode-errorDesc",
                "description": "Callback response has errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYEE_SCHEME_ERROR_CODE_5XXX}')",
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "id": "5",
      "name": "Test Case for scenario when there is an error in payee dfsp",
      "requests": [
        {
          "id": "Negative-test-case-error-code-",
          "description": "Negative test case for error code 5xxx",
          "apiVersion": {
            "minorVersion": 1,
            "majorVersion": 1,
            "type": "fspiop",
            "asynchronous": true
          },
          "url": "{$inputs.HOST_QUOTING_SERVICE}",
          "operationPath": "/quotes",
          "method": "post",
          "headers": {
            "Accept": "{$inputs.acceptQuotes}",
            "Content-Type": "{$inputs.contentTypeQuotes}",
            "Date": "{$function.generic.curDate}",
            "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
            "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
            "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
          },
          "body": {
            "quoteId": "{$function.generic.generateID}",
            "transactionId": "{$function.generic.generateID}",
            "transactionRequestId": "{$function.generic.generateID}",
            "payer": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}"
              },
              "personalInfo": {
                "complexName": {
                  "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                  "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                }
              }
            },
            "payee": {
              "partyIdInfo": {
                "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                "partyIdentifier": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_PARTY_ID_ERROR}",
                "fspId": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
              }
            },
            "amountType": "RECEIVE",
            "amount": {
              "amount": "{$inputs.PROXY_AMOUNT}",
              "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
            },
            "transactionType": {
              "scenario": "TRANSFER",
              "initiator": "PAYER",
              "initiatorType": "CONSUMER"
            }
          },
          "tests": {
            "assertions": [
              {
                "id": "rsp-status-202",
                "description": "Response status to be 202",
                "exec": [
                  "expect(response.status).to.equal(202)"
                ]
              },
              {
                "id": "cb-rsp-has-errorCode-errorDesc",
                "description": "Callback response has errorCode and errorDescription",
                "exec": [
                  "expect(callback.body.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYER_TEST_PAYEE_DFSP_ERROR_CODE_5XXX}')",
                  "expect(callback.body.errorInformation).to.have.property('errorDescription')"
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}