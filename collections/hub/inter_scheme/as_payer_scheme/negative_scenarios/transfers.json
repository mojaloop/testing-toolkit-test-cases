{
    "name": "Transfers Negative Scenarios",
    "test_cases": [
      {
        "id": 1,
        "name": "Test Case for scenario when there is an error in proxy",
        "requests": [
          {
            "id": 1,
            "meta": {
              "info": "Test Case for scenario when there is an error in proxy"
            },
            "description": "Send transfer",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "url": "{$inputs.HOST_ML_API_ADAPTER}",
            "operationPath": "/transfers",
            "method": "post",
            "headers": {
              "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
            },
            "body": {
              "transferId": "{$function.generic.generateID}",
              "payerFsp": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
              "payeeFsp": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}",
              "amount": {
                "amount": "{$inputs.PROXY_PAYEEFSP_AMOUNT_ERROR_IN_PROXY}",
                "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
              },
              "expiration": "{$inputs.expiration}",
              "ilpPacket": "{$inputs.ilpPacket}",
              "condition": "{$inputs.condition}"
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                }
              ]
            },
            "path": "/transfers",

            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          }
        ],
        "fileInfo": {
          "path": "hub/golden_path/quoting_service/quoting_service.json",
          "labels": [
            "quotes"
          ]
        }
      },
      {
        "id": 2,
        "name": "Test Case for scenario when there is an error in payee scheme",
        "requests": [
          {
            "id": 1,
            "meta": {
              "info": "Test Case for scenario when there is an error in proxy"
            },
            "description": "Send transfer",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "url": "{$inputs.HOST_ML_API_ADAPTER}",
            "operationPath": "/transfers",
            "method": "post",
            "headers": {
              "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
            },
            "body": {
              "transferId": "{$function.generic.generateID}",
              "payerFsp": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
              "payeeFsp": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}",
              "amount": {
                "amount": "{$inputs.PROXY_PAYEEFSP_AMOUNT_ERROR_IN_PROXY}",
                "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
              },
              "expiration": "{$inputs.expiration}",
              "ilpPacket": "{$inputs.ilpPacket}",
              "condition": "{$inputs.condition}"
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                }
              ]
            },
            "path": "/transfers",

            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          }
        ],
        "fileInfo": {
          "path": "hub/golden_path/quoting_service/quoting_service.json",
          "labels": [
            "quotes"
          ]
        }
      },
      {
        "id": 3,
        "name": "Test Case for scenario when there is an error in payee dfsp",
        "requests": [
          {
            "id": 1,
            "meta": {
              "info": "Test Case for scenario when there is an error in proxy"
            },
            "description": "Send transfer",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "url": "{$inputs.HOST_ML_API_ADAPTER}",
            "operationPath": "/transfers",
            "method": "post",
            "headers": {
              "Accept": "application/vnd.interoperability.transfers+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.transfers+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "FSPIOP-Destination": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}"
            },
            "body": {
              "transferId": "{$function.generic.generateID}",
              "payerFsp": "{$inputs.PROXY_PAYER_TEST_PAYERFSP_ID}",
              "payeeFsp": "{$inputs.PROXY_PAYER_TEST_PAYEEFSP_ID}",
              "amount": {
                "amount": "{$inputs.PROXY_PAYEEFSP_AMOUNT_ERROR_IN_PROXY}",
                "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
              },
              "expiration": "{$inputs.expiration}",
              "ilpPacket": "{$inputs.ilpPacket}",
              "condition": "{$inputs.condition}"
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                }
              ]
            },
            "path": "/transfers",

            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          }
        ],
        "fileInfo": {
          "path": "hub/golden_path/quoting_service/quoting_service.json",
          "labels": [
            "quotes"
          ]
        }
      }
    ]
  }