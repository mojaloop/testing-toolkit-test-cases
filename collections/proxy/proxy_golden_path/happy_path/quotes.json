{
    "name": "Quotes Happy Path",
    "test_cases": [
      {
        "id": 1,
        "name": "Proxy Quoting Service",
        "requests": [
          {
            "id": 1,
            "meta": {
              "info": "This request allows us to send a request for Quote (payerfsp to payeefsp), for the calculation of possible fees and FSP commission involved in performing an interoperable financial transaction."
            },
            "description": "Send quote",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes",
            "method": "post",
            "headers": {
              "Accept": "application/vnd.interoperability.quotes+json;version=1.0",
              "Content-Type": "application/vnd.interoperability.quotes+json;version=1.0",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.PROXY_PAYERFSP_ID}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "FSPIOP-Destination": "{$inputs.PROXY_PAYEEFSP_ID}"
            },
            "body": {
              "quoteId": "{$function.generic.generateUUID}",
              "transactionId": "{$function.generic.generateUUID}",
              "transactionRequestId": "{$function.generic.generateUUID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.PROXY_PAYERFSP_PARTY_ID_TYPE}",
                  "partyIdentifier": "{$inputs.PROXY_PAYERFSP_PARTY_ID}",
                  "fspId": "{$inputs.PROXY_PAYERFSP_ID}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.PROXY_PAYERFSP_PARTY_FIRST_NAME}",
                    "lastName": "{$inputs.PROXY_PAYERFSP_PARTY_LAST_NAME}"
                  },
                  "dateOfBirth": "{$inputs.PROXY_PAYERFSP_PARTY_DOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}",
                  "partyIdentifier": "{$inputs.PROXY_PAYEEFSP_PARTY_ID}",
                  "fspId": "{$inputs.PROXY_PAYEEFSP_ID}"
                }
              },
              "amountType": "RECEIVE",
              "amount": {
                "amount": "{$inputs.PROXY_AMOUNT}",
                "currency": "{$inputs.PROXY_AMOUNT_CURRENCY}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              }
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response statusText be Accepted",
                  "exec": [
                    "expect(response.statusText).to.equal('Accepted')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Callback Content Length not 0",
                  "exec": [
                    "expect(callback.headers['Content-Length']).to.not.equal('0')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Callback FSP Source equal to request FSP Destination",
                  "exec": [
                    "expect(callback.headers['fspiop-source']).to.equal('{$request.headers['FSPIOP-Destination']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback FSP Destination equal to request FSP Source",
                  "exec": [
                    "expect(callback.headers['fspiop-destination']).to.equal('{$request.headers['FSPIOP-Source']}')"
                  ]
                },
                {
                  "id": 5,
                  "description": "Callback body should contain transferAmount",
                  "exec": [
                    "expect(callback.body).to.have.property('transferAmount')"
                  ]
                },
                {
                  "id": 6,
                  "description": "Callback transferAmount (amount & currency)to match the request",
                  "exec": [
                    "expect(callback.body.transferAmount.amount).to.equal('{$request.body.amount.amount}')",
                    "expect(callback.body.transferAmount.currency).to.equal('{$request.body.amount.currency}')"
                  ]
                },
                {
                  "id": 7,
                  "description": "Callback content-type to be quotes",
                  "exec": [
                    "expect(callback.headers['content-type']).to.equal('application/vnd.interoperability.quotes+json;version={$inputs.expectedQuotesVersion}')"
                  ]
                },
                {
                  "id": 8,
                  "description": "Request amountType to be RECEIVE",
                  "exec": [
                    "expect('{$request.body.amountType}').to.equal('RECEIVE')"
                  ]
                },
                {
                  "id": 9,
                  "description": "Request transactionType scenario to be TRANSFER",
                  "exec": [
                    "expect('{$request.body.transactionType.scenario}').to.equal('TRANSFER')"
                  ]
                },
                {
                  "id": 10,
                  "description": "Request transactionType initiator to be PAYER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiator}').to.equal('PAYER')"
                  ]
                },
                {
                  "id": 11,
                  "description": "Request transactionType initiatorType to be CONSUMER",
                  "exec": [
                    "expect('{$request.body.transactionType.initiatorType}').to.equal('CONSUMER')"
                  ]
                }
              ]
            },
            "path": "/quotes",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "scripts": {
              "preRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  await websocket.connect(environment.PAYEEFSP_SDK_TESTAPI_WS_URL + '/requests/{$request.body.quoteId}', 'payeeRequest')",
                  "}"
                ]
              },
              "postRequest": {
                "exec": [
                  "if (environment.ENABLE_WS_ASSERTIONS===true) {",
                  "  environment.payeeRequest = await websocket.getMessage('payeeRequest', environment.WS_ASSERTION_TIMEOUT)",
                  "}"
                ]
              }
            }
          },
          {
            "id": 5,
            "meta": {
              "info": "Get health status of Quoting Service"
            },
            "description": "Get health status of Quoting Service",
            "apiVersion": {
              "minorVersion": 0,
              "majorVersion": 1,
              "type": "central_admin"
            },
            "operationPath": "/health",
            "path": "/health",
            "method": "get",
            "url": "{$inputs.HOST_QUOTING_SERVICE_HANDLER}",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 200",
                  "exec": [
                    "expect(response.status).to.equal(200)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Response services to be an array",
                  "exec": [
                    "expect(response.body.services).to.be.an('array');"
                  ]
                },
                {
                  "id": 3,
                  "description": "Expected services to have data store and status is OK",
                  "exec": [
                    "if(!environment.SIMPLE_ROUTING_MODE_ENABLED) {",
                    "  expect(environment.datastoreOKx).to.be.an('object')",
                    "}"
                  ]
                }
              ]
            },
            "scriptingEngine": "javascript",
            "headers": {
              "FSPIOP-Source": "{$inputs.payerfsp}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "scripts": {
              "postRequest": {
                "exec": [
                  " const datastoreOK = response.body.services.find(item => {\r",
                  "               return item.name=='datastore' && item.status=='OK'; \r",
                  "            });\r",
                  "            \r",
                  "environment.datastoreOKx=datastoreOK;            \r",
                  "console.log(environment.datastoreOKx);"
                ]
              }
            }
          },
          {
            "id": 6,
            "meta": {
              "info": "Get Quote"
            },
            "description": "Get Quote",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes/{ID}",
            "path": "/quotes/{$prev.4.request.body.quoteId}",
            "method": "get",
            "params": {
              "ID": "{$prev.4.request.body.quoteId}"
            },
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "ignoreCallbacks": true,
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.payerfsp}",
              "FSPIOP-Destination": "{$inputs.toFspId}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "Content-Type": "{$inputs.contentTypeQuotes}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 202",
                  "exec": [
                    "expect(response.status).to.equal(202)"
                  ]
                }
              ]
            }
          },
          {
            "id": 7,
            "meta": {
              "info": "Send quote - missing date"
            },
            "description": "Send quote - missing date",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes",
            "method": "post",
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Content-Type": "{$inputs.contentTypeQuotes}",
              "FSPIOP-Source": "{$inputs.toFspId}",
              "FSPIOP-Destination": "{$inputs.toFspId}",
              "Authorization": "{$inputs.PAYEE_BEARER_TOKEN}"
            },
            "body": {
              "quoteId": "{$function.generic.generateUUID}",
              "transactionId": "{$function.generic.generateUUID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.fromIdType}",
                  "partyIdentifier": "{$inputs.payeeIdentifier}",
                  "fspId": "{$inputs.toFspId}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.fromFirstName}",
                    "lastName": "{$inputs.fromLastName}"
                  },
                  "dateOfBirth": "{$inputs.fromDOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.toIdType}",
                  "partyIdentifier": "{$inputs.payeeIdentifier}",
                  "fspId": "{$inputs.toFspId}"
                }
              },
              "amountType": "SEND",
              "amount": {
                "amount": "5",
                "currency": "{$inputs.currency}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              },
              "note": "{$inputs.note}"
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 400",
                  "exec": [
                    "expect(response.status).to.equal(400)"
                  ]
                },
                {
                  "id": 3,
                  "description": "Check Error code 3102",
                  "exec": [
                    "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                  ]
                },
                {
                  "id": 4,
                  "description": "Error message date is required",
                  "exec": [
                    "expect(response.body.errorInformation.errorDescription).to.include('date');"
                  ]
                },
                {
                  "id": 5,
                  "description": "Missing mandatory element error",
                  "exec": [
                    "expect(response.body.errorInformation.errorDescription).to.include('Missing mandatory element ');"
                  ]
                }
              ]
            },
            "params": {
              "Type": "MSISDN",
              "ID": "{$inputs.toIdValue}"
            },
            "path": "/quotes",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "ignoreCallbacks": true,
            "scripts": {
              "preRequest": {
                "exec": [
                  "",
                  ""
                ]
              },
              "postRequest": {
                "exec": [
                  ""
                ]
              }
            }
          },
          {
            "id": 8,
            "meta": {
              "info": "Send quote Copy"
            },
            "description": "Send quote Copy",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes",
            "method": "post",
            "headers": {
              "Content-Type": "{$inputs.contentTypeQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.SIMPAYER_NAME}",
              "FSPIOP-Destination": "{$inputs.toFspId}",
              "Authorization": "{$inputs.PAYER_BEARER_TOKEN}"
            },
            "body": {
              "quoteId": "{$function.generic.generateUUID}",
              "transactionId": "{$function.generic.generateUUID}",
              "payer": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.fromIdType}",
                  "partyIdentifier": "{$inputs.payerIdentifier}",
                  "fspId": "{$inputs.SIMPAYER_NAME}"
                },
                "personalInfo": {
                  "complexName": {
                    "firstName": "{$inputs.fromFirstName}",
                    "lastName": "{$inputs.fromLastName}"
                  },
                  "dateOfBirth": "{$inputs.fromDOB}"
                }
              },
              "payee": {
                "partyIdInfo": {
                  "partyIdType": "{$inputs.toIdType}",
                  "partyIdentifier": "{$inputs.payeeIdentifier}",
                  "fspId": "{$inputs.toFspId}"
                }
              },
              "amountType": "SEND",
              "amount": {
                "amount": "5",
                "currency": "{$inputs.currency}"
              },
              "transactionType": {
                "scenario": "TRANSFER",
                "initiator": "PAYER",
                "initiatorType": "CONSUMER"
              },
              "note": "{$inputs.note}"
            },
            "scriptingEngine": "javascript",
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 400",
                  "exec": [
                    "expect(response.status).to.equal(400)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Check Error code 3102",
                  "exec": [
                    "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                  ]
                },
                {
                  "id": 3,
                  "description": "Check Missing mandatory element - Invalid accept header",
                  "exec": [
                    "expect(response.body.errorInformation.errorDescription).to.include('/header must have required property \\'accept\\'');"
                  ]
                }
              ]
            },
            "params": {
              "Type": "MSISDN",
              "ID": "{$inputs.toIdValue}"
            },
            "path": "/quotes",
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "ignoreCallbacks": true,
            "scripts": {
              "preRequest": {
                "exec": [
                  "",
                  ""
                ]
              },
              "postRequest": {
                "exec": [
                  ""
                ]
              }
            }
          },
          {
            "id": 9,
            "meta": {
              "info": "Get Quote - Missing content type"
            },
            "description": "Get Quote - Missing content type",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes/{ID}",
            "path": "/quotes/{$prev.4.request.body.quoteId}",
            "method": "get",
            "params": {
              "ID": "{$prev.4.request.body.quoteId}"
            },
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "ignoreCallbacks": false,
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.payerfsp}",
              "FSPIOP-Destination": "{$inputs.toFspId}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 400",
                  "exec": [
                    "expect(response.status).to.equal(400)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Missing mandatory element error",
                  "exec": [
                    "expect(response.body.errorInformation.errorDescription).to.include('Missing mandatory element ');"
                  ]
                },
                {
                  "id": 3,
                  "description": "Check Error code 3102",
                  "exec": [
                    "expect(response.body.errorInformation.errorCode).to.equal('3102')"
                  ]
                }
              ]
            }
          },
          {
            "id": 10,
            "meta": {
              "info": "Get Quote - Invalid content type"
            },
            "description": "Get Quote - Invalid content type",
            "apiVersion": {
              "minorVersion": 1,
              "majorVersion": 1,
              "type": "fspiop",
              "asynchronous": true
            },
            "operationPath": "/quotes/{ID}",
            "path": "/quotes/{$prev.4.request.body.quoteId}",
            "method": "get",
            "params": {
              "ID": "{$prev.4.request.body.quoteId}"
            },
            "url": "{$inputs.HOST_QUOTING_SERVICE}",
            "ignoreCallbacks": false,
            "headers": {
              "Accept": "{$inputs.acceptQuotes}",
              "Date": "{$function.generic.curDate}",
              "FSPIOP-Source": "{$inputs.payerfsp}",
              "FSPIOP-Destination": "{$inputs.toFspId}",
              "Authorization": "{$inputs.TTK_BEARER_TOKEN}",
              "Content-Type": "{$inputs.contentTypeTransfers}"
            },
            "tests": {
              "assertions": [
                {
                  "id": 1,
                  "description": "Response status to be 400",
                  "exec": [
                    "expect(response.status).to.equal(400)"
                  ]
                },
                {
                  "id": 2,
                  "description": "Check Malformed syntax error",
                  "exec": [
                    "expect(response.body.errorInformation.errorDescription).to.include('Malformed syntax');"
                  ]
                },
                {
                  "id": 3,
                  "description": "Check Error code 3101",
                  "exec": [
                    "expect(response.body.errorInformation.errorCode).to.equal('3101')"
                  ]
                }
              ]
            }
          }
        ],
        "fileInfo": {
          "path": "hub/golden_path/quoting_service/quoting_service.json",
          "labels": [
            "quotes"
          ]
        }
      },
      {
        "id": "2",
        "name": "Party Lookup for other proxy in Scheme if not cached",
        "requests": [
          {
            "id": "1",
            "description": "Send party lookup request",
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "params": {
                "Type": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID_TYPE}",
                "ID": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID}"
            },
            "headers": {
                "Accept": "application/vnd.interoperability.parties+json;version=1.0",
                "Content-Type": "application/vnd.interoperability.parties+json;version=1.0",
                "Date": "{$function.generic.curDate}",
                "FSPIOP-Source": "{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ID}",
                "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 202",
                    "exec": [
                      "expect(response.status).to.equal(202)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Response Proxy Header should not be set",
                    "exec": [
                      "expect(callback.headers['fspiop-proxy']).to.equal('')"
                    ]
                  },
                  {
                    "id": 3,
                    "description": "Response Source Header same as TODO",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Source']}').to.equal('TODO')"
                    ]
                  },
                  {
                    "id": 4,
                    "description": "Response Destination Header same as Payerfsp Id",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Destination']}').to.equal('{$inputs.PROXY_PAYERFSP_ID}')"
                    ]
                  },
                  {
                    "id": 5,
                    "description": "an error callback is expected",
                    "exec": [
                      "expect(callback.errorInformation.errorCode).to.equal('{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ERROR_CODE}')",
                      "expect(callback.errorInformation.errorDescription).to.equal('{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ERROR_DESCRIPTION}')"
                    ]
                  }
                ]
              }
          },
          {
            "id": "2",
            "name": "Oracle Lookup",
            "requests": [
              {
                "id": "1",
                "description": "Send Oracle lookup request",
                "operationPath": "/participants/{Type}/{ID}",
                "method": "get",
                "params": {
                  "Type": "{$inputs.toIdType}",
                  "ID": "{$inputs.toIdValue}"
                },
                "headers": {
                  "Accept": "application/vnd.interoperability.participants+json;version=1.0",
                  "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
                  "Date": "{$function.generic.curDate}",
                  "FSPIOP-Source": "payerfsp",
                  "FSPIOP-Destination": "payeefsp"
                },
                "tests": {
                    "assertions": [
                      {
                        "id": 1,
                        "description": "Response status to be 200",
                        "exec": [
                          "expect(response.status).to.equal(200)"
                        ]
                      },
                      {
                        "id": 2,
                        "description": "Oracle should not have payeeDFSP set",
                        "exec": [
                          "expect(response.fspId).to.equal('')"
                        ]
                      }
                    ]
                  }
              }
            ]
          }
        ]
      },
      {
        "id": "3",
        "name": "Party Lookup for Proxy in Scheme if it is cached",
        "requests": [
          {
            "id": "1",
            "description": "Send party lookup request",
            "operationPath": "/parties/{Type}/{ID}",
            "method": "get",
            "params": {
                "Type": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID_TYPE}",
                "ID": "{$inputs.PROXY_PAYEEFSP_OTHER_PROXY_PARTY_ID}"
            },
            "headers": {
                "Accept": "application/vnd.interoperability.parties+json;version=1.0",
                "Content-Type": "application/vnd.interoperability.parties+json;version=1.0",
                "Date": "{$function.generic.curDate}",
                "FSPIOP-Source": "{$inputs.PROXY_PAYERFSP_OTHER_PROXY_ID}",
                "Authorization": "{$inputs.TTK_BEARER_TOKEN}"
            },
            "tests": {
                "assertions": [
                  {
                    "id": 1,
                    "description": "Response status to be 202",
                    "exec": [
                      "expect(response.status).to.equal(202)"
                    ]
                  },
                  {
                    "id": 2,
                    "description": "Response Proxy Header should not be set",
                    "exec": [
                      "expect(callback.headers['fspiop-proxy']).to.equal('')"
                    ]
                  },
                  {
                    "id": 3,
                    "description": "Response Source Header same as TODO",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Source']}').to.equal('TODO')"
                    ]
                  },
                  {
                    "id": 4,
                    "description": "Response Destination Header same as Payerfsp Id",
                    "exec": [
                      "expect('{$callback.headers['FSPIOP-Destination']}').to.equal('{$inputs.PROXY_PAYERFSP_ID}')"
                    ]
                  },
                  {
                    "id": 5,
                    "description": "Callback partyIdInfo (partyIdType, partyIdentifier)",
                    "exec": [
                      "expect(callback.body.party.partyIdInfo.partyIdType).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID_TYPE}')",
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_ID}')",
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_FIRST_NAME}')",
                      "expect(callback.body.party.partyIdInfo.partyIdentifier).to.equal('{$inputs.PROXY_PAYEEFSP_PARTY_LAST_NAME}')"
                    ]
                  }
                ]
              }
          },
          {
            "id": "2",
            "name": "Oracle Lookup",
            "requests": [
              {
                "id": "1",
                "description": "Send Oracle lookup request",
                "operationPath": "/participants/{Type}/{ID}",
                "method": "get",
                "params": {
                  "Type": "{$inputs.toIdType}",
                  "ID": "{$inputs.toIdValue}"
                },
                "headers": {
                  "Accept": "application/vnd.interoperability.participants+json;version=1.0",
                  "Content-Type": "application/vnd.interoperability.participants+json;version=1.0",
                  "Date": "{$function.generic.curDate}",
                  "FSPIOP-Source": "payerfsp",
                  "FSPIOP-Destination": "payeefsp"
                },
                "tests": {
                    "assertions": [
                      {
                        "id": 1,
                        "description": "Response status to be 200",
                        "exec": [
                          "expect(response.status).to.equal(200)"
                        ]
                      },
                      {
                        "id": 2,
                        "description": "Oracle should not have payeeDFSP set",
                        "exec": [
                          "expect(response.fspId).to.equal('')"
                        ]
                      }
                    ]
                  }
              }
            ]
          }
        ]
      }
    ]
  }