[
  {
    "ruleId": 12,
    "priority": 1,
    "description": "FXP - Generic error for post /fxQuotes",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false,
      "specFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/api_spec.yaml",
      "callbackMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/callback_map.json",
      "responseMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/response_map.json",
      "jsfRefFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/mockRef.json",
      "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_connector_backend_2.1/trigger_templates"
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "numericEqual",
          "value": "501",
          "path": "conversionTerms.sourceAmount.amount"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxQuotes"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "statusCode": "5001",
          "message": "Generic Error"
        },
        "statusCode": "500",
        "scripts": {
          "scriptingEngine": "postman"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 14,
    "priority": 1,
    "description": "FXP - Timeout scenario for post /fxQuotes",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false,
      "specFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/api_spec.yaml",
      "callbackMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/callback_map.json",
      "responseMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/response_map.json",
      "jsfRefFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/mockRef.json",
      "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_connector_backend_2.1/trigger_templates"
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "numericEqual",
          "value": "503",
          "path": "conversionTerms.sourceAmount.amount"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxQuotes"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "conversionTerms": {
            "amountType": "SEND",
            "conversionId": "{$request.body.conversionTerms.conversionId}",
            "counterPartyFsp": "{$request.body.conversionTerms.counterPartyFsp}",
            "determiningTransferId": "b51ec534-ee48-4575-b6a9-ead2955b8069",
            "expiration": "{$request.body.conversionTerms.expiration}",
            "initiatingFsp": "{$request.body.conversionTerms.initiatingFsp}",
            "sourceAmount": {
              "currency": "{$request.body.conversionTerms.sourceAmount.currency}"
            },
            "targetAmount": {
              "currency": "{$request.body.conversionTerms.targetAmount.currency}"
            }
          },
          "homeTransactionId": "homeTransactionId-123"
        },
        "statusCode": "200",
        "scripts": {
          "scriptingEngine": "postman"
        },
        "delay": 300000
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 6,
    "priority": 1,
    "description": "FXP - post /fxQuotes",
    "apiVersion": {
      "asynchronous": false,
      "majorVersion": 2,
      "minorVersion": 1,
      "type": "mojaloop_connector_outbound"
    },
    "conditions": {
      "all": [
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxQuotes"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "params": {
        "body": {
          "conversionTerms": {
            "amountType": "SEND",
            "conversionId": "{$request.body.conversionTerms.conversionId}",
            "counterPartyFsp": "{$request.body.conversionTerms.counterPartyFsp}",
            "determiningTransferId": "b51ec534-ee48-4575-b6a9-ead2955b8069",
            "expiration": "{$request.body.conversionTerms.expiration}",
            "initiatingFsp": "{$request.body.conversionTerms.initiatingFsp}",
            "sourceAmount": {
              "currency": "{$request.body.conversionTerms.sourceAmount.currency}"
            },
            "targetAmount": {
              "currency": "{$request.body.conversionTerms.targetAmount.currency}"
            }
          },
          "homeTransactionId": "homeTransactionId-123"
        },
        "statusCode": "200",
        "scripts": {
          "exec": [
            "const fxQuoteBody = JSON.parse(request.body)",
            "const fxRates = {",
            "    \"base\": \"USD\",",
            "    \"date\": \"2023-03-03\",",
            "    \"rates\": {",
            "        \"AED\": 3.670595,",
            "        \"AFN\": 88.881425,",
            "        \"ALL\": 108.376523,",
            "        \"AMD\": 390.471399,",
            "        \"ANG\": 1.804308,",
            "        \"AOA\": 505.839998,",
            "        \"ARS\": 197.689779,",
            "        \"AUD\": 1.48222,",
            "        \"AWG\": 1.799566,",
            "        \"AZN\": 1.699337,",
            "        \"BAM\": 1.842544,",
            "        \"BBD\": 1.998973,",
            "        \"BDT\": 107.07517,",
            "        \"BGN\": 1.843505,",
            "        \"BHD\": 0.376919,",
            "        \"BIF\": 2079.526363,",
            "        \"BMD\": 0.999953,",
            "        \"BND\": 1.34899,",
            "        \"BOB\": 6.915241,",
            "        \"BRL\": 5.198354,",
            "        \"BSD\": 0.999335,",
            "        \"BTC\": 0.000044,",
            "        \"BTN\": 82.647688,",
            "        \"BWP\": 13.237335,",
            "        \"BYN\": 2.526074,",
            "        \"BZD\": 2.01736,",
            "        \"CAD\": 1.357836,",
            "        \"CDF\": 2086.44176,",
            "        \"CHF\": 0.940605,",
            "        \"CLF\": 0.02963,",
            "        \"CLP\": 812.200511,",
            "        \"CNH\": 6.904663,",
            "        \"CNY\": 6.898567,",
            "        \"COP\": 4833.056834,",
            "        \"CRC\": 558.748547,",
            "        \"CUC\": 0.99935,",
            "        \"CUP\": 25.728404,",
            "        \"CVE\": 103.850722,",
            "        \"CZK\": 22.089353,",
            "        \"DJF\": 178.175863,",
            "        \"DKK\": 7.009313,",
            "        \"DOP\": 55.539156,",
            "        \"DZD\": 136.526375,",
            "        \"EGP\": 30.743014,",
            "        \"ERN\": 14.987908,",
            "        \"ETB\": 53.840023,",
            "        \"EUR\": 0.942228,",
            "        \"FJD\": 2.210902,",
            "        \"FKP\": 0.83471,",
            "        \"GBP\": 0.834759,",
            "        \"GEL\": 2.598071,",
            "        \"GGP\": 0.834647,",
            "        \"GHS\": 12.759418,",
            "        \"GIP\": 0.834672,",
            "        \"GMD\": 60.98912,",
            "        \"GNF\": 8615.060299,",
            "        \"GTQ\": 7.816555,",
            "        \"GYD\": 211.148725,",
            "        \"HKD\": 7.843114,",
            "        \"HNL\": 24.676398,",
            "        \"HRK\": 7.096534,",
            "        \"HTG\": 151.107107,",
            "        \"HUF\": 354.546511,",
            "        \"IDR\": 15305.816425,",
            "        \"ILS\": 3.659591,",
            "        \"IMP\": 0.83482,",
            "        \"INR\": 82.271752,",
            "        \"IQD\": 1460.523392,",
            "        \"IRR\": 42214.667089,",
            "        \"ISK\": 142.311052,",
            "        \"JEP\": 0.83532,",
            "        \"JMD\": 154.109032,",
            "        \"JOD\": 0.709871,",
            "        \"JPY\": 136.579884,",
            "        \"KES\": 127.794041,",
            "        \"KGS\": 87.345932,",
            "        \"KHR\": 4067.915978,",
            "        \"KMF\": 464.562389,",
            "        \"KPW\": 899.247674,",
            "        \"KRW\": 1302.190934,",
            "        \"KWD\": 0.307326,",
            "        \"KYD\": 0.83405,",
            "        \"KZT\": 436.101643,",
            "        \"LAK\": 16873.790213,",
            "        \"LBP\": 15020.521133,",
            "        \"LKR\": 345.92388,",
            "        \"LRD\": 159.117366,",
            "        \"LSL\": 18.20456,",
            "        \"LYD\": 4.835853,",
            "        \"MAD\": 10.388795,",
            "        \"MDL\": 18.888917,",
            "        \"MGA\": 4296.352625,",
            "        \"MKD\": 58.02969,",
            "        \"MMK\": 2101.470623,",
            "        \"MNT\": 3404.116439,",
            "        \"MOP\": 8.091167,",
            "        \"MRU\": 36.386096,",
            "        \"MUR\": 46.641155,",
            "        \"MVR\": 15.347871,",
            "        \"MWK\": 1027.828846,",
            "        \"MXN\": 18.098725,",
            "        \"MYR\": 4.474645,",
            "        \"MZN\": 63.797698,",
            "        \"NAD\": 18.214751,",
            "        \"NGN\": 460.317636,",
            "        \"NIO\": 36.600644,",
            "        \"NOK\": 10.424506,",
            "        \"NPR\": 132.235448,",
            "        \"NZD\": 1.604879,",
            "        \"OMR\": 0.385743,",
            "        \"PAB\": 0.999902,",
            "        \"PEN\": 3.770718,",
            "        \"PGK\": 3.527422,",
            "        \"PHP\": 54.844041,",
            "        \"PKR\": 278.695386,",
            "        \"PLN\": 4.423791,",
            "        \"PYG\": 7220.315472,",
            "        \"QAR\": 3.651532,",
            "        \"RON\": 4.637626,",
            "        \"RSD\": 110.496314,",
            "        \"RUB\": 75.238572,",
            "        \"RWF\": 1091.764956,",
            "        \"SAR\": 3.750399,",
            "        \"SBD\": 8.239938,",
            "        \"SCR\": 13.476738,",
            "        \"SDG\": 590.506115,",
            "        \"SEK\": 10.481266,",
            "        \"SGD\": 1.346505,",
            "        \"SHP\": 0.834776,",
            "        \"SLL\": 17650.226858,",
            "        \"SOS\": 568.863447,",
            "        \"SRD\": 33.904806,",
            "        \"SSP\": 130.15096,",
            "        \"STD\": 22804.902808,",
            "        \"STN\": 23.075404,",
            "        \"SVC\": 8.756667,",
            "        \"SYP\": 2510.429835,",
            "        \"SZL\": 18.20316,",
            "        \"THB\": 34.771491,",
            "        \"TJS\": 10.006042,",
            "        \"TMT\": 3.507758,",
            "        \"TND\": 3.129616,",
            "        \"TOP\": 2.355679,",
            "        \"TRY\": 18.879408,",
            "        \"TTD\": 6.789468,",
            "        \"TWD\": 30.624624,",
            "        \"TZS\": 2330.0501,",
            "        \"UAH\": 36.958426,",
            "        \"UGX\": 3718.628848,",
            "        \"USD\": 1,",
            "        \"UYU\": 38.884596,",
            "        \"UZS\": 11371.806807,",
            "        \"VES\": 24.306068,",
            "        \"VND\": 23702.143038,",
            "        \"VUV\": 117.94585,",
            "        \"WST\": 2.695482,",
            "        \"XAF\": 617.756757,",
            "        \"XAG\": 0.047556,",
            "        \"XAU\": 0.0011,",
            "        \"XCD\": 2.700451,",
            "        \"XDR\": 0.751352,",
            "        \"XOF\": 617.756728,",
            "        \"XPD\": 0.001709,",
            "        \"XPF\": 112.382643,",
            "        \"XPT\": 0.001221,",
            "        \"YER\": 250.041827,",
            "        \"ZAR\": 18.172541,",
            "        \"ZMW\": 19.989716,",
            "        \"ZWL\": 321.731101",
            "    }",
            "}",
            "",
            "const sourceCurrency = fxQuoteBody.conversionTerms.sourceAmount?.currency",
            "const targetCurrency = fxQuoteBody.conversionTerms.targetAmount?.currency",
            "let conversionRate = 1",
            "",
            "if(sourceCurrency === fxRates.base) {",
            "    conversionRate = fxRates.rates[targetCurrency]",
            "} else {",
            "    const invertConvRate1 = fxRates.rates[sourceCurrency]",
            "    const baseConvRate = fxRates.rates[targetCurrency]",
            "    conversionRate = (baseConvRate / invertConvRate1)",
            "}",
            "",
            "const sourceAmount = fxQuoteBody.conversionTerms.sourceAmount.amount",
            "const targetAmount = fxQuoteBody.conversionTerms.targetAmount.amount",
            "",
            "let newSourceAmount = sourceAmount",
            "let newTargetAmount = targetAmount",
            "",
            "if (!sourceAmount) {",
            "  newSourceAmount = Math.round(targetAmount / conversionRate)",
            "}",
            "",
            "if (!targetAmount) {",
            "  newTargetAmount = Math.round(sourceAmount * conversionRate)",
            "}",
            "",
            "const chargesPercent = 2",
            "const chargesSourceAmount = Math.round(newSourceAmount * chargesPercent) / 100",
            "const chargesTargetAmount = Math.round(newTargetAmount * chargesPercent) / 100",
            "",
            "custom.appendEventBody({",
            "  conversionTerms: {",
            "    sourceAmount: {",
            "      amount: newSourceAmount + \"\"",
            "    },",
            "    targetAmount: {",
            "      amount: newTargetAmount + \"\"",
            "    },",
            "    charges: [",
            "      {",
            "        chargeType: \"currency conversion\",",
            "        sourceAmount: {",
            "          amount: chargesSourceAmount + \"\",",
            "          currency: sourceCurrency",
            "        },",
            "        targetAmount: {",
            "          amount: chargesTargetAmount + \"\",",
            "          currency: targetCurrency",
            "        }",
            "      }",
            "    ]",
            "  }",
            "})"
          ],
          "scriptingEngine": "javascript"
        }
      },
      "path": null,
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 13,
    "priority": 1,
    "description": "FXP - Generic error for post /fxTransfers",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false,
      "specFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/api_spec.yaml",
      "callbackMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/callback_map.json",
      "responseMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/response_map.json",
      "jsfRefFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/mockRef.json",
      "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_connector_backend_2.1/trigger_templates"
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "numericEqual",
          "value": "502",
          "path": "sourceAmount.amount"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxTransfers"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "statusCode": "5002",
          "message": "Generic forex transfer error"
        },
        "statusCode": "500",
        "scripts": {
          "scriptingEngine": "postman"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 15,
    "priority": 1,
    "description": "FXP - Timeout scenario for post /fxTransfers",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false,
      "specFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/api_spec.yaml",
      "callbackMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/callback_map.json",
      "responseMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/response_map.json",
      "jsfRefFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/mockRef.json",
      "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_connector_backend_2.1/trigger_templates"
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "numericEqual",
          "value": "504",
          "path": "sourceAmount.amount"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxTransfers"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "homeTransactionId": "{$request.body.homeTransactionId}",
          "completedTimestamp": "{$environment.completedTimestamp}",
          "conversionState": "RESERVED"
        },
        "statusCode": "200",
        "scripts": {
          "exec": [
            "environment.completedTimestamp = new Date().toISOString()"
          ],
          "scriptingEngine": "javascript"
        },
        "delay": 300000
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 16,
    "priority": 1,
    "description": "FXP - ABORTED state for post /fxTransfers",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false,
      "specFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/api_spec.yaml",
      "callbackMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/callback_map.json",
      "responseMapFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/response_map.json",
      "jsfRefFile": "spec_files/api_definitions/mojaloop_connector_backend_2.1/mockRef.json",
      "triggerTemplatesFolder": "spec_files/api_definitions/mojaloop_connector_backend_2.1/trigger_templates"
    },
    "conditions": {
      "all": [
        {
          "fact": "body",
          "operator": "numericEqual",
          "value": "506",
          "path": "sourceAmount.amount"
        },
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxTransfers"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "homeTransactionId": "{$request.body.homeTransactionId}",
          "completedTimestamp": "{$environment.completedTimestamp}",
          "conversionState": "ABORTED"
        },
        "statusCode": "200",
        "scripts": {
          "exec": [
            "environment.completedTimestamp = new Date().toISOString()"
          ],
          "scriptingEngine": "javascript"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 7,
    "priority": 1,
    "description": "FXP - post /fxTransfers response",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_outbound",
      "asynchronous": false
    },
    "conditions": {
      "all": [
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/fxTransfers"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "homeTransactionId": "{$request.body.homeTransactionId}",
          "completedTimestamp": "{$environment.completedTimestamp}",
          "conversionState": "RESERVED"
        },
        "statusCode": "200",
        "scripts": {
          "exec": [
            "environment.completedTimestamp = new Date().toISOString()"
          ],
          "scriptingEngine": "javascript"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 8,
    "priority": 1,
    "description": "get /parties/{idType}/{idValue}",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_outbound",
      "asynchronous": false
    },
    "conditions": {
      "all": [
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/parties/{idType}/{idValue}"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "get"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "dateOfBirth": "1966-06-16",
          "displayName": "Yaro",
          "firstName": "Yaro",
          "fspId": "pm4mltest2",
          "idType": "MSISDN",
          "idValue": "{$request.params.idValue}",
          "lastName": "Smith",
          "merchantClassificationCode": "1234",
          "middleName": "",
          "kycInformation": "This is encrypted KYC information"
        },
        "statusCode": "200",
        "scripts": {
          "scriptingEngine": "postman"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 9,
    "priority": 1,
    "description": "post /quoterequests",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false
    },
    "conditions": {
      "all": [
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/quoterequests"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "quoteId": "{$request.body.quoteId}",
          "transactionId": "{$request.body.transactionId}",
          "transferAmount": "{$request.body.amount}",
          "transferAmountCurrency": "{$request.body.currency}"
        },
        "statusCode": "200",
        "scripts": {
          "scriptingEngine": "postman"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 10,
    "priority": 1,
    "description": "post /transfers",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": false
    },
    "conditions": {
      "all": [
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/transfers"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "completedTimestamp": "{$environment.completedTimestamp}",
          "homeTransactionId": "123",
          "transferState": "COMMITTED"
        },
        "statusCode": "200",
        "scripts": {
          "exec": [
            "environment.completedTimestamp = new Date().toISOString()"
          ],
          "scriptingEngine": "javascript"
        }
      },
      "type": "FIXED_RESPONSE"
    },
    "type": "response",
    "version": 1
  },
  {
    "ruleId": 11,
    "priority": 1,
    "description": "post /transactionrequests",
    "apiVersion": {
      "minorVersion": 1,
      "majorVersion": 2,
      "type": "mojaloop_connector_backend",
      "asynchronous": true
    },
    "conditions": {
      "all": [
        {
          "fact": "operationPath",
          "operator": "equal",
          "value": "/transactionrequests"
        },
        {
          "fact": "method",
          "operator": "equal",
          "value": "post"
        }
      ]
    },
    "event": {
      "method": null,
      "path": null,
      "params": {
        "body": {
          "homeR2PTransactionId": "cba321",
          "transactionId": "{$function.generic.generateUUID}",
          "transactionRequestState": "RECEIVED"
        },
        "statusCode": "200",
        "scripts": {
          "exec": [
            "const reqBody = JSON.parse(request.body)",
            "const outEndpoint = userConfig.CALLBACK_ENDPOINT",
            "const outReqBody = {",
            "  transactionRequestId: reqBody.transactionRequestId,",
            "  homeR2PTransactionId: 'abc123',",
            "  from: reqBody.to,",
            "  to: reqBody.from,",
            "  amountType: \"RECEIVE\",",
            "  currency: reqBody.currency,",
            "  amount: reqBody.amount,",
            "  scenario: \"DEPOSIT\",",
            "  initiator: reqBody.initiator,",
            "  initiatorType: reqBody.initiatorType,",
            "  note: \"Note sent to Payee.\"",
            "}",
            "try {",
            "  const axioResponse = await axios({",
            "    method: 'post',",
            "    url: outEndpoint + '/requestToPayTransfer',",
            "    data: outReqBody",
            "  });",
            "  res = axioResponse.data;",
            "  responseCode = axioResponse.code || axioResponse.status",
            "} catch (err) {",
            "  console.log(err)",
            "}",
            ""
          ],
          "scriptingEngine": "javascript"
        }
      },
      "type": "MOCK_RESPONSE"
    },
    "type": "response",
    "version": 1
  }
]